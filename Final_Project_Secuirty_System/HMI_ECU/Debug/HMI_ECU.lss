
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000390a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020c  00800060  0000390a  0000399e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080026c  0080026c  00003baa  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bd  00000000  00000000  00006de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000823d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000842f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a83a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cd98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e5       	ldi	r26, 0x56	; 86
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e5       	ldi	r22, 0x56	; 86
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 5a       	subi	r30, 0xA2	; 162
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:

#include "hmi_functions.h" 	/* Include header for HMI-related functions */
#include "lcd.h"          	/* Include header for LCD-related functions */

int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <main+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	uint8 g_status; 	/* Declare a variable to store the status of received commands */
	Init_Function(); 	/* Initialize HMI-related functions and LCD */
     e3a:	0e 94 2d 0b 	call	0x165a	; 0x165a <Init_Function>

	/* Infinite loop to continuously check for and execute commands */
	while(1)
	{
		g_status = receive_command(); 	/* Receive command and update status */
     e3e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <receive_command>
     e42:	89 83       	std	Y+1, r24	; 0x01
		switch (g_status) 				/* Switch case based on the received command status */
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3b 83       	std	Y+3, r19	; 0x03
     e4c:	2a 83       	std	Y+2, r18	; 0x02
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	83 31       	cpi	r24, 0x13	; 19
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <main+0x2c>
     e58:	4a c0       	rjmp	.+148    	; 0xeee <main+0xc0>
     e5a:	2a 81       	ldd	r18, Y+2	; 0x02
     e5c:	3b 81       	ldd	r19, Y+3	; 0x03
     e5e:	24 31       	cpi	r18, 0x14	; 20
     e60:	31 05       	cpc	r19, r1
     e62:	84 f4       	brge	.+32     	; 0xe84 <main+0x56>
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	81 31       	cpi	r24, 0x11	; 17
     e6a:	91 05       	cpc	r25, r1
     e6c:	39 f1       	breq	.+78     	; 0xebc <main+0x8e>
     e6e:	2a 81       	ldd	r18, Y+2	; 0x02
     e70:	3b 81       	ldd	r19, Y+3	; 0x03
     e72:	22 31       	cpi	r18, 0x12	; 18
     e74:	31 05       	cpc	r19, r1
     e76:	2c f5       	brge	.+74     	; 0xec2 <main+0x94>
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	9b 81       	ldd	r25, Y+3	; 0x03
     e7c:	80 31       	cpi	r24, 0x10	; 16
     e7e:	91 05       	cpc	r25, r1
     e80:	d1 f0       	breq	.+52     	; 0xeb6 <main+0x88>
     e82:	dd cf       	rjmp	.-70     	; 0xe3e <main+0x10>
     e84:	2a 81       	ldd	r18, Y+2	; 0x02
     e86:	3b 81       	ldd	r19, Y+3	; 0x03
     e88:	25 31       	cpi	r18, 0x15	; 21
     e8a:	31 05       	cpc	r19, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <main+0x62>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <main+0x108>
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	85 31       	cpi	r24, 0x15	; 21
     e96:	91 05       	cpc	r25, r1
     e98:	0c f4       	brge	.+2      	; 0xe9c <main+0x6e>
     e9a:	44 c0       	rjmp	.+136    	; 0xf24 <main+0xf6>
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	24 32       	cpi	r18, 0x24	; 36
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <main+0x7a>
     ea6:	5d c0       	rjmp	.+186    	; 0xf62 <main+0x134>
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	9b 81       	ldd	r25, Y+3	; 0x03
     eac:	85 32       	cpi	r24, 0x25	; 37
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <main+0x86>
     eb2:	76 c0       	rjmp	.+236    	; 0xfa0 <main+0x172>
     eb4:	c4 cf       	rjmp	.-120    	; 0xe3e <main+0x10>
		{
			case NO_PASSWORD_FOUND:
				Taking_newPassword(); 	/* Prompt user to set a new password if none is found */
     eb6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Taking_newPassword>
     eba:	c1 cf       	rjmp	.-126    	; 0xe3e <main+0x10>
				break;
			case PASSWORD_FOUND:
				Main_Menu(); 			/* Display main menu if password is found */
     ebc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Main_Menu>
     ec0:	be cf       	rjmp	.-132    	; 0xe3e <main+0x10>
				break;
			case PASSWORDS_MATCH:
				LCD_clearScreen(); 									/* Clear the LCD screen */
     ec2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
				LCD_displaySringRowColumn("PASSWORD SAVED", 0, 1); 	/* Display success message */
     ec6:	80 e6       	ldi	r24, 0x60	; 96
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
				LCD_displaySringRowColumn("SUCCESSFULLY", 1, 2); 	/* Continue success message */
     ed2:	8f e6       	ldi	r24, 0x6F	; 111
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	42 e0       	ldi	r20, 0x02	; 2
     eda:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
				Timer1_countSeconds(TWO_SECONDS); 					/* Wait for two seconds */
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
				g_attempt = ZERO_ATTEMPTS; 							/* Reset password attempt counter */
     ee4:	10 92 76 02 	sts	0x0276, r1
				Main_Menu(); 										/* Return to main menu */
     ee8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Main_Menu>
     eec:	a8 cf       	rjmp	.-176    	; 0xe3e <main+0x10>
				break;
			case PASSWORDS_UNMATCH:
				LCD_clearScreen(); 				/* Clear the LCD screen */
     eee:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
				if (g_attempt == MAX_ATTEMPTS) 	/* Check if maximum attempts reached */
     ef2:	80 91 76 02 	lds	r24, 0x0276
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	19 f4       	brne	.+6      	; 0xf00 <main+0xd2>
				{
					Taking_newPassword(); 		/* Prompt user to set a new password */
     efa:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Taking_newPassword>
     efe:	9f cf       	rjmp	.-194    	; 0xe3e <main+0x10>
				}
				else
				{
					LCD_displaySringRowColumn("PASSWORD UNMATCH", 0, 0); /* Display error message */
     f00:	8c e7       	ldi	r24, 0x7C	; 124
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					LCD_displaySringRowColumn("TRY AGAIN", 1, 3); 		 /* Prompt to try again */
     f0c:	8d e8       	ldi	r24, 0x8D	; 141
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	43 e0       	ldi	r20, 0x03	; 3
     f14:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					Timer1_countSeconds(TWO_SECONDS); 					 /* Wait for two seconds */
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
					Taking_newPassword(); 								 /* Prompt user to set a new password */
     f1e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Taking_newPassword>
     f22:	8d cf       	rjmp	.-230    	; 0xe3e <main+0x10>
				}

				break;
			case PASSWORD_MATCH_OPEN:
				LCD_clearScreen(); 			/* Clear the LCD screen */
     f24:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
				g_attempt = ZERO_ATTEMPTS; 	/* Reset password attempt counter */
     f28:	10 92 76 02 	sts	0x0276, r1
				Open_Door(); 				/* Open the door if password matches */
     f2c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <Open_Door>
				Main_Menu(); 				/* Return to main menu */
     f30:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Main_Menu>
     f34:	84 cf       	rjmp	.-248    	; 0xe3e <main+0x10>
				break;
			case PASSWORD_MATCH_CHANGE:
				LCD_clearScreen();							 			/* Clear the LCD screen */
     f36:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
				LCD_displaySringRowColumn("PASSWORD IS", 0, 2); 		/* Display confirmation message */
     f3a:	87 e9       	ldi	r24, 0x97	; 151
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	42 e0       	ldi	r20, 0x02	; 2
     f42:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
				LCD_displaySringRowColumn("CORRECT WELCOME", 0, 1); 	/* Continue confirmation message */
     f46:	83 ea       	ldi	r24, 0xA3	; 163
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
				Timer1_countSeconds(TWO_SECONDS); 						/* Wait for two seconds */
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
				g_attempt = ZERO_ATTEMPTS; 								/* Reset password attempt counter */
     f58:	10 92 76 02 	sts	0x0276, r1
				Change_Password(); 										/* Proceed to change password */
     f5c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <Change_Password>
     f60:	6e cf       	rjmp	.-292    	; 0xe3e <main+0x10>
				break;
			case PASSWORD_UNMATCH_OPEN:
				if (g_attempt == MAX_ATTEMPTS)	 	/* Check if maximum attempts reached */
     f62:	80 91 76 02 	lds	r24, 0x0276
     f66:	84 30       	cpi	r24, 0x04	; 4
     f68:	31 f4       	brne	.+12     	; 0xf76 <main+0x148>
				{
					LCD_clearScreen(); 				/* Clear the LCD screen */
     f6a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
					Checking_Password(OPEN_DOOR); 	/* Check password for opening door */
     f6e:	87 e1       	ldi	r24, 0x17	; 23
     f70:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
     f74:	64 cf       	rjmp	.-312    	; 0xe3e <main+0x10>
				}
				else
				{
					LCD_clearScreen(); 										/* Clear the LCD screen */
     f76:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
					LCD_displaySringRowColumn("PASSWORD ISN'T", 0, 1); 		/* Display error message */
     f7a:	83 eb       	ldi	r24, 0xB3	; 179
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					LCD_displaySringRowColumn("CORRECT TRY AGAIN", 1, 0); 	/* Prompt to try again */
     f86:	82 ec       	ldi	r24, 0xC2	; 194
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					Timer1_countSeconds(TWO_SECONDS); 						/* Wait for two seconds */
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
					Checking_Password(OPEN_DOOR); 							/* Check password for opening door */
     f98:	87 e1       	ldi	r24, 0x17	; 23
     f9a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
     f9e:	4f cf       	rjmp	.-354    	; 0xe3e <main+0x10>
				}
				break;
			case PASSWORD_UNMATCH_CHANGE:
				if (g_attempt == MAX_ATTEMPTS) 				/* Check if maximum attempts reached */
     fa0:	80 91 76 02 	lds	r24, 0x0276
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	31 f4       	brne	.+12     	; 0xfb4 <main+0x186>
				{
					LCD_clearScreen(); 						/* Clear the LCD screen */
     fa8:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
					Checking_Password(CHANGING_PASSWORD); 	/* Check password for changing password */
     fac:	83 e2       	ldi	r24, 0x23	; 35
     fae:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
     fb2:	45 cf       	rjmp	.-374    	; 0xe3e <main+0x10>
				}
				else
				{
					LCD_clearScreen(); 										/* Clear the LCD screen */
     fb4:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
					LCD_displaySringRowColumn("PASSWORD ISN'T", 0, 1); 		/* Display error message */
     fb8:	83 eb       	ldi	r24, 0xB3	; 179
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					LCD_displaySringRowColumn("CORRECT TRY AGAIN", 1, 0); 	/* Prompt to try again */
     fc4:	82 ec       	ldi	r24, 0xC2	; 194
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
					Timer1_countSeconds(TWO_SECONDS); 						/* Wait for two seconds */
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
					Checking_Password(CHANGING_PASSWORD); 					/* Check password for changing password */
     fd6:	83 e2       	ldi	r24, 0x23	; 35
     fd8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
     fdc:	30 cf       	rjmp	.-416    	; 0xe3e <main+0x10>

00000fde <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <GPIO_setupPinDirection+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <GPIO_setupPinDirection+0x8>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	6a 83       	std	Y+2, r22	; 0x02
     ff0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	88 30       	cpi	r24, 0x08	; 8
     ff6:	08 f0       	brcs	.+2      	; 0xffa <GPIO_setupPinDirection+0x1c>
     ff8:	d5 c0       	rjmp	.+426    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	84 30       	cpi	r24, 0x04	; 4
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <GPIO_setupPinDirection+0x24>
    1000:	d1 c0       	rjmp	.+418    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	3d 83       	std	Y+5, r19	; 0x05
    100a:	2c 83       	std	Y+4, r18	; 0x04
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <GPIO_setupPinDirection+0x3a>
    1016:	43 c0       	rjmp	.+134    	; 0x109e <GPIO_setupPinDirection+0xc0>
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
    101a:	3d 81       	ldd	r19, Y+5	; 0x05
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <GPIO_setupPinDirection+0x4e>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	71 f0       	breq	.+28     	; 0x1046 <GPIO_setupPinDirection+0x68>
    102a:	bc c0       	rjmp	.+376    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <GPIO_setupPinDirection+0x5a>
    1036:	5f c0       	rjmp	.+190    	; 0x10f6 <GPIO_setupPinDirection+0x118>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	91 05       	cpc	r25, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <GPIO_setupPinDirection+0x66>
    1042:	85 c0       	rjmp	.+266    	; 0x114e <GPIO_setupPinDirection+0x170>
    1044:	af c0       	rjmp	.+350    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	a1 f4       	brne	.+40     	; 0x1074 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_setupPinDirection+0x8c>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_setupPinDirection+0x88>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	98 c0       	rjmp	.+304    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_setupPinDirection+0xb4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_setupPinDirection+0xb0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	83 c0       	rjmp	.+262    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	a1 f4       	brne	.+40     	; 0x10cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10a4:	a7 e3       	ldi	r26, 0x37	; 55
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_setupPinDirection+0xe4>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_setupPinDirection+0xe0>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	6c c0       	rjmp	.+216    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10cc:	a7 e3       	ldi	r26, 0x37	; 55
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e7 e3       	ldi	r30, 0x37	; 55
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <GPIO_setupPinDirection+0x10c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <GPIO_setupPinDirection+0x108>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	57 c0       	rjmp	.+174    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a1 f4       	brne	.+40     	; 0x1124 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10fc:	a4 e3       	ldi	r26, 0x34	; 52
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e3       	ldi	r30, 0x34	; 52
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_setupPinDirection+0x13c>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_setupPinDirection+0x138>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	40 c0       	rjmp	.+128    	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1124:	a4 e3       	ldi	r26, 0x34	; 52
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e3       	ldi	r30, 0x34	; 52
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_setupPinDirection+0x164>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_setupPinDirection+0x160>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	2b c0       	rjmp	.+86     	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	a1 f4       	brne	.+40     	; 0x117c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1154:	a1 e3       	ldi	r26, 0x31	; 49
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_setupPinDirection+0x194>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_setupPinDirection+0x190>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	14 c0       	rjmp	.+40     	; 0x11a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    117c:	a1 e3       	ldi	r26, 0x31	; 49
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e1 e3       	ldi	r30, 0x31	; 49
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_setupPinDirection+0x1bc>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_setupPinDirection+0x1b8>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <GPIO_writePin+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <GPIO_writePin+0x8>
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02
    11c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 30       	cpi	r24, 0x08	; 8
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <GPIO_writePin+0x1c>
    11ce:	d5 c0       	rjmp	.+426    	; 0x137a <GPIO_writePin+0x1c6>
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <GPIO_writePin+0x24>
    11d6:	d1 c0       	rjmp	.+418    	; 0x137a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3d 83       	std	Y+5, r19	; 0x05
    11e0:	2c 83       	std	Y+4, r18	; 0x04
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <GPIO_writePin+0x3a>
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <GPIO_writePin+0xc0>
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <GPIO_writePin+0x4e>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	71 f0       	breq	.+28     	; 0x121c <GPIO_writePin+0x68>
    1200:	bc c0       	rjmp	.+376    	; 0x137a <GPIO_writePin+0x1c6>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <GPIO_writePin+0x5a>
    120c:	5f c0       	rjmp	.+190    	; 0x12cc <GPIO_writePin+0x118>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <GPIO_writePin+0x66>
    1218:	85 c0       	rjmp	.+266    	; 0x1324 <GPIO_writePin+0x170>
    121a:	af c0       	rjmp	.+350    	; 0x137a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	a1 f4       	brne	.+40     	; 0x124a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1222:	ab e3       	ldi	r26, 0x3B	; 59
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_writePin+0x8c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_writePin+0x88>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	98 c0       	rjmp	.+304    	; 0x137a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    124a:	ab e3       	ldi	r26, 0x3B	; 59
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e3       	ldi	r30, 0x3B	; 59
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_writePin+0xb4>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_writePin+0xb0>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	83 c0       	rjmp	.+262    	; 0x137a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	a1 f4       	brne	.+40     	; 0x12a2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    127a:	a8 e3       	ldi	r26, 0x38	; 56
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 e3       	ldi	r30, 0x38	; 56
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_writePin+0xe4>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_writePin+0xe0>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	6c c0       	rjmp	.+216    	; 0x137a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_writePin+0x10c>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_writePin+0x108>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	57 c0       	rjmp	.+174    	; 0x137a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	a1 f4       	brne	.+40     	; 0x12fa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12d2:	a5 e3       	ldi	r26, 0x35	; 53
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e3       	ldi	r30, 0x35	; 53
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_writePin+0x13c>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_writePin+0x138>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	40 c0       	rjmp	.+128    	; 0x137a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12fa:	a5 e3       	ldi	r26, 0x35	; 53
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e3       	ldi	r30, 0x35	; 53
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0x164>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0x160>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	2b c0       	rjmp	.+86     	; 0x137a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	a1 f4       	brne	.+40     	; 0x1352 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    132a:	a2 e3       	ldi	r26, 0x32	; 50
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <GPIO_writePin+0x194>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <GPIO_writePin+0x190>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	14 c0       	rjmp	.+40     	; 0x137a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1352:	a2 e3       	ldi	r26, 0x32	; 50
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e2 e3       	ldi	r30, 0x32	; 50
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_writePin+0x1bc>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_writePin+0x1b8>
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_readPin+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_readPin+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    139c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <GPIO_readPin+0x1c>
    13a4:	84 c0       	rjmp	.+264    	; 0x14ae <GPIO_readPin+0x124>
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <GPIO_readPin+0x24>
    13ac:	80 c0       	rjmp	.+256    	; 0x14ae <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3d 83       	std	Y+5, r19	; 0x05
    13b6:	2c 83       	std	Y+4, r18	; 0x04
    13b8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ba:	5d 81       	ldd	r21, Y+5	; 0x05
    13bc:	41 30       	cpi	r20, 0x01	; 1
    13be:	51 05       	cpc	r21, r1
    13c0:	79 f1       	breq	.+94     	; 0x1420 <GPIO_readPin+0x96>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	91 05       	cpc	r25, r1
    13ca:	34 f4       	brge	.+12     	; 0x13d8 <GPIO_readPin+0x4e>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	69 f0       	breq	.+26     	; 0x13f0 <GPIO_readPin+0x66>
    13d6:	6b c0       	rjmp	.+214    	; 0x14ae <GPIO_readPin+0x124>
    13d8:	4c 81       	ldd	r20, Y+4	; 0x04
    13da:	5d 81       	ldd	r21, Y+5	; 0x05
    13dc:	42 30       	cpi	r20, 0x02	; 2
    13de:	51 05       	cpc	r21, r1
    13e0:	b9 f1       	breq	.+110    	; 0x1450 <GPIO_readPin+0xc6>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <GPIO_readPin+0x64>
    13ec:	49 c0       	rjmp	.+146    	; 0x1480 <GPIO_readPin+0xf6>
    13ee:	5f c0       	rjmp	.+190    	; 0x14ae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13f0:	e9 e3       	ldi	r30, 0x39	; 57
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a9 01       	movw	r20, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_readPin+0x7e>
    1404:	55 95       	asr	r21
    1406:	47 95       	ror	r20
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_readPin+0x7a>
    140c:	ca 01       	movw	r24, r20
    140e:	81 70       	andi	r24, 0x01	; 1
    1410:	90 70       	andi	r25, 0x00	; 0
    1412:	88 23       	and	r24, r24
    1414:	19 f0       	breq	.+6      	; 0x141c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	49 c0       	rjmp	.+146    	; 0x14ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	47 c0       	rjmp	.+142    	; 0x14ae <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1420:	e6 e3       	ldi	r30, 0x36	; 54
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_readPin+0xae>
    1434:	55 95       	asr	r21
    1436:	47 95       	ror	r20
    1438:	8a 95       	dec	r24
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_readPin+0xaa>
    143c:	ca 01       	movw	r24, r20
    143e:	81 70       	andi	r24, 0x01	; 1
    1440:	90 70       	andi	r25, 0x00	; 0
    1442:	88 23       	and	r24, r24
    1444:	19 f0       	breq	.+6      	; 0x144c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	31 c0       	rjmp	.+98     	; 0x14ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	2f c0       	rjmp	.+94     	; 0x14ae <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1450:	e3 e3       	ldi	r30, 0x33	; 51
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_readPin+0xde>
    1464:	55 95       	asr	r21
    1466:	47 95       	ror	r20
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_readPin+0xda>
    146c:	ca 01       	movw	r24, r20
    146e:	81 70       	andi	r24, 0x01	; 1
    1470:	90 70       	andi	r25, 0x00	; 0
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	19 c0       	rjmp	.+50     	; 0x14ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	17 c0       	rjmp	.+46     	; 0x14ae <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1480:	e0 e3       	ldi	r30, 0x30	; 48
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_readPin+0x10e>
    1494:	55 95       	asr	r21
    1496:	47 95       	ror	r20
    1498:	8a 95       	dec	r24
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_readPin+0x10a>
    149c:	ca 01       	movw	r24, r20
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ac:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <GPIO_setupPortDirection+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <GPIO_setupPortDirection+0x8>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	90 f5       	brcc	.+100    	; 0x153a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3c 83       	std	Y+4, r19	; 0x04
    14de:	2b 83       	std	Y+3, r18	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	d1 f0       	breq	.+52     	; 0x151e <GPIO_setupPortDirection+0x5e>
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <GPIO_setupPortDirection+0x3e>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <GPIO_setupPortDirection+0x54>
    14fc:	1e c0       	rjmp	.+60     	; 0x153a <GPIO_setupPortDirection+0x7a>
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <GPIO_setupPortDirection+0x68>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <GPIO_setupPortDirection+0x72>
    1512:	13 c0       	rjmp	.+38     	; 0x153a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1514:	ea e3       	ldi	r30, 0x3A	; 58
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	0e c0       	rjmp	.+28     	; 0x153a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	09 c0       	rjmp	.+18     	; 0x153a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
    1530:	04 c0       	rjmp	.+8      	; 0x153a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 83       	st	Z, r24
			break;
		}
	}
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <GPIO_writePort+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <GPIO_writePort+0x8>
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	90 f5       	brcc	.+100    	; 0x15c2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3c 83       	std	Y+4, r19	; 0x04
    1566:	2b 83       	std	Y+3, r18	; 0x03
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	d1 f0       	breq	.+52     	; 0x15a6 <GPIO_writePort+0x5e>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	2c f4       	brge	.+10     	; 0x1586 <GPIO_writePort+0x3e>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 f0       	breq	.+24     	; 0x159c <GPIO_writePort+0x54>
    1584:	1e c0       	rjmp	.+60     	; 0x15c2 <GPIO_writePort+0x7a>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <GPIO_writePort+0x68>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	91 05       	cpc	r25, r1
    1598:	81 f0       	breq	.+32     	; 0x15ba <GPIO_writePort+0x72>
    159a:	13 c0       	rjmp	.+38     	; 0x15c2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	80 83       	st	Z, r24
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15a6:	e8 e3       	ldi	r30, 0x38	; 56
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15b0:	e5 e3       	ldi	r30, 0x35	; 53
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <GPIO_readPort+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <GPIO_readPort+0x8>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15de:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	90 f5       	brcc	.+100    	; 0x164a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3c 83       	std	Y+4, r19	; 0x04
    15ee:	2b 83       	std	Y+3, r18	; 0x03
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	d1 f0       	breq	.+52     	; 0x162e <GPIO_readPort+0x5e>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <GPIO_readPort+0x3e>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	61 f0       	breq	.+24     	; 0x1624 <GPIO_readPort+0x54>
    160c:	1e c0       	rjmp	.+60     	; 0x164a <GPIO_readPort+0x7a>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <GPIO_readPort+0x68>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	81 f0       	breq	.+32     	; 0x1642 <GPIO_readPort+0x72>
    1622:	13 c0       	rjmp	.+38     	; 0x164a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1624:	e9 e3       	ldi	r30, 0x39	; 57
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	0e c0       	rjmp	.+28     	; 0x164a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    162e:	e6 e3       	ldi	r30, 0x36	; 54
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	09 c0       	rjmp	.+18     	; 0x164a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1638:	e3 e3       	ldi	r30, 0x33	; 51
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	04 c0       	rjmp	.+8      	; 0x164a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1642:	e0 e3       	ldi	r30, 0x30	; 48
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <Init_Function>:
 *                      Functions  Definitions                                 *
 *******************************************************************************/

/* Function to initialize HMI components */
void Init_Function (void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2c 97       	sbiw	r28, 0x0c	; 12
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
	/* UART configuration structure */
	UART_ConfigType uart = {EVEN_PARITY, ONE_STOP_BIT, EIGHT_BIT, 9600};
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	99 87       	std	Y+9, r25	; 0x09
    1674:	88 87       	std	Y+8, r24	; 0x08
    1676:	ee e5       	ldi	r30, 0x5E	; 94
    1678:	f2 e0       	ldi	r31, 0x02	; 2
    167a:	fb 87       	std	Y+11, r31	; 0x0b
    167c:	ea 87       	std	Y+10, r30	; 0x0a
    167e:	f7 e0       	ldi	r31, 0x07	; 7
    1680:	fc 87       	std	Y+12, r31	; 0x0c
    1682:	ea 85       	ldd	r30, Y+10	; 0x0a
    1684:	fb 85       	ldd	r31, Y+11	; 0x0b
    1686:	00 80       	ld	r0, Z
    1688:	8a 85       	ldd	r24, Y+10	; 0x0a
    168a:	9b 85       	ldd	r25, Y+11	; 0x0b
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	9b 87       	std	Y+11, r25	; 0x0b
    1690:	8a 87       	std	Y+10, r24	; 0x0a
    1692:	e8 85       	ldd	r30, Y+8	; 0x08
    1694:	f9 85       	ldd	r31, Y+9	; 0x09
    1696:	00 82       	st	Z, r0
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	99 87       	std	Y+9, r25	; 0x09
    16a0:	88 87       	std	Y+8, r24	; 0x08
    16a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a4:	91 50       	subi	r25, 0x01	; 1
    16a6:	9c 87       	std	Y+12, r25	; 0x0c
    16a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16aa:	ee 23       	and	r30, r30
    16ac:	51 f7       	brne	.-44     	; 0x1682 <Init_Function+0x28>

	/* Initialize UART, LCD, and Timer1 with callback function */
	UART_init(&uart);
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_init>
	LCD_init();
    16b6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_init>
	TIMER1_setCallBack(Count_Seconds);
    16ba:	8f e5       	ldi	r24, 0x5F	; 95
    16bc:	9e e0       	ldi	r25, 0x0E	; 14
    16be:	0e 94 84 1a 	call	0x3508	; 0x3508 <TIMER1_setCallBack>

	/* Enable global interrupts */
	SREG |= (1<<7);
    16c2:	af e5       	ldi	r26, 0x5F	; 95
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ef e5       	ldi	r30, 0x5F	; 95
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	8c 93       	st	X, r24
}
    16d0:	2c 96       	adiw	r28, 0x0c	; 12
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <Take_firstPassword>:

/* Function to take the first password input from the user */
void Take_firstPassword (void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	60 97       	sbiw	r28, 0x10	; 16
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
	/* Local variables for keypad input and loop control */
	uint8 number, i;

	/* Clear the LCD and prompt for password input */
	LCD_clearScreen();
    16f6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    16fa:	84 ed       	ldi	r24, 0xD4	; 212
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	LCD_moveCursor(1,5);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	65 e0       	ldi	r22, 0x05	; 5
    1706:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <LCD_moveCursor>

	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
    170a:	1f 86       	std	Y+15, r1	; 0x0f
    170c:	8a c0       	rjmp	.+276    	; 0x1822 <Take_firstPassword+0x140>
	{
		/* Get a single digit and validate it */
		number = KEYPAD_getPressedKey();
    170e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    1712:	88 8b       	std	Y+16, r24	; 0x10
    1714:	03 c0       	rjmp	.+6      	; 0x171c <Take_firstPassword+0x3a>
		while(number > 9 )
		{
			number = KEYPAD_getPressedKey();
    1716:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    171a:	88 8b       	std	Y+16, r24	; 0x10
	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
	{
		/* Get a single digit and validate it */
		number = KEYPAD_getPressedKey();
		while(number > 9 )
    171c:	88 89       	ldd	r24, Y+16	; 0x10
    171e:	8a 30       	cpi	r24, 0x0A	; 10
    1720:	d0 f7       	brcc	.-12     	; 0x1716 <Take_firstPassword+0x34>
		{
			number = KEYPAD_getPressedKey();
		}
		/* Store the digit and display an asterisk */
		g_firstPass[i] = number;
    1722:	8f 85       	ldd	r24, Y+15	; 0x0f
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	e4 59       	subi	r30, 0x94	; 148
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	88 89       	ldd	r24, Y+16	; 0x10
    1730:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1732:	8a e2       	ldi	r24, 0x2A	; 42
    1734:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_displayCharacter>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	aa ef       	ldi	r26, 0xFA	; 250
    173e:	b3 e4       	ldi	r27, 0x43	; 67
    1740:	8b 87       	std	Y+11, r24	; 0x0b
    1742:	9c 87       	std	Y+12, r25	; 0x0c
    1744:	ad 87       	std	Y+13, r26	; 0x0d
    1746:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1748:	6b 85       	ldd	r22, Y+11	; 0x0b
    174a:	7c 85       	ldd	r23, Y+12	; 0x0c
    174c:	8d 85       	ldd	r24, Y+13	; 0x0d
    174e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a ef       	ldi	r20, 0xFA	; 250
    1756:	54 e4       	ldi	r21, 0x44	; 68
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	8f 83       	std	Y+7, r24	; 0x07
    1762:	98 87       	std	Y+8, r25	; 0x08
    1764:	a9 87       	std	Y+9, r26	; 0x09
    1766:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177c:	88 23       	and	r24, r24
    177e:	2c f4       	brge	.+10     	; 0x178a <Take_firstPassword+0xa8>
		__ticks = 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	3f c0       	rjmp	.+126    	; 0x1808 <Take_firstPassword+0x126>
	else if (__tmp > 65535)
    178a:	6f 81       	ldd	r22, Y+7	; 0x07
    178c:	78 85       	ldd	r23, Y+8	; 0x08
    178e:	89 85       	ldd	r24, Y+9	; 0x09
    1790:	9a 85       	ldd	r25, Y+10	; 0x0a
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	3f ef       	ldi	r19, 0xFF	; 255
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	57 e4       	ldi	r21, 0x47	; 71
    179a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	4c f5       	brge	.+82     	; 0x17f4 <Take_firstPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e2       	ldi	r20, 0x20	; 32
    17b0:	51 e4       	ldi	r21, 0x41	; 65
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <Take_firstPassword+0x108>
    17cc:	88 ec       	ldi	r24, 0xC8	; 200
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <Take_firstPassword+0xf6>
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	69 f7       	brne	.-38     	; 0x17cc <Take_firstPassword+0xea>
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <Take_firstPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f4:	6f 81       	ldd	r22, Y+7	; 0x07
    17f6:	78 85       	ldd	r23, Y+8	; 0x08
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <Take_firstPassword+0x132>
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,5);

	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
    181c:	8f 85       	ldd	r24, Y+15	; 0x0f
    181e:	8f 5f       	subi	r24, 0xFF	; 255
    1820:	8f 87       	std	Y+15, r24	; 0x0f
    1822:	8f 85       	ldd	r24, Y+15	; 0x0f
    1824:	85 30       	cpi	r24, 0x05	; 5
    1826:	08 f4       	brcc	.+2      	; 0x182a <Take_firstPassword+0x148>
    1828:	72 cf       	rjmp	.-284    	; 0x170e <Take_firstPassword+0x2c>
		/* Store the digit and display an asterisk */
		g_firstPass[i] = number;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
}
    182a:	60 96       	adiw	r28, 0x10	; 16
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <Take_secondPassword>:

/* Function to take the second password input for confirmation */
void Take_secondPassword (void)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	60 97       	sbiw	r28, 0x10	; 16
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
	/* Local variables for keypad input and loop control */
	uint8 number, i;

	/* Clear the LCD and prompt for password re-entry */
	LCD_clearScreen();
    1850:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
    1854:	84 ee       	ldi	r24, 0xE4	; 228
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	LCD_displaySringRowColumn("same pass:", 1, 0);
    185c:	85 ef       	ldi	r24, 0xF5	; 245
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>

	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
    1868:	1f 86       	std	Y+15, r1	; 0x0f
    186a:	8a c0       	rjmp	.+276    	; 0x1980 <Take_secondPassword+0x144>
	{
		/* Get a single digit and validate it */
		number = KEYPAD_getPressedKey();
    186c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    1870:	88 8b       	std	Y+16, r24	; 0x10
    1872:	03 c0       	rjmp	.+6      	; 0x187a <Take_secondPassword+0x3e>
		while(number > 9 )
		{
			number = KEYPAD_getPressedKey();
    1874:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    1878:	88 8b       	std	Y+16, r24	; 0x10
	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
	{
		/* Get a single digit and validate it */
		number = KEYPAD_getPressedKey();
		while(number > 9 )
    187a:	88 89       	ldd	r24, Y+16	; 0x10
    187c:	8a 30       	cpi	r24, 0x0A	; 10
    187e:	d0 f7       	brcc	.-12     	; 0x1874 <Take_secondPassword+0x38>
		{
			number = KEYPAD_getPressedKey();
		}
		/* Store the digit and display an asterisk */
		g_secondPass[i] = number;
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fc 01       	movw	r30, r24
    1888:	ef 58       	subi	r30, 0x8F	; 143
    188a:	fd 4f       	sbci	r31, 0xFD	; 253
    188c:	88 89       	ldd	r24, Y+16	; 0x10
    188e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1890:	8a e2       	ldi	r24, 0x2A	; 42
    1892:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_displayCharacter>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	aa ef       	ldi	r26, 0xFA	; 250
    189c:	b3 e4       	ldi	r27, 0x43	; 67
    189e:	8b 87       	std	Y+11, r24	; 0x0b
    18a0:	9c 87       	std	Y+12, r25	; 0x0c
    18a2:	ad 87       	std	Y+13, r26	; 0x0d
    18a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8f 83       	std	Y+7, r24	; 0x07
    18c0:	98 87       	std	Y+8, r25	; 0x08
    18c2:	a9 87       	std	Y+9, r26	; 0x09
    18c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c6:	6f 81       	ldd	r22, Y+7	; 0x07
    18c8:	78 85       	ldd	r23, Y+8	; 0x08
    18ca:	89 85       	ldd	r24, Y+9	; 0x09
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18da:	88 23       	and	r24, r24
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <Take_secondPassword+0xac>
		__ticks = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	3f c0       	rjmp	.+126    	; 0x1966 <Take_secondPassword+0x12a>
	else if (__tmp > 65535)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	4c f5       	brge	.+82     	; 0x1952 <Take_secondPassword+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <Take_secondPassword+0x10c>
    192a:	88 ec       	ldi	r24, 0xC8	; 200
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9c 83       	std	Y+4, r25	; 0x04
    1930:	8b 83       	std	Y+3, r24	; 0x03
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <Take_secondPassword+0xfa>
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	69 f7       	brne	.-38     	; 0x192a <Take_secondPassword+0xee>
    1950:	14 c0       	rjmp	.+40     	; 0x197a <Take_secondPassword+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <Take_secondPassword+0x136>
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("plz re-enter the");
	LCD_displaySringRowColumn("same pass:", 1, 0);

	/* Loop to read PASSWORD_SIZE digits from the keypad */
	for (i = 0; i < PASSWORD_SIZE; i++)
    197a:	8f 85       	ldd	r24, Y+15	; 0x0f
    197c:	8f 5f       	subi	r24, 0xFF	; 255
    197e:	8f 87       	std	Y+15, r24	; 0x0f
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	85 30       	cpi	r24, 0x05	; 5
    1984:	08 f4       	brcc	.+2      	; 0x1988 <Take_secondPassword+0x14c>
    1986:	72 cf       	rjmp	.-284    	; 0x186c <Take_secondPassword+0x30>
		/* Store the digit and display an asterisk */
		g_secondPass[i] = number;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
}
    1988:	60 96       	adiw	r28, 0x10	; 16
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <send_Password>:

/* Function to send both entered passwords to the control ECU */
void send_Password(void)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	/* Wait for control ECU to be ready, then send first password */
	while(UART_recieveByte() != READY_TO_RECEVIE);
    19a2:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    19a6:	8f 3f       	cpi	r24, 0xFF	; 255
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <send_Password+0x8>
	UART_sendData(g_firstPass, PASSWORD_SIZE);
    19aa:	8c e6       	ldi	r24, 0x6C	; 108
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	0e 94 b8 1b 	call	0x3770	; 0x3770 <UART_sendData>

	/* Wait for control ECU to be ready, then send second password */
	while(UART_recieveByte() != READY_TO_RECEVIE);
    19b4:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    19b8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <send_Password+0x1a>
	UART_sendData(g_secondPass, PASSWORD_SIZE);
    19bc:	81 e7       	ldi	r24, 0x71	; 113
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	65 e0       	ldi	r22, 0x05	; 5
    19c2:	0e 94 b8 1b 	call	0x3770	; 0x3770 <UART_sendData>
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <receive_command>:

/* Function to receive a command from the control ECU */
uint8 receive_command(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	0f 92       	push	r0
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	/* Local variable to store the received command */
	uint8 response;

	/* Send ready signal and receive a command */
	UART_sendByte(READY_TO_RECEVIE);
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <UART_sendByte>
	response = UART_recieveByte();
    19dc:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    19e0:	89 83       	std	Y+1, r24	; 0x01
	return response;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <send_command>:

/* Function to send a command to the control ECU */
void send_command(uint8 command)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for control ECU to be ready, then send the command */
	while(UART_recieveByte() != READY_TO_RECEVIE);
    19f8:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    19fc:	8f 3f       	cpi	r24, 0xFF	; 255
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <send_command+0xc>
	UART_sendByte(command);
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	0e 94 2a 1b 	call	0x3654	; 0x3654 <UART_sendByte>
}
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <Main_Menu>:

/* Function to display the main menu and handle user selection */
void Main_Menu (void)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
	/* Local variable to store the user's menu selection */
	uint8 option;

	/* Clear the LCD and display menu options */
	LCD_clearScreen();
    1a22:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	LCD_displaySringRowColumn("- : Change Pass", 1, 0);
    1a2e:	8e e0       	ldi	r24, 0x0E	; 14
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>

	/* Get the user's selection and validate it */
	option = KEYPAD_getPressedKey();
    1a3a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	aa ef       	ldi	r26, 0xFA	; 250
    1a46:	b3 e4       	ldi	r27, 0x43	; 67
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
    1a4a:	9c 87       	std	Y+12, r25	; 0x0c
    1a4c:	ad 87       	std	Y+13, r26	; 0x0d
    1a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a ef       	ldi	r20, 0xFA	; 250
    1a5e:	54 e4       	ldi	r21, 0x44	; 68
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8f 83       	std	Y+7, r24	; 0x07
    1a6a:	98 87       	std	Y+8, r25	; 0x08
    1a6c:	a9 87       	std	Y+9, r26	; 0x09
    1a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <Main_Menu+0x84>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <Main_Menu+0x102>
	else if (__tmp > 65535)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <Main_Menu+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <Main_Menu+0xe4>
    1ad4:	88 ec       	ldi	r24, 0xC8	; 200
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <Main_Menu+0xd2>
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <Main_Menu+0xc6>
    1afa:	18 c0       	rjmp	.+48     	; 0x1b2c <Main_Menu+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <Main_Menu+0x10e>
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <Main_Menu+0x11e>
	_delay_ms(500);
	while (option != '+' && option != '-')
	{
		option = KEYPAD_getPressedKey();
    1b26:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <KEYPAD_getPressedKey>
    1b2a:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displaySringRowColumn("- : Change Pass", 1, 0);

	/* Get the user's selection and validate it */
	option = KEYPAD_getPressedKey();
	_delay_ms(500);
	while (option != '+' && option != '-')
    1b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2e:	8b 32       	cpi	r24, 0x2B	; 43
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <Main_Menu+0x12a>
    1b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b34:	8d 32       	cpi	r24, 0x2D	; 45
    1b36:	b9 f7       	brne	.-18     	; 0x1b26 <Main_Menu+0x118>
	{
		option = KEYPAD_getPressedKey();
	}

	/* Handle the selected option */
	switch (option)
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	39 8b       	std	Y+17, r19	; 0x11
    1b40:	28 8b       	std	Y+16, r18	; 0x10
    1b42:	88 89       	ldd	r24, Y+16	; 0x10
    1b44:	99 89       	ldd	r25, Y+17	; 0x11
    1b46:	8b 32       	cpi	r24, 0x2B	; 43
    1b48:	91 05       	cpc	r25, r1
    1b4a:	31 f0       	breq	.+12     	; 0x1b58 <Main_Menu+0x14a>
    1b4c:	28 89       	ldd	r18, Y+16	; 0x10
    1b4e:	39 89       	ldd	r19, Y+17	; 0x11
    1b50:	2d 32       	cpi	r18, 0x2D	; 45
    1b52:	31 05       	cpc	r19, r1
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <Main_Menu+0x152>
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <Main_Menu+0x158>
	{
		case '+':
			Checking_Password(OPEN_DOOR);
    1b58:	87 e1       	ldi	r24, 0x17	; 23
    1b5a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <Main_Menu+0x158>
			break;
		case '-':
			Checking_Password(CHANGING_PASSWORD);
    1b60:	83 e2       	ldi	r24, 0x23	; 35
    1b62:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Checking_Password>
	}
}
    1b66:	61 96       	adiw	r28, 0x11	; 17
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <Change_Password>:

/* Function to initiate the password change process */
void Change_Password (void)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
	Taking_newPassword();
    1b80:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Taking_newPassword>
}
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Taking_newPassword>:

/* Function to handle new password entry and send it to the control ECU */
void Taking_newPassword (void)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	/* Increment the attempt counter */
	g_attempt++;
    1b92:	80 91 76 02 	lds	r24, 0x0276
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	80 93 76 02 	sts	0x0276, r24

	/* If maximum attempts reached, trigger the alarm and reset */
	if (g_attempt == 5)
    1b9c:	80 91 76 02 	lds	r24, 0x0276
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	71 f4       	brne	.+28     	; 0x1bc0 <Taking_newPassword+0x36>
	{
		Alarm();
    1ba4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Alarm>
		g_attempt = ZERO_ATTEMPTS;
    1ba8:	10 92 76 02 	sts	0x0276, r1
		Take_firstPassword();
    1bac:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Take_firstPassword>
		Take_secondPassword();
    1bb0:	0e 94 1e 0c 	call	0x183c	; 0x183c <Take_secondPassword>
		send_command(SENDING_PASSWORDS);
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <send_command>
		send_Password();
    1bba:	0e 94 cd 0c 	call	0x199a	; 0x199a <send_Password>
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <Taking_newPassword+0x48>
	}
	else
	{
		/* Otherwise, take new password entries and send them */
		Take_firstPassword();
    1bc0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Take_firstPassword>
		Take_secondPassword();
    1bc4:	0e 94 1e 0c 	call	0x183c	; 0x183c <Take_secondPassword>
		send_command(SENDING_PASSWORDS);
    1bc8:	89 e1       	ldi	r24, 0x19	; 25
    1bca:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <send_command>
		send_Password();
    1bce:	0e 94 cd 0c 	call	0x199a	; 0x199a <send_Password>
	}
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <Checking_Password>:

/* Function to check the entered password based on the given command */
void Checking_Password(uint8 command)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Checking_Password+0x6>
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	89 83       	std	Y+1, r24	; 0x01
	/* Increment the attempt counter */
	g_attempt++;
    1be6:	80 91 76 02 	lds	r24, 0x0276
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	80 93 76 02 	sts	0x0276, r24

	/* If maximum attempts reached, trigger the alarm and return to main menu */
	if (g_attempt == 5)
    1bf0:	80 91 76 02 	lds	r24, 0x0276
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	39 f4       	brne	.+14     	; 0x1c06 <Checking_Password+0x2e>
	{
		Alarm();
    1bf8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Alarm>
		g_attempt = ZERO_ATTEMPTS;
    1bfc:	10 92 76 02 	sts	0x0276, r1
		Main_Menu();
    1c00:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Main_Menu>
    1c04:	22 c0       	rjmp	.+68     	; 0x1c4a <Checking_Password+0x72>
	}
	else
	{
		/* Otherwise, take the password and send the command for verification */
		Take_firstPassword();
    1c06:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Take_firstPassword>

		/* Send the appropriate command based on the action to be taken */
		switch(command)
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3b 83       	std	Y+3, r19	; 0x03
    1c12:	2a 83       	std	Y+2, r18	; 0x02
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	87 31       	cpi	r24, 0x17	; 23
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <Checking_Password+0x52>
    1c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c20:	3b 81       	ldd	r19, Y+3	; 0x03
    1c22:	23 32       	cpi	r18, 0x23	; 35
    1c24:	31 05       	cpc	r19, r1
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <Checking_Password+0x5a>
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <Checking_Password+0x60>
		{
			case OPEN_DOOR:
				send_command(CHECKING_PASSWORD_OPEN);
    1c2a:	81 e2       	ldi	r24, 0x21	; 33
    1c2c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <send_command>
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <Checking_Password+0x60>
				break;
			case CHANGING_PASSWORD:
				send_command(CHECKING_PASSWORD_CHANGE);
    1c32:	82 e2       	ldi	r24, 0x22	; 34
    1c34:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <send_command>
				break;
		}
		/* Wait for control ECU to be ready, then send the entered password */
		while(UART_recieveByte() != READY_TO_RECEVIE);
    1c38:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    1c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3e:	e1 f7       	brne	.-8      	; 0x1c38 <Checking_Password+0x60>
		UART_sendData(g_firstPass, PASSWORD_SIZE);
    1c40:	8c e6       	ldi	r24, 0x6C	; 108
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	65 e0       	ldi	r22, 0x05	; 5
    1c46:	0e 94 b8 1b 	call	0x3770	; 0x3770 <UART_sendData>
	}
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <Open_Door>:

/* Function to simulate the door opening process */
void Open_Door(void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	/* Clear the LCD and display the door opening message */
	LCD_clearScreen();
    1c5e:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("OPNING THE DOOR");
    1c62:	8e e1       	ldi	r24, 0x1E	; 30
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	Timer1_countSeconds(FIFTEEN_SECONDS);
    1c6a:	8f e0       	ldi	r24, 0x0F	; 15
    1c6c:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>

	/* Display the door holding message */
	LCD_clearScreen();
    1c70:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("HOLDING THE DOOR");
    1c74:	8e e2       	ldi	r24, 0x2E	; 46
    1c76:	91 e0       	ldi	r25, 0x01	; 1
    1c78:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	Timer1_countSeconds(THREE_SECONDS);
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>

	/* Display the door closing message */
	LCD_clearScreen();
    1c82:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displayString("CLOSING THE DOOR");
    1c86:	8f e3       	ldi	r24, 0x3F	; 63
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
	Timer1_countSeconds(FIFTEEN_SECONDS);
    1c8e:	8f e0       	ldi	r24, 0x0F	; 15
    1c90:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <Alarm>:

/* Function to trigger the alarm and display an error message */
void Alarm(void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
	/* Clear the LCD and display the error message */
	LCD_clearScreen();
    1ca2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_clearScreen>
	LCD_displaySringRowColumn("ERROR", 0, 5);
    1ca6:	80 e5       	ldi	r24, 0x50	; 80
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	45 e0       	ldi	r20, 0x05	; 5
    1cae:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_displaySringRowColumn>
	Timer1_countSeconds(ONE_MINUTE);
    1cb2:	8c e3       	ldi	r24, 0x3C	; 60
    1cb4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer1_countSeconds>
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <Count_Seconds>:

/* Callback function to count seconds using Timer1 */
void Count_Seconds(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	/* Increment the seconds counter */
	g_seconds++;
    1cc6:	80 91 77 02 	lds	r24, 0x0277
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	80 93 77 02 	sts	0x0277, r24
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <Timer1_countSeconds>:

/* Function to count a specified number of seconds using Timer1 */
void Timer1_countSeconds(uint8 seconds)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	2c 97       	sbiw	r28, 0x0c	; 12
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	8f 83       	std	Y+7, r24	; 0x07
	/* Timer1 configuration structure */
	TIMER1_ConfigType count_sec = {COMPARE_MODE, F_CPU_256, 0, ONE_SECOND};
    1cec:	ce 01       	movw	r24, r28
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	99 87       	std	Y+9, r25	; 0x09
    1cf2:	88 87       	std	Y+8, r24	; 0x08
    1cf4:	e5 e6       	ldi	r30, 0x65	; 101
    1cf6:	f2 e0       	ldi	r31, 0x02	; 2
    1cf8:	fb 87       	std	Y+11, r31	; 0x0b
    1cfa:	ea 87       	std	Y+10, r30	; 0x0a
    1cfc:	f6 e0       	ldi	r31, 0x06	; 6
    1cfe:	fc 87       	std	Y+12, r31	; 0x0c
    1d00:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d02:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d04:	00 80       	ld	r0, Z
    1d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	9b 87       	std	Y+11, r25	; 0x0b
    1d0e:	8a 87       	std	Y+10, r24	; 0x0a
    1d10:	e8 85       	ldd	r30, Y+8	; 0x08
    1d12:	f9 85       	ldd	r31, Y+9	; 0x09
    1d14:	00 82       	st	Z, r0
    1d16:	88 85       	ldd	r24, Y+8	; 0x08
    1d18:	99 85       	ldd	r25, Y+9	; 0x09
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	99 87       	std	Y+9, r25	; 0x09
    1d1e:	88 87       	std	Y+8, r24	; 0x08
    1d20:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d22:	91 50       	subi	r25, 0x01	; 1
    1d24:	9c 87       	std	Y+12, r25	; 0x0c
    1d26:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d28:	ee 23       	and	r30, r30
    1d2a:	51 f7       	brne	.-44     	; 0x1d00 <Timer1_countSeconds+0x2a>

	/* Initialize Timer1 with the specified configuration */
	TIMER1_init(&count_sec);
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	0e 94 0b 1a 	call	0x3416	; 0x3416 <TIMER1_init>

	/* Wait until the specified number of seconds has passed */
	while(g_seconds != seconds);
    1d34:	90 91 77 02 	lds	r25, 0x0277
    1d38:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3a:	98 17       	cp	r25, r24
    1d3c:	d9 f7       	brne	.-10     	; 0x1d34 <Timer1_countSeconds+0x5e>

	/* Reset the seconds counter and deinitialize Timer1 */
	g_seconds = ZERO_SECONDS;
    1d3e:	10 92 77 02 	sts	0x0277, r1
	TIMER1_deinit();
    1d42:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <TIMER1_deinit>
}
    1d46:	2c 96       	adiw	r28, 0x0c	; 12
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <KEYPAD_getPressedKey>:
 * ----------------------------
 *   Retrieves the pressed key on the keypad
 *   returns: the pressed key
 */
uint8 KEYPAD_getPressedKey(void)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	60 97       	sbiw	r28, 0x10	; 16
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
	uint8 row, column;

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1d6c:	18 8a       	std	Y+16, r1	; 0x10
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <KEYPAD_getPressedKey+0x28>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	68 89       	ldd	r22, Y+16	; 0x10
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 row, column;

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1d7a:	88 89       	ldd	r24, Y+16	; 0x10
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	88 8b       	std	Y+16, r24	; 0x10
    1d80:	88 89       	ldd	r24, Y+16	; 0x10
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	a8 f3       	brcs	.-22     	; 0x1d70 <KEYPAD_getPressedKey+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);

	for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1d86:	1f 86       	std	Y+15, r1	; 0x0f
    1d88:	0b c0       	rjmp	.+22     	; 0x1da0 <KEYPAD_getPressedKey+0x48>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9c 5f       	subi	r25, 0xFC	; 252
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	69 2f       	mov	r22, r25
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);

	for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	8f 5f       	subi	r24, 0xFF	; 255
    1d9e:	8f 87       	std	Y+15, r24	; 0x0f
    1da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	90 f3       	brcs	.-28     	; 0x1d8a <KEYPAD_getPressedKey+0x32>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);

	while (1)
	{
		/* loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1da6:	18 8a       	std	Y+16, r1	; 0x10
    1da8:	ab c0       	rjmp	.+342    	; 0x1f00 <KEYPAD_getPressedKey+0x1a8>
		{
			/* Set the current row pin as output */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	68 89       	ldd	r22, Y+16	; 0x10
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	68 89       	ldd	r22, Y+16	; 0x10
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>

			/* loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1dbe:	1f 86       	std	Y+15, r1	; 0x0f
    1dc0:	22 c0       	rjmp	.+68     	; 0x1e06 <KEYPAD_getPressedKey+0xae>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column) == KEYPAD_BUTTON_PRESSED)
    1dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	9c 5f       	subi	r25, 0xFC	; 252
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	69 2f       	mov	r22, r25
    1dcc:	0e 94 c5 09 	call	0x138a	; 0x138a <GPIO_readPin>
    1dd0:	88 23       	and	r24, r24
    1dd2:	b1 f4       	brne	.+44     	; 0x1e00 <KEYPAD_getPressedKey+0xa8>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row * KEYPAD_NUM_COLS) + column +1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row *KEYPAD_NUM_COLS) + column + 1);
    1dd4:	88 89       	ldd	r24, Y+16	; 0x10
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	98 2f       	mov	r25, r24
    1de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de6:	89 0f       	add	r24, r25
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber>
			/* Restore row pins as inputs */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    1dee:	60 96       	adiw	r28, 0x10	; 16
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			/* loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	8f 87       	std	Y+15, r24	; 0x0f
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	d8 f2       	brcs	.-74     	; 0x1dc2 <KEYPAD_getPressedKey+0x6a>
						#endif
					#endif
				}
			}
			/* Restore row pins as inputs */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	68 89       	ldd	r22, Y+16	; 0x10
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1e1c:	b0 e4       	ldi	r27, 0x40	; 64
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <KEYPAD_getPressedKey+0x110>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <KEYPAD_getPressedKey+0x18e>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <KEYPAD_getPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <KEYPAD_getPressedKey+0x170>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <KEYPAD_getPressedKey+0x15e>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <KEYPAD_getPressedKey+0x152>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <KEYPAD_getPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <KEYPAD_getPressedKey+0x19a>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);

	while (1)
	{
		/* loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	8f 5f       	subi	r24, 0xFF	; 255
    1efe:	88 8b       	std	Y+16, r24	; 0x10
    1f00:	88 89       	ldd	r24, Y+16	; 0x10
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <KEYPAD_getPressedKey+0x1b0>
    1f06:	51 cf       	rjmp	.-350    	; 0x1daa <KEYPAD_getPressedKey+0x52>
    1f08:	4e cf       	rjmp	.-356    	; 0x1da6 <KEYPAD_getPressedKey+0x4e>

00001f0a <KEYPAD_4x4_adjustKeyNumber>:
 *   Adjusts the keypad pressed button value for a 4x4 keypad
 *   button_number: the button number pressed on the keypad
 *   returns: the adjusted key value
 */
static uint8 KEYPAD_4x4_adjustKeyNumber (uint8 button_number)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key = 0;
    1f18:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3c 83       	std	Y+4, r19	; 0x04
    1f22:	2b 83       	std	Y+3, r18	; 0x03
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f2e:	70 c0       	rjmp	.+224    	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	29 30       	cpi	r18, 0x09	; 9
    1f36:	31 05       	cpc	r19, r1
    1f38:	5c f5       	brge	.+86     	; 0x1f90 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	84 30       	cpi	r24, 0x04	; 4
    1f40:	91 05       	cpc	r25, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f44:	59 c0       	rjmp	.+178    	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	25 30       	cpi	r18, 0x05	; 5
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	9c f4       	brge	.+38     	; 0x1f76 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	91 05       	cpc	r25, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f5a:	48 c0       	rjmp	.+144    	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f60:	23 30       	cpi	r18, 0x03	; 3
    1f62:	31 05       	cpc	r19, r1
    1f64:	0c f0       	brlt	.+2      	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f66:	45 c0       	rjmp	.+138    	; 0x1ff2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f72:	39 c0       	rjmp	.+114    	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f74:	67 c0       	rjmp	.+206    	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f76:	2b 81       	ldd	r18, Y+3	; 0x03
    1f78:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7a:	26 30       	cpi	r18, 0x06	; 6
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f80:	41 c0       	rjmp	.+130    	; 0x2004 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	87 30       	cpi	r24, 0x07	; 7
    1f88:	91 05       	cpc	r25, r1
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f8c:	3e c0       	rjmp	.+124    	; 0x200a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f8e:	37 c0       	rjmp	.+110    	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f90:	2b 81       	ldd	r18, Y+3	; 0x03
    1f92:	3c 81       	ldd	r19, Y+4	; 0x04
    1f94:	2c 30       	cpi	r18, 0x0C	; 12
    1f96:	31 05       	cpc	r19, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f9a:	46 c0       	rjmp	.+140    	; 0x2028 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	8d 30       	cpi	r24, 0x0D	; 13
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	5c f4       	brge	.+22     	; 0x1fbc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	2a 30       	cpi	r18, 0x0A	; 10
    1fac:	31 05       	cpc	r19, r1
    1fae:	b1 f1       	breq	.+108    	; 0x201c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	8b 30       	cpi	r24, 0x0B	; 11
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a4 f5       	brge	.+104    	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fba:	2d c0       	rjmp	.+90     	; 0x2016 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc0:	2e 30       	cpi	r18, 0x0E	; 14
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	b9 f1       	breq	.+110    	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	8e 30       	cpi	r24, 0x0E	; 14
    1fcc:	91 05       	cpc	r25, r1
    1fce:	7c f1       	brlt	.+94     	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd4:	2f 30       	cpi	r18, 0x0F	; 15
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	79 f1       	breq	.+94     	; 0x2038 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	80 31       	cpi	r24, 0x10	; 16
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	69 f1       	breq	.+90     	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fe4:	2f c0       	rjmp	.+94     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1 : key = 7;
    1fe6:	87 e0       	ldi	r24, 0x07	; 7
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	2e c0       	rjmp	.+92     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 2 : key = 8;
    1fec:	88 e0       	ldi	r24, 0x08	; 8
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	2b c0       	rjmp	.+86     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 3 : key = 9;
    1ff2:	89 e0       	ldi	r24, 0x09	; 9
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	28 c0       	rjmp	.+80     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 4 : key = '/';
    1ff8:	8f e2       	ldi	r24, 0x2F	; 47
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	25 c0       	rjmp	.+74     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 5 : key = 4;
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	22 c0       	rjmp	.+68     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 6 : key = 5;
    2004:	85 e0       	ldi	r24, 0x05	; 5
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	1f c0       	rjmp	.+62     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 7 : key = 6;
    200a:	86 e0       	ldi	r24, 0x06	; 6
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	1c c0       	rjmp	.+56     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 8 : key = '*';
    2010:	8a e2       	ldi	r24, 0x2A	; 42
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	19 c0       	rjmp	.+50     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 9 : key = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 10: key = 2;
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	13 c0       	rjmp	.+38     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 11: key = 3;
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	10 c0       	rjmp	.+32     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 12: key = '-';
    2028:	8d e2       	ldi	r24, 0x2D	; 45
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	0d c0       	rjmp	.+26     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 13: key = 13;
    202e:	8d e0       	ldi	r24, 0x0D	; 13
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 14: key = 0;
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 15: key = '=';
    2038:	8d e3       	ldi	r24, 0x3D	; 61
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 16: key = '+';
    203e:	8b e2       	ldi	r24, 0x2B	; 43
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		default: key = button_number;
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	}
	return key;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <LCD_SendCommand>:

/*
 * Function to send a command to the LCD
 */
void LCD_SendCommand(uint8 command)
{
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	c1 56       	subi	r28, 0x61	; 97
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	fe 01       	movw	r30, r28
    2074:	ef 59       	subi	r30, 0x9F	; 159
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    2084:	fe 01       	movw	r30, r28
    2086:	e3 5a       	subi	r30, 0xA3	; 163
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e0       	ldi	r26, 0x00	; 0
    2090:	b0 e4       	ldi	r27, 0x40	; 64
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    209a:	8e 01       	movw	r16, r28
    209c:	07 5a       	subi	r16, 0xA7	; 167
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e3 5a       	subi	r30, 0xA3	; 163
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	2b ea       	ldi	r18, 0xAB	; 171
    20b0:	3a ea       	ldi	r19, 0xAA	; 170
    20b2:	4a e2       	ldi	r20, 0x2A	; 42
    20b4:	50 e4       	ldi	r21, 0x40	; 64
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c8:	fe 01       	movw	r30, r28
    20ca:	e7 5a       	subi	r30, 0xA7	; 167
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	34 f4       	brge	.+12     	; 0x20f2 <LCD_SendCommand+0x9a>
		__ticks = 1;
    20e6:	fe 01       	movw	r30, r28
    20e8:	e8 5a       	subi	r30, 0xA8	; 168
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	80 83       	st	Z, r24
    20f0:	e0 c0       	rjmp	.+448    	; 0x22b2 <LCD_SendCommand+0x25a>
	else if (__tmp > 255)
    20f2:	fe 01       	movw	r30, r28
    20f4:	e7 5a       	subi	r30, 0xA7	; 167
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	53 e4       	ldi	r21, 0x43	; 67
    2108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	0c f0       	brlt	.+2      	; 0x2112 <LCD_SendCommand+0xba>
    2110:	c0 c0       	rjmp	.+384    	; 0x2292 <LCD_SendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2112:	fe 01       	movw	r30, r28
    2114:	e3 5a       	subi	r30, 0xA3	; 163
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a e7       	ldi	r20, 0x7A	; 122
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	fe 01       	movw	r30, r28
    2132:	ec 5a       	subi	r30, 0xAC	; 172
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 83       	st	Z, r24
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	a2 83       	std	Z+2, r26	; 0x02
    213c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	8e 01       	movw	r16, r28
    2140:	00 5b       	subi	r16, 0xB0	; 176
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	fe 01       	movw	r30, r28
    2146:	ec 5a       	subi	r30, 0xAC	; 172
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a ef       	ldi	r20, 0xFA	; 250
    2158:	54 e4       	ldi	r21, 0x44	; 68
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	a2 83       	std	Z+2, r26	; 0x02
    216a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    216c:	fe 01       	movw	r30, r28
    216e:	e0 5b       	subi	r30, 0xB0	; 176
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2186:	88 23       	and	r24, r24
    2188:	44 f4       	brge	.+16     	; 0x219a <LCD_SendCommand+0x142>
		__ticks = 1;
    218a:	fe 01       	movw	r30, r28
    218c:	e2 5b       	subi	r30, 0xB2	; 178
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
    2198:	64 c0       	rjmp	.+200    	; 0x2262 <LCD_SendCommand+0x20a>
	else if (__tmp > 65535)
    219a:	fe 01       	movw	r30, r28
    219c:	e0 5b       	subi	r30, 0xB0	; 176
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <LCD_SendCommand+0x162>
    21b8:	43 c0       	rjmp	.+134    	; 0x2240 <LCD_SendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	fe 01       	movw	r30, r28
    21bc:	ec 5a       	subi	r30, 0xAC	; 172
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8e 01       	movw	r16, r28
    21da:	02 5b       	subi	r16, 0xB2	; 178
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	f8 01       	movw	r30, r16
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	1f c0       	rjmp	.+62     	; 0x2230 <LCD_SendCommand+0x1d8>
    21f2:	fe 01       	movw	r30, r28
    21f4:	e4 5b       	subi	r30, 0xB4	; 180
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	fe 01       	movw	r30, r28
    2202:	e4 5b       	subi	r30, 0xB4	; 180
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_SendCommand+0x1b2>
    220e:	fe 01       	movw	r30, r28
    2210:	e4 5b       	subi	r30, 0xB4	; 180
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	de 01       	movw	r26, r28
    221a:	a2 5b       	subi	r26, 0xB2	; 178
    221c:	bf 4f       	sbci	r27, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e2 5b       	subi	r30, 0xB2	; 178
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	11 96       	adiw	r26, 0x01	; 1
    222c:	9c 93       	st	X, r25
    222e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	fe 01       	movw	r30, r28
    2232:	e2 5b       	subi	r30, 0xB2	; 178
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	d1 f6       	brne	.-76     	; 0x21f2 <LCD_SendCommand+0x19a>
    223e:	4b c0       	rjmp	.+150    	; 0x22d6 <LCD_SendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	8e 01       	movw	r16, r28
    2242:	02 5b       	subi	r16, 0xB2	; 178
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e0 5b       	subi	r30, 0xB0	; 176
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	f8 01       	movw	r30, r16
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	de 01       	movw	r26, r28
    2264:	a6 5b       	subi	r26, 0xB6	; 182
    2266:	bf 4f       	sbci	r27, 0xFF	; 255
    2268:	fe 01       	movw	r30, r28
    226a:	e2 5b       	subi	r30, 0xB2	; 178
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	11 96       	adiw	r26, 0x01	; 1
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24
    2278:	fe 01       	movw	r30, r28
    227a:	e6 5b       	subi	r30, 0xB6	; 182
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_SendCommand+0x22a>
    2286:	fe 01       	movw	r30, r28
    2288:	e6 5b       	subi	r30, 0xB6	; 182
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
    2290:	22 c0       	rjmp	.+68     	; 0x22d6 <LCD_SendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2292:	8e 01       	movw	r16, r28
    2294:	08 5a       	subi	r16, 0xA8	; 168
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	fe 01       	movw	r30, r28
    229a:	e7 5a       	subi	r30, 0xA7	; 167
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	de 01       	movw	r26, r28
    22b4:	a7 5b       	subi	r26, 0xB7	; 183
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	e8 5a       	subi	r30, 0xA8	; 168
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22c2:	fe 01       	movw	r30, r28
    22c4:	e7 5b       	subi	r30, 0xB7	; 183
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	8a 95       	dec	r24
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_SendCommand+0x272>
    22ce:	fe 01       	movw	r30, r28
    22d0:	e7 5b       	subi	r30, 0xB7	; 183
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    22e0:	fe 01       	movw	r30, r28
    22e2:	eb 5b       	subi	r30, 0xBB	; 187
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	b0 e4       	ldi	r27, 0x40	; 64
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f6:	8e 01       	movw	r16, r28
    22f8:	0f 5b       	subi	r16, 0xBF	; 191
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	eb 5b       	subi	r30, 0xBB	; 187
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	2b ea       	ldi	r18, 0xAB	; 171
    230c:	3a ea       	ldi	r19, 0xAA	; 170
    230e:	4a e2       	ldi	r20, 0x2A	; 42
    2310:	50 e4       	ldi	r21, 0x40	; 64
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2324:	fe 01       	movw	r30, r28
    2326:	ef 5b       	subi	r30, 0xBF	; 191
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	34 f4       	brge	.+12     	; 0x234e <LCD_SendCommand+0x2f6>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	fe 01       	movw	r30, r28
    2346:	e0 5c       	subi	r30, 0xC0	; 192
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 83       	st	Z, r24
    234c:	9d c0       	rjmp	.+314    	; 0x2488 <LCD_SendCommand+0x430>
	else if (__tmp > 255)
    234e:	fe 01       	movw	r30, r28
    2350:	ef 5b       	subi	r30, 0xBF	; 191
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	53 e4       	ldi	r21, 0x43	; 67
    2364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	0c f0       	brlt	.+2      	; 0x236e <LCD_SendCommand+0x316>
    236c:	7e c0       	rjmp	.+252    	; 0x246a <LCD_SendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    236e:	fe 01       	movw	r30, r28
    2370:	eb 5b       	subi	r30, 0xBB	; 187
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8c af       	std	Y+60, r24	; 0x3c
    238e:	9d af       	std	Y+61, r25	; 0x3d
    2390:	ae af       	std	Y+62, r26	; 0x3e
    2392:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6c ad       	ldd	r22, Y+60	; 0x3c
    2396:	7d ad       	ldd	r23, Y+61	; 0x3d
    2398:	8e ad       	ldd	r24, Y+62	; 0x3e
    239a:	9f ad       	ldd	r25, Y+63	; 0x3f
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	88 af       	std	Y+56, r24	; 0x38
    23ae:	99 af       	std	Y+57, r25	; 0x39
    23b0:	aa af       	std	Y+58, r26	; 0x3a
    23b2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    23b4:	68 ad       	ldd	r22, Y+56	; 0x38
    23b6:	79 ad       	ldd	r23, Y+57	; 0x39
    23b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    23ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_SendCommand+0x37e>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9f ab       	std	Y+55, r25	; 0x37
    23d2:	8e ab       	std	Y+54, r24	; 0x36
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_SendCommand+0x3fc>
	else if (__tmp > 65535)
    23d6:	68 ad       	ldd	r22, Y+56	; 0x38
    23d8:	79 ad       	ldd	r23, Y+57	; 0x39
    23da:	8a ad       	ldd	r24, Y+58	; 0x3a
    23dc:	9b ad       	ldd	r25, Y+59	; 0x3b
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_SendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    23f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9f ab       	std	Y+55, r25	; 0x37
    2414:	8e ab       	std	Y+54, r24	; 0x36
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_SendCommand+0x3de>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9d ab       	std	Y+53, r25	; 0x35
    241e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2420:	8c a9       	ldd	r24, Y+52	; 0x34
    2422:	9d a9       	ldd	r25, Y+53	; 0x35
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_SendCommand+0x3cc>
    2428:	9d ab       	std	Y+53, r25	; 0x35
    242a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8e a9       	ldd	r24, Y+54	; 0x36
    242e:	9f a9       	ldd	r25, Y+55	; 0x37
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9f ab       	std	Y+55, r25	; 0x37
    2434:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8e a9       	ldd	r24, Y+54	; 0x36
    2438:	9f a9       	ldd	r25, Y+55	; 0x37
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_SendCommand+0x3c0>
    243e:	2d c0       	rjmp	.+90     	; 0x249a <LCD_SendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	68 ad       	ldd	r22, Y+56	; 0x38
    2442:	79 ad       	ldd	r23, Y+57	; 0x39
    2444:	8a ad       	ldd	r24, Y+58	; 0x3a
    2446:	9b ad       	ldd	r25, Y+59	; 0x3b
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9f ab       	std	Y+55, r25	; 0x37
    2452:	8e ab       	std	Y+54, r24	; 0x36
    2454:	8e a9       	ldd	r24, Y+54	; 0x36
    2456:	9f a9       	ldd	r25, Y+55	; 0x37
    2458:	9b ab       	std	Y+51, r25	; 0x33
    245a:	8a ab       	std	Y+50, r24	; 0x32
    245c:	8a a9       	ldd	r24, Y+50	; 0x32
    245e:	9b a9       	ldd	r25, Y+51	; 0x33
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_SendCommand+0x408>
    2464:	9b ab       	std	Y+51, r25	; 0x33
    2466:	8a ab       	std	Y+50, r24	; 0x32
    2468:	18 c0       	rjmp	.+48     	; 0x249a <LCD_SendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246a:	fe 01       	movw	r30, r28
    246c:	ef 5b       	subi	r30, 0xBF	; 191
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	fe 01       	movw	r30, r28
    2482:	e0 5c       	subi	r30, 0xC0	; 192
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 83       	st	Z, r24
    2488:	fe 01       	movw	r30, r28
    248a:	e0 5c       	subi	r30, 0xC0	; 192
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2492:	89 a9       	ldd	r24, Y+49	; 0x31
    2494:	8a 95       	dec	r24
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_SendCommand+0x43c>
    2498:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the command accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, command);
    249a:	fe 01       	movw	r30, r28
    249c:	ef 59       	subi	r30, 0x9F	; 159
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	60 81       	ld	r22, Z
    24a4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GPIO_writePort>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e4       	ldi	r27, 0x40	; 64
    24b0:	8d a7       	std	Y+45, r24	; 0x2d
    24b2:	9e a7       	std	Y+46, r25	; 0x2e
    24b4:	af a7       	std	Y+47, r26	; 0x2f
    24b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    24ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    24bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24be:	98 a9       	ldd	r25, Y+48	; 0x30
    24c0:	2b ea       	ldi	r18, 0xAB	; 171
    24c2:	3a ea       	ldi	r19, 0xAA	; 170
    24c4:	4a e2       	ldi	r20, 0x2A	; 42
    24c6:	50 e4       	ldi	r21, 0x40	; 64
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	89 a7       	std	Y+41, r24	; 0x29
    24d2:	9a a7       	std	Y+42, r25	; 0x2a
    24d4:	ab a7       	std	Y+43, r26	; 0x2b
    24d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    24d8:	69 a5       	ldd	r22, Y+41	; 0x29
    24da:	7a a5       	ldd	r23, Y+42	; 0x2a
    24dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24de:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	1c f4       	brge	.+6      	; 0x24f6 <LCD_SendCommand+0x49e>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	88 a7       	std	Y+40, r24	; 0x28
    24f4:	91 c0       	rjmp	.+290    	; 0x2618 <LCD_SendCommand+0x5c0>
	else if (__tmp > 255)
    24f6:	69 a5       	ldd	r22, Y+41	; 0x29
    24f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    24fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	53 e4       	ldi	r21, 0x43	; 67
    2506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	0c f0       	brlt	.+2      	; 0x2510 <LCD_SendCommand+0x4b8>
    250e:	7b c0       	rjmp	.+246    	; 0x2606 <LCD_SendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    2510:	6d a5       	ldd	r22, Y+45	; 0x2d
    2512:	7e a5       	ldd	r23, Y+46	; 0x2e
    2514:	8f a5       	ldd	r24, Y+47	; 0x2f
    2516:	98 a9       	ldd	r25, Y+48	; 0x30
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a e7       	ldi	r20, 0x7A	; 122
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8c a3       	std	Y+36, r24	; 0x24
    252a:	9d a3       	std	Y+37, r25	; 0x25
    252c:	ae a3       	std	Y+38, r26	; 0x26
    252e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	6c a1       	ldd	r22, Y+36	; 0x24
    2532:	7d a1       	ldd	r23, Y+37	; 0x25
    2534:	8e a1       	ldd	r24, Y+38	; 0x26
    2536:	9f a1       	ldd	r25, Y+39	; 0x27
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a ef       	ldi	r20, 0xFA	; 250
    253e:	54 e4       	ldi	r21, 0x44	; 68
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	88 a3       	std	Y+32, r24	; 0x20
    254a:	99 a3       	std	Y+33, r25	; 0x21
    254c:	aa a3       	std	Y+34, r26	; 0x22
    254e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2550:	68 a1       	ldd	r22, Y+32	; 0x20
    2552:	79 a1       	ldd	r23, Y+33	; 0x21
    2554:	8a a1       	ldd	r24, Y+34	; 0x22
    2556:	9b a1       	ldd	r25, Y+35	; 0x23
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	2c f4       	brge	.+10     	; 0x2572 <LCD_SendCommand+0x51a>
		__ticks = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9f 8f       	std	Y+31, r25	; 0x1f
    256e:	8e 8f       	std	Y+30, r24	; 0x1e
    2570:	3f c0       	rjmp	.+126    	; 0x25f0 <LCD_SendCommand+0x598>
	else if (__tmp > 65535)
    2572:	68 a1       	ldd	r22, Y+32	; 0x20
    2574:	79 a1       	ldd	r23, Y+33	; 0x21
    2576:	8a a1       	ldd	r24, Y+34	; 0x22
    2578:	9b a1       	ldd	r25, Y+35	; 0x23
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	4c f5       	brge	.+82     	; 0x25dc <LCD_SendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	6c a1       	ldd	r22, Y+36	; 0x24
    258c:	7d a1       	ldd	r23, Y+37	; 0x25
    258e:	8e a1       	ldd	r24, Y+38	; 0x26
    2590:	9f a1       	ldd	r25, Y+39	; 0x27
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9f 8f       	std	Y+31, r25	; 0x1f
    25b0:	8e 8f       	std	Y+30, r24	; 0x1e
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <LCD_SendCommand+0x57a>
    25b4:	88 ec       	ldi	r24, 0xC8	; 200
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9d 8f       	std	Y+29, r25	; 0x1d
    25ba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_SendCommand+0x568>
    25c4:	9d 8f       	std	Y+29, r25	; 0x1d
    25c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	9f 8f       	std	Y+31, r25	; 0x1f
    25d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <LCD_SendCommand+0x55c>
    25da:	24 c0       	rjmp	.+72     	; 0x2624 <LCD_SendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	68 a1       	ldd	r22, Y+32	; 0x20
    25de:	79 a1       	ldd	r23, Y+33	; 0x21
    25e0:	8a a1       	ldd	r24, Y+34	; 0x22
    25e2:	9b a1       	ldd	r25, Y+35	; 0x23
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9f 8f       	std	Y+31, r25	; 0x1f
    25ee:	8e 8f       	std	Y+30, r24	; 0x1e
    25f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25f4:	9b 8f       	std	Y+27, r25	; 0x1b
    25f6:	8a 8f       	std	Y+26, r24	; 0x1a
    25f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_SendCommand+0x5a4>
    2600:	9b 8f       	std	Y+27, r25	; 0x1b
    2602:	8a 8f       	std	Y+26, r24	; 0x1a
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <LCD_SendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2606:	69 a5       	ldd	r22, Y+41	; 0x29
    2608:	7a a5       	ldd	r23, Y+42	; 0x2a
    260a:	8b a5       	ldd	r24, Y+43	; 0x2b
    260c:	9c a5       	ldd	r25, Y+44	; 0x2c
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	88 a7       	std	Y+40, r24	; 0x28
    2618:	88 a5       	ldd	r24, Y+40	; 0x28
    261a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    261c:	89 8d       	ldd	r24, Y+25	; 0x19
    261e:	8a 95       	dec	r24
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_SendCommand+0x5c6>
    2622:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e0       	ldi	r26, 0x00	; 0
    2634:	b0 e4       	ldi	r27, 0x40	; 64
    2636:	8d 8b       	std	Y+21, r24	; 0x15
    2638:	9e 8b       	std	Y+22, r25	; 0x16
    263a:	af 8b       	std	Y+23, r26	; 0x17
    263c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    263e:	6d 89       	ldd	r22, Y+21	; 0x15
    2640:	7e 89       	ldd	r23, Y+22	; 0x16
    2642:	8f 89       	ldd	r24, Y+23	; 0x17
    2644:	98 8d       	ldd	r25, Y+24	; 0x18
    2646:	2b ea       	ldi	r18, 0xAB	; 171
    2648:	3a ea       	ldi	r19, 0xAA	; 170
    264a:	4a e2       	ldi	r20, 0x2A	; 42
    264c:	50 e4       	ldi	r21, 0x40	; 64
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	89 8b       	std	Y+17, r24	; 0x11
    2658:	9a 8b       	std	Y+18, r25	; 0x12
    265a:	ab 8b       	std	Y+19, r26	; 0x13
    265c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    265e:	69 89       	ldd	r22, Y+17	; 0x11
    2660:	7a 89       	ldd	r23, Y+18	; 0x12
    2662:	8b 89       	ldd	r24, Y+19	; 0x13
    2664:	9c 89       	ldd	r25, Y+20	; 0x14
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	1c f4       	brge	.+6      	; 0x267c <LCD_SendCommand+0x624>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	88 8b       	std	Y+16, r24	; 0x10
    267a:	91 c0       	rjmp	.+290    	; 0x279e <LCD_SendCommand+0x746>
	else if (__tmp > 255)
    267c:	69 89       	ldd	r22, Y+17	; 0x11
    267e:	7a 89       	ldd	r23, Y+18	; 0x12
    2680:	8b 89       	ldd	r24, Y+19	; 0x13
    2682:	9c 89       	ldd	r25, Y+20	; 0x14
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	53 e4       	ldi	r21, 0x43	; 67
    268c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	0c f0       	brlt	.+2      	; 0x2696 <LCD_SendCommand+0x63e>
    2694:	7b c0       	rjmp	.+246    	; 0x278c <LCD_SendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    2696:	6d 89       	ldd	r22, Y+21	; 0x15
    2698:	7e 89       	ldd	r23, Y+22	; 0x16
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8c 87       	std	Y+12, r24	; 0x0c
    26b0:	9d 87       	std	Y+13, r25	; 0x0d
    26b2:	ae 87       	std	Y+14, r26	; 0x0e
    26b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    26b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    26ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    26bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	88 87       	std	Y+8, r24	; 0x08
    26d0:	99 87       	std	Y+9, r25	; 0x09
    26d2:	aa 87       	std	Y+10, r26	; 0x0a
    26d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26d6:	68 85       	ldd	r22, Y+8	; 0x08
    26d8:	79 85       	ldd	r23, Y+9	; 0x09
    26da:	8a 85       	ldd	r24, Y+10	; 0x0a
    26dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <LCD_SendCommand+0x6a0>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9f 83       	std	Y+7, r25	; 0x07
    26f4:	8e 83       	std	Y+6, r24	; 0x06
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <LCD_SendCommand+0x71e>
	else if (__tmp > 65535)
    26f8:	68 85       	ldd	r22, Y+8	; 0x08
    26fa:	79 85       	ldd	r23, Y+9	; 0x09
    26fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <LCD_SendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	6c 85       	ldd	r22, Y+12	; 0x0c
    2712:	7d 85       	ldd	r23, Y+13	; 0x0d
    2714:	8e 85       	ldd	r24, Y+14	; 0x0e
    2716:	9f 85       	ldd	r25, Y+15	; 0x0f
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <LCD_SendCommand+0x700>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9d 83       	std	Y+5, r25	; 0x05
    2740:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2742:	8c 81       	ldd	r24, Y+4	; 0x04
    2744:	9d 81       	ldd	r25, Y+5	; 0x05
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_SendCommand+0x6ee>
    274a:	9d 83       	std	Y+5, r25	; 0x05
    274c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	9f 81       	ldd	r25, Y+7	; 0x07
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9f 83       	std	Y+7, r25	; 0x07
    2756:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	9f 81       	ldd	r25, Y+7	; 0x07
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <LCD_SendCommand+0x6e2>
    2760:	24 c0       	rjmp	.+72     	; 0x27aa <LCD_SendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	68 85       	ldd	r22, Y+8	; 0x08
    2764:	79 85       	ldd	r23, Y+9	; 0x09
    2766:	8a 85       	ldd	r24, Y+10	; 0x0a
    2768:	9b 85       	ldd	r25, Y+11	; 0x0b
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9f 83       	std	Y+7, r25	; 0x07
    2774:	8e 83       	std	Y+6, r24	; 0x06
    2776:	8e 81       	ldd	r24, Y+6	; 0x06
    2778:	9f 81       	ldd	r25, Y+7	; 0x07
    277a:	9b 83       	std	Y+3, r25	; 0x03
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	9b 81       	ldd	r25, Y+3	; 0x03
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_SendCommand+0x72a>
    2786:	9b 83       	std	Y+3, r25	; 0x03
    2788:	8a 83       	std	Y+2, r24	; 0x02
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <LCD_SendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    278c:	69 89       	ldd	r22, Y+17	; 0x11
    278e:	7a 89       	ldd	r23, Y+18	; 0x12
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	88 8b       	std	Y+16, r24	; 0x10
    279e:	88 89       	ldd	r24, Y+16	; 0x10
    27a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	8a 95       	dec	r24
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_SendCommand+0x74c>
    27a8:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    27aa:	cf 59       	subi	r28, 0x9F	; 159
    27ac:	df 4f       	sbci	r29, 0xFF	; 255
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <LCD_displayCharacter>:

/*
 * Function to display a character on the LCD
 */
void LCD_displayCharacter(uint8 data)
{
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	c1 56       	subi	r28, 0x61	; 97
    27d0:	d0 40       	sbci	r29, 0x00	; 0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	fe 01       	movw	r30, r28
    27de:	ef 59       	subi	r30, 0x9F	; 159
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    27ee:	fe 01       	movw	r30, r28
    27f0:	e3 5a       	subi	r30, 0xA3	; 163
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e4       	ldi	r27, 0x40	; 64
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2804:	8e 01       	movw	r16, r28
    2806:	07 5a       	subi	r16, 0xA7	; 167
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e3 5a       	subi	r30, 0xA3	; 163
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	2b ea       	ldi	r18, 0xAB	; 171
    281a:	3a ea       	ldi	r19, 0xAA	; 170
    281c:	4a e2       	ldi	r20, 0x2A	; 42
    281e:	50 e4       	ldi	r21, 0x40	; 64
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	f8 01       	movw	r30, r16
    282a:	80 83       	st	Z, r24
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	a2 83       	std	Z+2, r26	; 0x02
    2830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2832:	fe 01       	movw	r30, r28
    2834:	e7 5a       	subi	r30, 0xA7	; 167
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	34 f4       	brge	.+12     	; 0x285c <LCD_displayCharacter+0x9a>
		__ticks = 1;
    2850:	fe 01       	movw	r30, r28
    2852:	e8 5a       	subi	r30, 0xA8	; 168
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	80 83       	st	Z, r24
    285a:	e0 c0       	rjmp	.+448    	; 0x2a1c <LCD_displayCharacter+0x25a>
	else if (__tmp > 255)
    285c:	fe 01       	movw	r30, r28
    285e:	e7 5a       	subi	r30, 0xA7	; 167
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	53 e4       	ldi	r21, 0x43	; 67
    2872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	0c f0       	brlt	.+2      	; 0x287c <LCD_displayCharacter+0xba>
    287a:	c0 c0       	rjmp	.+384    	; 0x29fc <LCD_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    287c:	fe 01       	movw	r30, r28
    287e:	e3 5a       	subi	r30, 0xA3	; 163
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4a e7       	ldi	r20, 0x7A	; 122
    2890:	54 e4       	ldi	r21, 0x44	; 68
    2892:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	fe 01       	movw	r30, r28
    289c:	ec 5a       	subi	r30, 0xAC	; 172
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 83       	st	Z, r24
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	a2 83       	std	Z+2, r26	; 0x02
    28a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	8e 01       	movw	r16, r28
    28aa:	00 5b       	subi	r16, 0xB0	; 176
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	ec 5a       	subi	r30, 0xAC	; 172
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	f8 01       	movw	r30, r16
    28ce:	80 83       	st	Z, r24
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	a2 83       	std	Z+2, r26	; 0x02
    28d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28d6:	fe 01       	movw	r30, r28
    28d8:	e0 5b       	subi	r30, 0xB0	; 176
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	44 f4       	brge	.+16     	; 0x2904 <LCD_displayCharacter+0x142>
		__ticks = 1;
    28f4:	fe 01       	movw	r30, r28
    28f6:	e2 5b       	subi	r30, 0xB2	; 178
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
    2902:	64 c0       	rjmp	.+200    	; 0x29cc <LCD_displayCharacter+0x20a>
	else if (__tmp > 65535)
    2904:	fe 01       	movw	r30, r28
    2906:	e0 5b       	subi	r30, 0xB0	; 176
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	3f ef       	ldi	r19, 0xFF	; 255
    2916:	4f e7       	ldi	r20, 0x7F	; 127
    2918:	57 e4       	ldi	r21, 0x47	; 71
    291a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    291e:	18 16       	cp	r1, r24
    2920:	0c f0       	brlt	.+2      	; 0x2924 <LCD_displayCharacter+0x162>
    2922:	43 c0       	rjmp	.+134    	; 0x29aa <LCD_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2924:	fe 01       	movw	r30, r28
    2926:	ec 5a       	subi	r30, 0xAC	; 172
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8e 01       	movw	r16, r28
    2944:	02 5b       	subi	r16, 0xB2	; 178
    2946:	1f 4f       	sbci	r17, 0xFF	; 255
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	f8 01       	movw	r30, r16
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	1f c0       	rjmp	.+62     	; 0x299a <LCD_displayCharacter+0x1d8>
    295c:	fe 01       	movw	r30, r28
    295e:	e4 5b       	subi	r30, 0xB4	; 180
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	88 ec       	ldi	r24, 0xC8	; 200
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    296a:	fe 01       	movw	r30, r28
    296c:	e4 5b       	subi	r30, 0xB4	; 180
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_displayCharacter+0x1b2>
    2978:	fe 01       	movw	r30, r28
    297a:	e4 5b       	subi	r30, 0xB4	; 180
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	de 01       	movw	r26, r28
    2984:	a2 5b       	subi	r26, 0xB2	; 178
    2986:	bf 4f       	sbci	r27, 0xFF	; 255
    2988:	fe 01       	movw	r30, r28
    298a:	e2 5b       	subi	r30, 0xB2	; 178
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	11 96       	adiw	r26, 0x01	; 1
    2996:	9c 93       	st	X, r25
    2998:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	fe 01       	movw	r30, r28
    299c:	e2 5b       	subi	r30, 0xB2	; 178
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	d1 f6       	brne	.-76     	; 0x295c <LCD_displayCharacter+0x19a>
    29a8:	4b c0       	rjmp	.+150    	; 0x2a40 <LCD_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29aa:	8e 01       	movw	r16, r28
    29ac:	02 5b       	subi	r16, 0xB2	; 178
    29ae:	1f 4f       	sbci	r17, 0xFF	; 255
    29b0:	fe 01       	movw	r30, r28
    29b2:	e0 5b       	subi	r30, 0xB0	; 176
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	f8 01       	movw	r30, r16
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	de 01       	movw	r26, r28
    29ce:	a6 5b       	subi	r26, 0xB6	; 182
    29d0:	bf 4f       	sbci	r27, 0xFF	; 255
    29d2:	fe 01       	movw	r30, r28
    29d4:	e2 5b       	subi	r30, 0xB2	; 178
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	11 96       	adiw	r26, 0x01	; 1
    29de:	9c 93       	st	X, r25
    29e0:	8e 93       	st	-X, r24
    29e2:	fe 01       	movw	r30, r28
    29e4:	e6 5b       	subi	r30, 0xB6	; 182
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_displayCharacter+0x22a>
    29f0:	fe 01       	movw	r30, r28
    29f2:	e6 5b       	subi	r30, 0xB6	; 182
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
    29fa:	22 c0       	rjmp	.+68     	; 0x2a40 <LCD_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29fc:	8e 01       	movw	r16, r28
    29fe:	08 5a       	subi	r16, 0xA8	; 168
    2a00:	1f 4f       	sbci	r17, 0xFF	; 255
    2a02:	fe 01       	movw	r30, r28
    2a04:	e7 5a       	subi	r30, 0xA7	; 167
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	f8 01       	movw	r30, r16
    2a1a:	80 83       	st	Z, r24
    2a1c:	de 01       	movw	r26, r28
    2a1e:	a7 5b       	subi	r26, 0xB7	; 183
    2a20:	bf 4f       	sbci	r27, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	e8 5a       	subi	r30, 0xA8	; 168
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e7 5b       	subi	r30, 0xB7	; 183
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	8a 95       	dec	r24
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_displayCharacter+0x272>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e7 5b       	subi	r30, 0xB7	; 183
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	eb 5b       	subi	r30, 0xBB	; 187
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e0       	ldi	r26, 0x00	; 0
    2a56:	b0 e4       	ldi	r27, 0x40	; 64
    2a58:	80 83       	st	Z, r24
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	a2 83       	std	Z+2, r26	; 0x02
    2a5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a60:	8e 01       	movw	r16, r28
    2a62:	0f 5b       	subi	r16, 0xBF	; 191
    2a64:	1f 4f       	sbci	r17, 0xFF	; 255
    2a66:	fe 01       	movw	r30, r28
    2a68:	eb 5b       	subi	r30, 0xBB	; 187
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	2b ea       	ldi	r18, 0xAB	; 171
    2a76:	3a ea       	ldi	r19, 0xAA	; 170
    2a78:	4a e2       	ldi	r20, 0x2A	; 42
    2a7a:	50 e4       	ldi	r21, 0x40	; 64
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	f8 01       	movw	r30, r16
    2a86:	80 83       	st	Z, r24
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	a2 83       	std	Z+2, r26	; 0x02
    2a8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 5b       	subi	r30, 0xBF	; 191
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	34 f4       	brge	.+12     	; 0x2ab8 <LCD_displayCharacter+0x2f6>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e0 5c       	subi	r30, 0xC0	; 192
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 83       	st	Z, r24
    2ab6:	9d c0       	rjmp	.+314    	; 0x2bf2 <LCD_displayCharacter+0x430>
	else if (__tmp > 255)
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 5b       	subi	r30, 0xBF	; 191
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	53 e4       	ldi	r21, 0x43	; 67
    2ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	0c f0       	brlt	.+2      	; 0x2ad8 <LCD_displayCharacter+0x316>
    2ad6:	7e c0       	rjmp	.+252    	; 0x2bd4 <LCD_displayCharacter+0x412>
	{
		_delay_ms(__us / 1000.0);
    2ad8:	fe 01       	movw	r30, r28
    2ada:	eb 5b       	subi	r30, 0xBB	; 187
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8c af       	std	Y+60, r24	; 0x3c
    2af8:	9d af       	std	Y+61, r25	; 0x3d
    2afa:	ae af       	std	Y+62, r26	; 0x3e
    2afc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b00:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b02:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b04:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a ef       	ldi	r20, 0xFA	; 250
    2b0c:	54 e4       	ldi	r21, 0x44	; 68
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	88 af       	std	Y+56, r24	; 0x38
    2b18:	99 af       	std	Y+57, r25	; 0x39
    2b1a:	aa af       	std	Y+58, r26	; 0x3a
    2b1c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2b1e:	68 ad       	ldd	r22, Y+56	; 0x38
    2b20:	79 ad       	ldd	r23, Y+57	; 0x39
    2b22:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b24:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <LCD_displayCharacter+0x37e>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9f ab       	std	Y+55, r25	; 0x37
    2b3c:	8e ab       	std	Y+54, r24	; 0x36
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <LCD_displayCharacter+0x3fc>
	else if (__tmp > 65535)
    2b40:	68 ad       	ldd	r22, Y+56	; 0x38
    2b42:	79 ad       	ldd	r23, Y+57	; 0x39
    2b44:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b46:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <LCD_displayCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9f ab       	std	Y+55, r25	; 0x37
    2b7e:	8e ab       	std	Y+54, r24	; 0x36
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <LCD_displayCharacter+0x3de>
    2b82:	88 ec       	ldi	r24, 0xC8	; 200
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9d ab       	std	Y+53, r25	; 0x35
    2b88:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b8a:	8c a9       	ldd	r24, Y+52	; 0x34
    2b8c:	9d a9       	ldd	r25, Y+53	; 0x35
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_displayCharacter+0x3cc>
    2b92:	9d ab       	std	Y+53, r25	; 0x35
    2b94:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8e a9       	ldd	r24, Y+54	; 0x36
    2b98:	9f a9       	ldd	r25, Y+55	; 0x37
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9f ab       	std	Y+55, r25	; 0x37
    2b9e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8e a9       	ldd	r24, Y+54	; 0x36
    2ba2:	9f a9       	ldd	r25, Y+55	; 0x37
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <LCD_displayCharacter+0x3c0>
    2ba8:	2d c0       	rjmp	.+90     	; 0x2c04 <LCD_displayCharacter+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	68 ad       	ldd	r22, Y+56	; 0x38
    2bac:	79 ad       	ldd	r23, Y+57	; 0x39
    2bae:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bb0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9f ab       	std	Y+55, r25	; 0x37
    2bbc:	8e ab       	std	Y+54, r24	; 0x36
    2bbe:	8e a9       	ldd	r24, Y+54	; 0x36
    2bc0:	9f a9       	ldd	r25, Y+55	; 0x37
    2bc2:	9b ab       	std	Y+51, r25	; 0x33
    2bc4:	8a ab       	std	Y+50, r24	; 0x32
    2bc6:	8a a9       	ldd	r24, Y+50	; 0x32
    2bc8:	9b a9       	ldd	r25, Y+51	; 0x33
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_displayCharacter+0x408>
    2bce:	9b ab       	std	Y+51, r25	; 0x33
    2bd0:	8a ab       	std	Y+50, r24	; 0x32
    2bd2:	18 c0       	rjmp	.+48     	; 0x2c04 <LCD_displayCharacter+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 5b       	subi	r30, 0xBF	; 191
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	fe 01       	movw	r30, r28
    2bec:	e0 5c       	subi	r30, 0xC0	; 192
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 83       	st	Z, r24
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e0 5c       	subi	r30, 0xC0	; 192
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bfc:	89 a9       	ldd	r24, Y+49	; 0x31
    2bfe:	8a 95       	dec	r24
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_displayCharacter+0x43c>
    2c02:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the data accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, data);
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 59       	subi	r30, 0x9F	; 159
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	60 81       	ld	r22, Z
    2c0e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GPIO_writePort>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e4       	ldi	r27, 0x40	; 64
    2c1a:	8d a7       	std	Y+45, r24	; 0x2d
    2c1c:	9e a7       	std	Y+46, r25	; 0x2e
    2c1e:	af a7       	std	Y+47, r26	; 0x2f
    2c20:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c22:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c24:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c28:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2a:	2b ea       	ldi	r18, 0xAB	; 171
    2c2c:	3a ea       	ldi	r19, 0xAA	; 170
    2c2e:	4a e2       	ldi	r20, 0x2A	; 42
    2c30:	50 e4       	ldi	r21, 0x40	; 64
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	89 a7       	std	Y+41, r24	; 0x29
    2c3c:	9a a7       	std	Y+42, r25	; 0x2a
    2c3e:	ab a7       	std	Y+43, r26	; 0x2b
    2c40:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c42:	69 a5       	ldd	r22, Y+41	; 0x29
    2c44:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	1c f4       	brge	.+6      	; 0x2c60 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	88 a7       	std	Y+40, r24	; 0x28
    2c5e:	91 c0       	rjmp	.+290    	; 0x2d82 <LCD_displayCharacter+0x5c0>
	else if (__tmp > 255)
    2c60:	69 a5       	ldd	r22, Y+41	; 0x29
    2c62:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	53 e4       	ldi	r21, 0x43	; 67
    2c70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	0c f0       	brlt	.+2      	; 0x2c7a <LCD_displayCharacter+0x4b8>
    2c78:	7b c0       	rjmp	.+246    	; 0x2d70 <LCD_displayCharacter+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    2c7a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c7c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c80:	98 a9       	ldd	r25, Y+48	; 0x30
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a e7       	ldi	r20, 0x7A	; 122
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8c a3       	std	Y+36, r24	; 0x24
    2c94:	9d a3       	std	Y+37, r25	; 0x25
    2c96:	ae a3       	std	Y+38, r26	; 0x26
    2c98:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9a:	6c a1       	ldd	r22, Y+36	; 0x24
    2c9c:	7d a1       	ldd	r23, Y+37	; 0x25
    2c9e:	8e a1       	ldd	r24, Y+38	; 0x26
    2ca0:	9f a1       	ldd	r25, Y+39	; 0x27
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a ef       	ldi	r20, 0xFA	; 250
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	88 a3       	std	Y+32, r24	; 0x20
    2cb4:	99 a3       	std	Y+33, r25	; 0x21
    2cb6:	aa a3       	std	Y+34, r26	; 0x22
    2cb8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2cba:	68 a1       	ldd	r22, Y+32	; 0x20
    2cbc:	79 a1       	ldd	r23, Y+33	; 0x21
    2cbe:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc0:	9b a1       	ldd	r25, Y+35	; 0x23
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e8       	ldi	r20, 0x80	; 128
    2cc8:	5f e3       	ldi	r21, 0x3F	; 63
    2cca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <LCD_displayCharacter+0x51a>
		__ticks = 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2cd8:	8e 8f       	std	Y+30, r24	; 0x1e
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <LCD_displayCharacter+0x598>
	else if (__tmp > 65535)
    2cdc:	68 a1       	ldd	r22, Y+32	; 0x20
    2cde:	79 a1       	ldd	r23, Y+33	; 0x21
    2ce0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ce2:	9b a1       	ldd	r25, Y+35	; 0x23
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	4f e7       	ldi	r20, 0x7F	; 127
    2cea:	57 e4       	ldi	r21, 0x47	; 71
    2cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	4c f5       	brge	.+82     	; 0x2d46 <LCD_displayCharacter+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf4:	6c a1       	ldd	r22, Y+36	; 0x24
    2cf6:	7d a1       	ldd	r23, Y+37	; 0x25
    2cf8:	8e a1       	ldd	r24, Y+38	; 0x26
    2cfa:	9f a1       	ldd	r25, Y+39	; 0x27
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9f 8f       	std	Y+31, r25	; 0x1f
    2d1a:	8e 8f       	std	Y+30, r24	; 0x1e
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <LCD_displayCharacter+0x57a>
    2d1e:	88 ec       	ldi	r24, 0xC8	; 200
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9d 8f       	std	Y+29, r25	; 0x1d
    2d24:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <LCD_displayCharacter+0x568>
    2d2e:	9d 8f       	std	Y+29, r25	; 0x1d
    2d30:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	9f 8f       	std	Y+31, r25	; 0x1f
    2d3a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	69 f7       	brne	.-38     	; 0x2d1e <LCD_displayCharacter+0x55c>
    2d44:	24 c0       	rjmp	.+72     	; 0x2d8e <LCD_displayCharacter+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d46:	68 a1       	ldd	r22, Y+32	; 0x20
    2d48:	79 a1       	ldd	r23, Y+33	; 0x21
    2d4a:	8a a1       	ldd	r24, Y+34	; 0x22
    2d4c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9f 8f       	std	Y+31, r25	; 0x1f
    2d58:	8e 8f       	std	Y+30, r24	; 0x1e
    2d5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d5e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d60:	8a 8f       	std	Y+26, r24	; 0x1a
    2d62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d64:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LCD_displayCharacter+0x5a4>
    2d6a:	9b 8f       	std	Y+27, r25	; 0x1b
    2d6c:	8a 8f       	std	Y+26, r24	; 0x1a
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_displayCharacter+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d70:	69 a5       	ldd	r22, Y+41	; 0x29
    2d72:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	88 a7       	std	Y+40, r24	; 0x28
    2d82:	88 a5       	ldd	r24, Y+40	; 0x28
    2d84:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d86:	89 8d       	ldd	r24, Y+25	; 0x19
    2d88:	8a 95       	dec	r24
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_displayCharacter+0x5c6>
    2d8c:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GPIO_writePin>
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	a0 e0       	ldi	r26, 0x00	; 0
    2d9e:	b0 e4       	ldi	r27, 0x40	; 64
    2da0:	8d 8b       	std	Y+21, r24	; 0x15
    2da2:	9e 8b       	std	Y+22, r25	; 0x16
    2da4:	af 8b       	std	Y+23, r26	; 0x17
    2da6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2da8:	6d 89       	ldd	r22, Y+21	; 0x15
    2daa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dac:	8f 89       	ldd	r24, Y+23	; 0x17
    2dae:	98 8d       	ldd	r25, Y+24	; 0x18
    2db0:	2b ea       	ldi	r18, 0xAB	; 171
    2db2:	3a ea       	ldi	r19, 0xAA	; 170
    2db4:	4a e2       	ldi	r20, 0x2A	; 42
    2db6:	50 e4       	ldi	r21, 0x40	; 64
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	89 8b       	std	Y+17, r24	; 0x11
    2dc2:	9a 8b       	std	Y+18, r25	; 0x12
    2dc4:	ab 8b       	std	Y+19, r26	; 0x13
    2dc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dc8:	69 89       	ldd	r22, Y+17	; 0x11
    2dca:	7a 89       	ldd	r23, Y+18	; 0x12
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	1c f4       	brge	.+6      	; 0x2de6 <LCD_displayCharacter+0x624>
		__ticks = 1;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	88 8b       	std	Y+16, r24	; 0x10
    2de4:	91 c0       	rjmp	.+290    	; 0x2f08 <LCD_displayCharacter+0x746>
	else if (__tmp > 255)
    2de6:	69 89       	ldd	r22, Y+17	; 0x11
    2de8:	7a 89       	ldd	r23, Y+18	; 0x12
    2dea:	8b 89       	ldd	r24, Y+19	; 0x13
    2dec:	9c 89       	ldd	r25, Y+20	; 0x14
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	53 e4       	ldi	r21, 0x43	; 67
    2df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	0c f0       	brlt	.+2      	; 0x2e00 <LCD_displayCharacter+0x63e>
    2dfe:	7b c0       	rjmp	.+246    	; 0x2ef6 <LCD_displayCharacter+0x734>
	{
		_delay_ms(__us / 1000.0);
    2e00:	6d 89       	ldd	r22, Y+21	; 0x15
    2e02:	7e 89       	ldd	r23, Y+22	; 0x16
    2e04:	8f 89       	ldd	r24, Y+23	; 0x17
    2e06:	98 8d       	ldd	r25, Y+24	; 0x18
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4a e7       	ldi	r20, 0x7A	; 122
    2e0e:	54 e4       	ldi	r21, 0x44	; 68
    2e10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	8c 87       	std	Y+12, r24	; 0x0c
    2e1a:	9d 87       	std	Y+13, r25	; 0x0d
    2e1c:	ae 87       	std	Y+14, r26	; 0x0e
    2e1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	88 87       	std	Y+8, r24	; 0x08
    2e3a:	99 87       	std	Y+9, r25	; 0x09
    2e3c:	aa 87       	std	Y+10, r26	; 0x0a
    2e3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e40:	68 85       	ldd	r22, Y+8	; 0x08
    2e42:	79 85       	ldd	r23, Y+9	; 0x09
    2e44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <LCD_displayCharacter+0x6a0>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9f 83       	std	Y+7, r25	; 0x07
    2e5e:	8e 83       	std	Y+6, r24	; 0x06
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <LCD_displayCharacter+0x71e>
	else if (__tmp > 65535)
    2e62:	68 85       	ldd	r22, Y+8	; 0x08
    2e64:	79 85       	ldd	r23, Y+9	; 0x09
    2e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <LCD_displayCharacter+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9f 83       	std	Y+7, r25	; 0x07
    2ea0:	8e 83       	std	Y+6, r24	; 0x06
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <LCD_displayCharacter+0x700>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9d 83       	std	Y+5, r25	; 0x05
    2eaa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <LCD_displayCharacter+0x6ee>
    2eb4:	9d 83       	std	Y+5, r25	; 0x05
    2eb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eba:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9f 83       	std	Y+7, r25	; 0x07
    2ec0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <LCD_displayCharacter+0x6e2>
    2eca:	24 c0       	rjmp	.+72     	; 0x2f14 <LCD_displayCharacter+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	68 85       	ldd	r22, Y+8	; 0x08
    2ece:	79 85       	ldd	r23, Y+9	; 0x09
    2ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9f 83       	std	Y+7, r25	; 0x07
    2ede:	8e 83       	std	Y+6, r24	; 0x06
    2ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee4:	9b 83       	std	Y+3, r25	; 0x03
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	9b 81       	ldd	r25, Y+3	; 0x03
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_displayCharacter+0x72a>
    2ef0:	9b 83       	std	Y+3, r25	; 0x03
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <LCD_displayCharacter+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ef6:	69 89       	ldd	r22, Y+17	; 0x11
    2ef8:	7a 89       	ldd	r23, Y+18	; 0x12
    2efa:	8b 89       	ldd	r24, Y+19	; 0x13
    2efc:	9c 89       	ldd	r25, Y+20	; 0x14
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	88 8b       	std	Y+16, r24	; 0x10
    2f08:	88 89       	ldd	r24, Y+16	; 0x10
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	8a 95       	dec	r24
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_displayCharacter+0x74c>
    2f12:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    2f14:	cf 59       	subi	r28, 0x9F	; 159
    2f16:	df 4f       	sbci	r29, 0xFF	; 255
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <LCD_init>:

/*
 * Function to initialize the LCD
 */
void LCD_init(void)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	2e 97       	sbiw	r28, 0x0e	; 14
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIO_setupPinDirection>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 ea       	ldi	r26, 0xA0	; 160
    2f5a:	b1 e4       	ldi	r27, 0x41	; 65
    2f5c:	8b 87       	std	Y+11, r24	; 0x0b
    2f5e:	9c 87       	std	Y+12, r25	; 0x0c
    2f60:	ad 87       	std	Y+13, r26	; 0x0d
    2f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8f 83       	std	Y+7, r24	; 0x07
    2f7e:	98 87       	std	Y+8, r25	; 0x08
    2f80:	a9 87       	std	Y+9, r26	; 0x09
    2f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f84:	6f 81       	ldd	r22, Y+7	; 0x07
    2f86:	78 85       	ldd	r23, Y+8	; 0x08
    2f88:	89 85       	ldd	r24, Y+9	; 0x09
    2f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_init+0x7a>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_init+0xda>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_init+0xc8>
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9e 83       	std	Y+6, r25	; 0x06
    3004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_init+0xbc>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_init+0x104>
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20); /* LCD Power ON delay */

    #if (LCD_BIT_MODE == 8)

    	/* Configure the data port as output port */
        GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	6f ef       	ldi	r22, 0xFF	; 255
    303c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_setupPortDirection>

        /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_8BIT);
    3040:	88 e3       	ldi	r24, 0x38	; 56
    3042:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_SendCommand>
        LCD_SendCommand(LCD_4BIT);	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_4BIT1);	/* Send for 4 bit initialization of LCD  */
        LCD_SendCommand(LCD_4BIT2);
    #endif

    LCD_SendCommand(LCD_CURSOR_OFF);		/* cursor off */
    3046:	8c e0       	ldi	r24, 0x0C	; 12
    3048:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_SendCommand>
    LCD_SendCommand(LCD_CLEAR_COMMAND);		/* clear LCD at the beginning */
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_SendCommand>
}
    3052:	2e 96       	adiw	r28, 0x0e	; 14
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <LCD_displayString>:

/*
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <LCD_displayString+0x6>
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9b 83       	std	Y+3, r25	; 0x03
    3072:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    3074:	19 82       	std	Y+1, r1	; 0x01
    3076:	0e c0       	rjmp	.+28     	; 0x3094 <LCD_displayString+0x30>
    while (string[i] != '\0')
    {
        LCD_displayCharacter(string[i]);
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	fc 01       	movw	r30, r24
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	80 81       	ld	r24, Z
    308a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_displayCharacter>
        i++;
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	89 83       	std	Y+1, r24	; 0x01
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    uint8 i = 0;
    while (string[i] != '\0')
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	9b 81       	ldd	r25, Y+3	; 0x03
    309e:	fc 01       	movw	r30, r24
    30a0:	e2 0f       	add	r30, r18
    30a2:	f3 1f       	adc	r31, r19
    30a4:	80 81       	ld	r24, Z
    30a6:	88 23       	and	r24, r24
    30a8:	39 f7       	brne	.-50     	; 0x3078 <LCD_displayString+0x14>
    {
        LCD_displayCharacter(string[i]);
        i++;
    }
}
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <LCD_moveCursor>:

/*
 * Function to move the cursor to a specific row and column on the LCD
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	6d 97       	sbiw	r28, 0x1d	; 29
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	8a 8f       	std	Y+26, r24	; 0x1a
    30cc:	6b 8f       	std	Y+27, r22	; 0x1b
    uint8 address;
    switch (row)
    30ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	3d 8f       	std	Y+29, r19	; 0x1d
    30d6:	2c 8f       	std	Y+28, r18	; 0x1c
    30d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	91 05       	cpc	r25, r1
    30e0:	c1 f0       	breq	.+48     	; 0x3112 <LCD_moveCursor+0x5c>
    30e2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    30e4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    30e6:	22 30       	cpi	r18, 0x02	; 2
    30e8:	31 05       	cpc	r19, r1
    30ea:	2c f4       	brge	.+10     	; 0x30f6 <LCD_moveCursor+0x40>
    30ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	61 f0       	breq	.+24     	; 0x310c <LCD_moveCursor+0x56>
    30f4:	19 c0       	rjmp	.+50     	; 0x3128 <LCD_moveCursor+0x72>
    30f6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    30f8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    30fa:	22 30       	cpi	r18, 0x02	; 2
    30fc:	31 05       	cpc	r19, r1
    30fe:	69 f0       	breq	.+26     	; 0x311a <LCD_moveCursor+0x64>
    3100:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3102:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3104:	83 30       	cpi	r24, 0x03	; 3
    3106:	91 05       	cpc	r25, r1
    3108:	61 f0       	breq	.+24     	; 0x3122 <LCD_moveCursor+0x6c>
    310a:	0e c0       	rjmp	.+28     	; 0x3128 <LCD_moveCursor+0x72>
    {
    case 0:
        address = col;
    310c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310e:	89 8f       	std	Y+25, r24	; 0x19
    3110:	0b c0       	rjmp	.+22     	; 0x3128 <LCD_moveCursor+0x72>
        break;
    case 1:
        address = col + 0x40;
    3112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3114:	80 5c       	subi	r24, 0xC0	; 192
    3116:	89 8f       	std	Y+25, r24	; 0x19
    3118:	07 c0       	rjmp	.+14     	; 0x3128 <LCD_moveCursor+0x72>
        break;
    case 2:
        address = col + 0x10;
    311a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    311c:	80 5f       	subi	r24, 0xF0	; 240
    311e:	89 8f       	std	Y+25, r24	; 0x19
    3120:	03 c0       	rjmp	.+6      	; 0x3128 <LCD_moveCursor+0x72>
        break;
    case 3:
        address = col + 0x50;
    3122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3124:	80 5b       	subi	r24, 0xB0	; 176
    3126:	89 8f       	std	Y+25, r24	; 0x19
        break;
    }
    LCD_SendCommand(address | LCD_MOVE_CURSOR);
    3128:	89 8d       	ldd	r24, Y+25	; 0x19
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_SendCommand>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a0 e0       	ldi	r26, 0x00	; 0
    3136:	b0 e4       	ldi	r27, 0x40	; 64
    3138:	8d 8b       	std	Y+21, r24	; 0x15
    313a:	9e 8b       	std	Y+22, r25	; 0x16
    313c:	af 8b       	std	Y+23, r26	; 0x17
    313e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3140:	6d 89       	ldd	r22, Y+21	; 0x15
    3142:	7e 89       	ldd	r23, Y+22	; 0x16
    3144:	8f 89       	ldd	r24, Y+23	; 0x17
    3146:	98 8d       	ldd	r25, Y+24	; 0x18
    3148:	2b ea       	ldi	r18, 0xAB	; 171
    314a:	3a ea       	ldi	r19, 0xAA	; 170
    314c:	4a e2       	ldi	r20, 0x2A	; 42
    314e:	50 e4       	ldi	r21, 0x40	; 64
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	89 8b       	std	Y+17, r24	; 0x11
    315a:	9a 8b       	std	Y+18, r25	; 0x12
    315c:	ab 8b       	std	Y+19, r26	; 0x13
    315e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3160:	69 89       	ldd	r22, Y+17	; 0x11
    3162:	7a 89       	ldd	r23, Y+18	; 0x12
    3164:	8b 89       	ldd	r24, Y+19	; 0x13
    3166:	9c 89       	ldd	r25, Y+20	; 0x14
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	1c f4       	brge	.+6      	; 0x317e <LCD_moveCursor+0xc8>
		__ticks = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	88 8b       	std	Y+16, r24	; 0x10
    317c:	91 c0       	rjmp	.+290    	; 0x32a0 <LCD_moveCursor+0x1ea>
	else if (__tmp > 255)
    317e:	69 89       	ldd	r22, Y+17	; 0x11
    3180:	7a 89       	ldd	r23, Y+18	; 0x12
    3182:	8b 89       	ldd	r24, Y+19	; 0x13
    3184:	9c 89       	ldd	r25, Y+20	; 0x14
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	53 e4       	ldi	r21, 0x43	; 67
    318e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	0c f0       	brlt	.+2      	; 0x3198 <LCD_moveCursor+0xe2>
    3196:	7b c0       	rjmp	.+246    	; 0x328e <LCD_moveCursor+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    3198:	6d 89       	ldd	r22, Y+21	; 0x15
    319a:	7e 89       	ldd	r23, Y+22	; 0x16
    319c:	8f 89       	ldd	r24, Y+23	; 0x17
    319e:	98 8d       	ldd	r25, Y+24	; 0x18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	4a e7       	ldi	r20, 0x7A	; 122
    31a6:	54 e4       	ldi	r21, 0x44	; 68
    31a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8c 87       	std	Y+12, r24	; 0x0c
    31b2:	9d 87       	std	Y+13, r25	; 0x0d
    31b4:	ae 87       	std	Y+14, r26	; 0x0e
    31b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    31ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    31bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    31be:	9f 85       	ldd	r25, Y+15	; 0x0f
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a ef       	ldi	r20, 0xFA	; 250
    31c6:	54 e4       	ldi	r21, 0x44	; 68
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	88 87       	std	Y+8, r24	; 0x08
    31d2:	99 87       	std	Y+9, r25	; 0x09
    31d4:	aa 87       	std	Y+10, r26	; 0x0a
    31d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31d8:	68 85       	ldd	r22, Y+8	; 0x08
    31da:	79 85       	ldd	r23, Y+9	; 0x09
    31dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31de:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <LCD_moveCursor+0x144>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9f 83       	std	Y+7, r25	; 0x07
    31f6:	8e 83       	std	Y+6, r24	; 0x06
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <LCD_moveCursor+0x1c2>
	else if (__tmp > 65535)
    31fa:	68 85       	ldd	r22, Y+8	; 0x08
    31fc:	79 85       	ldd	r23, Y+9	; 0x09
    31fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3200:	9b 85       	ldd	r25, Y+11	; 0x0b
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <LCD_moveCursor+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	6c 85       	ldd	r22, Y+12	; 0x0c
    3214:	7d 85       	ldd	r23, Y+13	; 0x0d
    3216:	8e 85       	ldd	r24, Y+14	; 0x0e
    3218:	9f 85       	ldd	r25, Y+15	; 0x0f
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9f 83       	std	Y+7, r25	; 0x07
    3238:	8e 83       	std	Y+6, r24	; 0x06
    323a:	0f c0       	rjmp	.+30     	; 0x325a <LCD_moveCursor+0x1a4>
    323c:	88 ec       	ldi	r24, 0xC8	; 200
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9d 83       	std	Y+5, r25	; 0x05
    3242:	8c 83       	std	Y+4, r24	; 0x04
    3244:	8c 81       	ldd	r24, Y+4	; 0x04
    3246:	9d 81       	ldd	r25, Y+5	; 0x05
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_moveCursor+0x192>
    324c:	9d 83       	std	Y+5, r25	; 0x05
    324e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9f 83       	std	Y+7, r25	; 0x07
    3258:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	8e 81       	ldd	r24, Y+6	; 0x06
    325c:	9f 81       	ldd	r25, Y+7	; 0x07
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <LCD_moveCursor+0x186>
    3262:	24 c0       	rjmp	.+72     	; 0x32ac <LCD_moveCursor+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	68 85       	ldd	r22, Y+8	; 0x08
    3266:	79 85       	ldd	r23, Y+9	; 0x09
    3268:	8a 85       	ldd	r24, Y+10	; 0x0a
    326a:	9b 85       	ldd	r25, Y+11	; 0x0b
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9f 83       	std	Y+7, r25	; 0x07
    3276:	8e 83       	std	Y+6, r24	; 0x06
    3278:	8e 81       	ldd	r24, Y+6	; 0x06
    327a:	9f 81       	ldd	r25, Y+7	; 0x07
    327c:	9b 83       	std	Y+3, r25	; 0x03
    327e:	8a 83       	std	Y+2, r24	; 0x02
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <LCD_moveCursor+0x1ce>
    3288:	9b 83       	std	Y+3, r25	; 0x03
    328a:	8a 83       	std	Y+2, r24	; 0x02
    328c:	0f c0       	rjmp	.+30     	; 0x32ac <LCD_moveCursor+0x1f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    328e:	69 89       	ldd	r22, Y+17	; 0x11
    3290:	7a 89       	ldd	r23, Y+18	; 0x12
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	9c 89       	ldd	r25, Y+20	; 0x14
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	88 8b       	std	Y+16, r24	; 0x10
    32a0:	88 89       	ldd	r24, Y+16	; 0x10
    32a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8a 95       	dec	r24
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <LCD_moveCursor+0x1f0>
    32aa:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    32ac:	6d 96       	adiw	r28, 0x1d	; 29
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <LCD_displaySringRowColumn>:

/*
 * Function to display a string at a specific row and column on the LCD
 */
void LCD_displaySringRowColumn(const char* string, uint8 row, uint8 col)
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <LCD_displaySringRowColumn+0x6>
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <LCD_displaySringRowColumn+0x8>
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	6b 83       	std	Y+3, r22	; 0x03
    32d0:	4c 83       	std	Y+4, r20	; 0x04
    LCD_moveCursor(row, col);
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	6c 81       	ldd	r22, Y+4	; 0x04
    32d6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <LCD_moveCursor>
    LCD_displayString(string);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
}
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <LCD_clearScreen>:

/*
 * Function to clear the LCD screen
 */
void LCD_clearScreen(void)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_CLEAR_COMMAND);
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_SendCommand>
}
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <LCD_intgerToString>:

/*
 * Function to convert an integer to a string and display it on the LCD
 */
void LCD_intgerToString(int data)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	62 97       	sbiw	r28, 0x12	; 18
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	9a 8b       	std	Y+18, r25	; 0x12
    331a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data, buff, 10);
    331c:	89 89       	ldd	r24, Y+17	; 0x11
    331e:	9a 89       	ldd	r25, Y+18	; 0x12
    3320:	9e 01       	movw	r18, r28
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	b9 01       	movw	r22, r18
    3328:	4a e0       	ldi	r20, 0x0A	; 10
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	0e 94 3e 1c 	call	0x387c	; 0x387c <itoa>
   LCD_displayString(buff);
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
}
    3338:	62 96       	adiw	r28, 0x12	; 18
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <__vector_7>:
 *******************************************************************************/


/* Interrupt Service Routine for timer1 compare mode handle call back function */
ISR(TIMER1_COMPA_vect)
{
    334a:	1f 92       	push	r1
    334c:	0f 92       	push	r0
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	0f 92       	push	r0
    3352:	11 24       	eor	r1, r1
    3354:	2f 93       	push	r18
    3356:	3f 93       	push	r19
    3358:	4f 93       	push	r20
    335a:	5f 93       	push	r21
    335c:	6f 93       	push	r22
    335e:	7f 93       	push	r23
    3360:	8f 93       	push	r24
    3362:	9f 93       	push	r25
    3364:	af 93       	push	r26
    3366:	bf 93       	push	r27
    3368:	ef 93       	push	r30
    336a:	ff 93       	push	r31
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
	/* check if the pointer is not equal null */
	if (g_CallBackFunction != NULL_PTR)
    3374:	80 91 78 02 	lds	r24, 0x0278
    3378:	90 91 79 02 	lds	r25, 0x0279
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	29 f0       	breq	.+10     	; 0x338a <__vector_7+0x40>
	{
		/* call back the function passed to you */
		(*g_CallBackFunction)();
    3380:	e0 91 78 02 	lds	r30, 0x0278
    3384:	f0 91 79 02 	lds	r31, 0x0279
    3388:	09 95       	icall
	}
}
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	ff 91       	pop	r31
    3390:	ef 91       	pop	r30
    3392:	bf 91       	pop	r27
    3394:	af 91       	pop	r26
    3396:	9f 91       	pop	r25
    3398:	8f 91       	pop	r24
    339a:	7f 91       	pop	r23
    339c:	6f 91       	pop	r22
    339e:	5f 91       	pop	r21
    33a0:	4f 91       	pop	r20
    33a2:	3f 91       	pop	r19
    33a4:	2f 91       	pop	r18
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <__vector_9>:

/* Interrupt Service Routine for timer1 overflow mode to handle call back function */
ISR(TIMER1_OVF_vect)
{
    33b0:	1f 92       	push	r1
    33b2:	0f 92       	push	r0
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	0f 92       	push	r0
    33b8:	11 24       	eor	r1, r1
    33ba:	2f 93       	push	r18
    33bc:	3f 93       	push	r19
    33be:	4f 93       	push	r20
    33c0:	5f 93       	push	r21
    33c2:	6f 93       	push	r22
    33c4:	7f 93       	push	r23
    33c6:	8f 93       	push	r24
    33c8:	9f 93       	push	r25
    33ca:	af 93       	push	r26
    33cc:	bf 93       	push	r27
    33ce:	ef 93       	push	r30
    33d0:	ff 93       	push	r31
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
	/* check if the pointer is not equal null */
	if (g_CallBackFunction != NULL_PTR)
    33da:	80 91 78 02 	lds	r24, 0x0278
    33de:	90 91 79 02 	lds	r25, 0x0279
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	29 f0       	breq	.+10     	; 0x33f0 <__vector_9+0x40>
	{
		/* call back the function passed to you */
		(*g_CallBackFunction)();
    33e6:	e0 91 78 02 	lds	r30, 0x0278
    33ea:	f0 91 79 02 	lds	r31, 0x0279
    33ee:	09 95       	icall
	}
}
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	ff 91       	pop	r31
    33f6:	ef 91       	pop	r30
    33f8:	bf 91       	pop	r27
    33fa:	af 91       	pop	r26
    33fc:	9f 91       	pop	r25
    33fe:	8f 91       	pop	r24
    3400:	7f 91       	pop	r23
    3402:	6f 91       	pop	r22
    3404:	5f 91       	pop	r21
    3406:	4f 91       	pop	r20
    3408:	3f 91       	pop	r19
    340a:	2f 91       	pop	r18
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	0f 90       	pop	r0
    3412:	1f 90       	pop	r1
    3414:	18 95       	reti

00003416 <TIMER1_init>:
 * 	3. Set the required clock.
 * 	4. Set the required compare value.
 * 	5. Initialize Timer1 Registers.
 */
void TIMER1_init(const TIMER1_ConfigType * config_ptr)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	00 d0       	rcall	.+0      	; 0x341c <TIMER1_init+0x6>
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial count as configured */
	TCNT1 = config_ptr->initial_value;
    3424:	ac e4       	ldi	r26, 0x4C	; 76
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	e9 81       	ldd	r30, Y+1	; 0x01
    342a:	fa 81       	ldd	r31, Y+2	; 0x02
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	93 81       	ldd	r25, Z+3	; 0x03
    3430:	11 96       	adiw	r26, 0x01	; 1
    3432:	9c 93       	st	X, r25
    3434:	8e 93       	st	-X, r24
	/*
	 * Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0 NON PWM mode
	 */
	TCCR1A = (1<<FOC1A);
    3436:	ef e4       	ldi	r30, 0x4F	; 79
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	88 e0       	ldi	r24, 0x08	; 8
    343c:	80 83       	st	Z, r24

	/* If the configured mode is overflow mode */
	if (config_ptr->mode == OVERFLOW_MODE)
    343e:	e9 81       	ldd	r30, Y+1	; 0x01
    3440:	fa 81       	ldd	r31, Y+2	; 0x02
    3442:	80 81       	ld	r24, Z
    3444:	88 23       	and	r24, r24
    3446:	79 f4       	brne	.+30     	; 0x3466 <TIMER1_init+0x50>
	{
		/* Set the mode of the timer to Normal mode */
		CLEAR_BIT(TCCR1B, WGM12);
    3448:	ae e4       	ldi	r26, 0x4E	; 78
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	ee e4       	ldi	r30, 0x4E	; 78
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	87 7f       	andi	r24, 0xF7	; 247
    3454:	8c 93       	st	X, r24

		/* Enable Timer1 overflow Interrupt */
		SET_BIT(TIMSK, TOIE1);
    3456:	a9 e5       	ldi	r26, 0x59	; 89
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e9 e5       	ldi	r30, 0x59	; 89
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	84 60       	ori	r24, 0x04	; 4
    3462:	8c 93       	st	X, r24
    3464:	1c c0       	rjmp	.+56     	; 0x349e <TIMER1_init+0x88>
	}

	/* If the configured mode is compare mode */
	else if (config_ptr->mode == COMPARE_MODE)
    3466:	e9 81       	ldd	r30, Y+1	; 0x01
    3468:	fa 81       	ldd	r31, Y+2	; 0x02
    346a:	80 81       	ld	r24, Z
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	b9 f4       	brne	.+46     	; 0x349e <TIMER1_init+0x88>
	{
		/* Set the Compare value as configured */
		OCR1A = config_ptr->compare_value;
    3470:	aa e4       	ldi	r26, 0x4A	; 74
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e9 81       	ldd	r30, Y+1	; 0x01
    3476:	fa 81       	ldd	r31, Y+2	; 0x02
    3478:	84 81       	ldd	r24, Z+4	; 0x04
    347a:	95 81       	ldd	r25, Z+5	; 0x05
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	9c 93       	st	X, r25
    3480:	8e 93       	st	-X, r24

		/* Set the mode of the timer to (CTC mode number 4) */
		SET_BIT(TCCR1B, WGM12);
    3482:	ae e4       	ldi	r26, 0x4E	; 78
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	ee e4       	ldi	r30, 0x4E	; 78
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	88 60       	ori	r24, 0x08	; 8
    348e:	8c 93       	st	X, r24

		/* Enable Timer1 Compare A Interrupt */
		SET_BIT(TIMSK, OCIE1A);
    3490:	a9 e5       	ldi	r26, 0x59	; 89
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	e9 e5       	ldi	r30, 0x59	; 89
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	80 61       	ori	r24, 0x10	; 16
    349c:	8c 93       	st	X, r24
	/*
	 * Configure timer control register TCCR1B
	 * Set the prescaler as configured.
	 * Prescaler bits CS10, CS11, CS12.
	 */
	TCCR1B = (TCCR1B & 0xF8)|(config_ptr->prescaler & 0x07);
    349e:	ae e4       	ldi	r26, 0x4E	; 78
    34a0:	b0 e0       	ldi	r27, 0x00	; 0
    34a2:	ee e4       	ldi	r30, 0x4E	; 78
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
    34a8:	98 2f       	mov	r25, r24
    34aa:	98 7f       	andi	r25, 0xF8	; 248
    34ac:	e9 81       	ldd	r30, Y+1	; 0x01
    34ae:	fa 81       	ldd	r31, Y+2	; 0x02
    34b0:	81 81       	ldd	r24, Z+1	; 0x01
    34b2:	87 70       	andi	r24, 0x07	; 7
    34b4:	89 2b       	or	r24, r25
    34b6:	8c 93       	st	X, r24
}
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <TIMER1_deinit>:

/*
 * Description: Function to disable & stop Timer1.
 */
void TIMER1_deinit(void)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers Turn off the timer clock */
	TCNT1  = 0;
    34ca:	ec e4       	ldi	r30, 0x4C	; 76
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	11 82       	std	Z+1, r1	; 0x01
    34d0:	10 82       	st	Z, r1
	OCR1A  = 0;
    34d2:	ea e4       	ldi	r30, 0x4A	; 74
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	11 82       	std	Z+1, r1	; 0x01
    34d8:	10 82       	st	Z, r1
	TCCR1A = 0;
    34da:	ef e4       	ldi	r30, 0x4F	; 79
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	10 82       	st	Z, r1
	TCCR1B = 0;
    34e0:	ee e4       	ldi	r30, 0x4E	; 78
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	10 82       	st	Z, r1

	/* Disable COMPARE A interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
    34e6:	a9 e5       	ldi	r26, 0x59	; 89
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e9 e5       	ldi	r30, 0x59	; 89
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8f 7e       	andi	r24, 0xEF	; 239
    34f2:	8c 93       	st	X, r24

	/* Disable OVERFLOW interrupt */
	CLEAR_BIT(TIMSK, TOIE1);
    34f4:	a9 e5       	ldi	r26, 0x59	; 89
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e9 e5       	ldi	r30, 0x59	; 89
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8b 7f       	andi	r24, 0xFB	; 251
    3500:	8c 93       	st	X, r24
}
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <TIMER1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER1_setCallBack(void (*ptr_func)(void))
{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	00 d0       	rcall	.+0      	; 0x350e <TIMER1_setCallBack+0x6>
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	9a 83       	std	Y+2, r25	; 0x02
    3514:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_CallBackFunction = (void*) ptr_func;
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	9a 81       	ldd	r25, Y+2	; 0x02
    351a:	90 93 79 02 	sts	0x0279, r25
    351e:	80 93 78 02 	sts	0x0278, r24
}
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	00 d0       	rcall	.+0      	; 0x3532 <UART_init+0x6>
    3532:	00 d0       	rcall	.+0      	; 0x3534 <UART_init+0x8>
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubbr;

	UCSRA = (1<<U2X); /* U2X = 1 for double transmission speed */
    353c:	eb e2       	ldi	r30, 0x2B	; 43
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	82 e0       	ldi	r24, 0x02	; 2
    3542:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN)|(1<<TXEN);
    3544:	ea e2       	ldi	r30, 0x2A	; 42
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	88 e1       	ldi	r24, 0x18	; 24
    354a:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    354c:	e0 e4       	ldi	r30, 0x40	; 64
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 e8       	ldi	r24, 0x80	; 128
    3552:	80 83       	st	Z, r24

	/* Set the parity bits (UPM1:0) based on the configuration */
	UCSRC = (UCSRC & 0xCF) | ((config_ptr->parity & 0x03) << 4);
    3554:	a0 e4       	ldi	r26, 0x40	; 64
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e0 e4       	ldi	r30, 0x40	; 64
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	28 2f       	mov	r18, r24
    3560:	2f 7c       	andi	r18, 0xCF	; 207
    3562:	eb 81       	ldd	r30, Y+3	; 0x03
    3564:	fc 81       	ldd	r31, Y+4	; 0x04
    3566:	80 81       	ld	r24, Z
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	83 70       	andi	r24, 0x03	; 3
    356e:	90 70       	andi	r25, 0x00	; 0
    3570:	82 95       	swap	r24
    3572:	92 95       	swap	r25
    3574:	90 7f       	andi	r25, 0xF0	; 240
    3576:	98 27       	eor	r25, r24
    3578:	80 7f       	andi	r24, 0xF0	; 240
    357a:	98 27       	eor	r25, r24
    357c:	82 2b       	or	r24, r18
    357e:	8c 93       	st	X, r24

	/* Set the stop bit (USBS) based on the configuration */
	if (config_ptr->stop_bit)
    3580:	eb 81       	ldd	r30, Y+3	; 0x03
    3582:	fc 81       	ldd	r31, Y+4	; 0x04
    3584:	81 81       	ldd	r24, Z+1	; 0x01
    3586:	88 23       	and	r24, r24
    3588:	41 f0       	breq	.+16     	; 0x359a <UART_init+0x6e>
	{
		UCSRC |= (1<<USBS); /* Two stop bits */
    358a:	a0 e4       	ldi	r26, 0x40	; 64
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e0 e4       	ldi	r30, 0x40	; 64
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	88 60       	ori	r24, 0x08	; 8
    3596:	8c 93       	st	X, r24
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <UART_init+0x7c>
	}
	else
	{
		UCSRC &= ~(1<<USBS); /* One stop bit */
    359a:	a0 e4       	ldi	r26, 0x40	; 64
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e0 e4       	ldi	r30, 0x40	; 64
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	87 7f       	andi	r24, 0xF7	; 247
    35a6:	8c 93       	st	X, r24
	}

	/* Set the data size bits (UCSZ1:0) based on the configuration */
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->data_size & 0x03) << 1);
    35a8:	a0 e4       	ldi	r26, 0x40	; 64
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e0 e4       	ldi	r30, 0x40	; 64
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	28 2f       	mov	r18, r24
    35b4:	29 7f       	andi	r18, 0xF9	; 249
    35b6:	eb 81       	ldd	r30, Y+3	; 0x03
    35b8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	83 70       	andi	r24, 0x03	; 3
    35c2:	90 70       	andi	r25, 0x00	; 0
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	82 2b       	or	r24, r18
    35ca:	8c 93       	st	X, r24

	/* calculating the 12 bit number baud rate */
	ubbr = (uint16) (((float)(F_CPU)/(8 * config_ptr->baud_rate)) - 1);
    35cc:	eb 81       	ldd	r30, Y+3	; 0x03
    35ce:	fc 81       	ldd	r31, Y+4	; 0x04
    35d0:	83 81       	ldd	r24, Z+3	; 0x03
    35d2:	94 81       	ldd	r25, Z+4	; 0x04
    35d4:	a5 81       	ldd	r26, Z+5	; 0x05
    35d6:	b6 81       	ldd	r27, Z+6	; 0x06
    35d8:	88 0f       	add	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	aa 1f       	adc	r26, r26
    35de:	bb 1f       	adc	r27, r27
    35e0:	88 0f       	add	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	aa 1f       	adc	r26, r26
    35e6:	bb 1f       	adc	r27, r27
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	aa 1f       	adc	r26, r26
    35ee:	bb 1f       	adc	r27, r27
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    35f8:	9b 01       	movw	r18, r22
    35fa:	ac 01       	movw	r20, r24
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	74 e2       	ldi	r23, 0x24	; 36
    3600:	84 ef       	ldi	r24, 0xF4	; 244
    3602:	9a e4       	ldi	r25, 0x4A	; 74
    3604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e8       	ldi	r20, 0x80	; 128
    3616:	5f e3       	ldi	r21, 0x3F	; 63
    3618:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	bc 01       	movw	r22, r24
    3622:	cd 01       	movw	r24, r26
    3624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	/* URSEL = 0  The URSEL must be one when writing the UCSRC */
	UBRRH = ubbr>>8;
    3630:	e0 e4       	ldi	r30, 0x40	; 64
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	89 2f       	mov	r24, r25
    363a:	99 27       	eor	r25, r25
    363c:	80 83       	st	Z, r24
	UBRRL = ubbr;
    363e:	e9 e2       	ldi	r30, 0x29	; 41
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	80 83       	st	Z, r24
}
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	0f 92       	push	r0
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    3660:	eb e2       	ldi	r30, 0x2B	; 43
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	88 2f       	mov	r24, r24
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	80 72       	andi	r24, 0x20	; 32
    366c:	90 70       	andi	r25, 0x00	; 0
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	b9 f3       	breq	.-18     	; 0x3660 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3672:	ec e2       	ldi	r30, 0x2C	; 44
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	80 83       	st	Z, r24
}
    367a:	0f 90       	pop	r0
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    368a:	eb e2       	ldi	r30, 0x2B	; 43
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	88 23       	and	r24, r24
    3692:	dc f7       	brge	.-10     	; 0x368a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3694:	ec e2       	ldi	r30, 0x2C	; 44
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	80 81       	ld	r24, Z
}
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <UART_sendString+0x6>
    36a6:	0f 92       	push	r0
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	9b 83       	std	Y+3, r25	; 0x03
    36ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    36b0:	19 82       	std	Y+1, r1	; 0x01
    36b2:	0e c0       	rjmp	.+28     	; 0x36d0 <UART_sendString+0x30>

	/* Loop until the end of the string */
	while(Str[i] != '\0')
	{
		/* Send each character at a time */
		UART_sendByte(Str[i]);
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	9b 81       	ldd	r25, Y+3	; 0x03
    36be:	fc 01       	movw	r30, r24
    36c0:	e2 0f       	add	r30, r18
    36c2:	f3 1f       	adc	r31, r19
    36c4:	80 81       	ld	r24, Z
    36c6:	0e 94 2a 1b 	call	0x3654	; 0x3654 <UART_sendByte>
		i++;
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Loop until the end of the string */
	while(Str[i] != '\0')
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	9b 81       	ldd	r25, Y+3	; 0x03
    36da:	fc 01       	movw	r30, r24
    36dc:	e2 0f       	add	r30, r18
    36de:	f3 1f       	adc	r31, r19
    36e0:	80 81       	ld	r24, Z
    36e2:	88 23       	and	r24, r24
    36e4:	39 f7       	brne	.-50     	; 0x36b4 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}

	/* Send the last STRING_END SYMBOL*/
	UART_sendByte(STRING_END);
    36e6:	80 e4       	ldi	r24, 0x40	; 64
    36e8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <UART_sendByte>
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the symbol in the header file  through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <UART_receiveString+0xa>
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	9b 83       	std	Y+3, r25	; 0x03
    370a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    370c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the STRING_END symbol */
	do
	{
		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	9b 81       	ldd	r25, Y+3	; 0x03
    3718:	8c 01       	movw	r16, r24
    371a:	02 0f       	add	r16, r18
    371c:	13 1f       	adc	r17, r19
    371e:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    3722:	f8 01       	movw	r30, r16
    3724:	80 83       	st	Z, r24
		i++;
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	89 83       	std	Y+1, r24	; 0x01

		/* Check if the last received byte is the STRING_END symbol*/
	}while(Str[i - 1] != STRING_END);
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	88 2f       	mov	r24, r24
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9c 01       	movw	r18, r24
    3734:	21 50       	subi	r18, 0x01	; 1
    3736:	30 40       	sbci	r19, 0x00	; 0
    3738:	8a 81       	ldd	r24, Y+2	; 0x02
    373a:	9b 81       	ldd	r25, Y+3	; 0x03
    373c:	fc 01       	movw	r30, r24
    373e:	e2 0f       	add	r30, r18
    3740:	f3 1f       	adc	r31, r19
    3742:	80 81       	ld	r24, Z
    3744:	80 34       	cpi	r24, 0x40	; 64
    3746:	19 f7       	brne	.-58     	; 0x370e <UART_receiveString+0x16>

	/* After receiving the whole string plus the STRING_END symbol, replace this symbol with '\0' */
	Str[i - 1] = '\0';
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	88 2f       	mov	r24, r24
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	9c 01       	movw	r18, r24
    3750:	21 50       	subi	r18, 0x01	; 1
    3752:	30 40       	sbci	r19, 0x00	; 0
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	9b 81       	ldd	r25, Y+3	; 0x03
    3758:	fc 01       	movw	r30, r24
    375a:	e2 0f       	add	r30, r18
    375c:	f3 1f       	adc	r31, r19
    375e:	10 82       	st	Z, r1
}
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <UART_sendData>:
/*
 * Description :
 * Send the required Array of data through UART to the other UART device.
 */
void UART_sendData(const uint8 *arr, uint8 arr_size)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <UART_sendData+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <UART_sendData+0x8>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9b 83       	std	Y+3, r25	; 0x03
    377e:	8a 83       	std	Y+2, r24	; 0x02
    3780:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    3782:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    3784:	19 82       	std	Y+1, r1	; 0x01
    3786:	0e c0       	rjmp	.+28     	; 0x37a4 <UART_sendData+0x34>
	{
		/* Send each Byte at a time */
		UART_sendByte(arr[i]);
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	fc 01       	movw	r30, r24
    3794:	e2 0f       	add	r30, r18
    3796:	f3 1f       	adc	r31, r19
    3798:	80 81       	ld	r24, Z
    379a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <UART_sendByte>
void UART_sendData(const uint8 *arr, uint8 arr_size)
{
	uint8 i = 0;

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	8f 5f       	subi	r24, 0xFF	; 255
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	99 81       	ldd	r25, Y+1	; 0x01
    37a6:	8c 81       	ldd	r24, Y+4	; 0x04
    37a8:	98 17       	cp	r25, r24
    37aa:	70 f3       	brcs	.-36     	; 0x3788 <UART_sendData+0x18>
	{
		/* Send each Byte at a time */
		UART_sendByte(arr[i]);
	}
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	cf 91       	pop	r28
    37b6:	df 91       	pop	r29
    37b8:	08 95       	ret

000037ba <UART_receiveData>:
/*
 * Description :
 * Receive the required Array of data through UART to the other UART device.
 */
void UART_receiveData(uint8 *arr, uint8 arr_size)
{
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <UART_receiveData+0xa>
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <UART_receiveData+0xc>
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	9b 83       	std	Y+3, r25	; 0x03
    37cc:	8a 83       	std	Y+2, r24	; 0x02
    37ce:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    37d0:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    37d2:	19 82       	std	Y+1, r1	; 0x01
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <UART_receiveData+0x3a>
	{
		/* receive each Byte at a time */
		arr[i] = UART_recieveByte();
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	8c 01       	movw	r16, r24
    37e2:	02 0f       	add	r16, r18
    37e4:	13 1f       	adc	r17, r19
    37e6:	0e 94 41 1b 	call	0x3682	; 0x3682 <UART_recieveByte>
    37ea:	f8 01       	movw	r30, r16
    37ec:	80 83       	st	Z, r24
void UART_receiveData(uint8 *arr, uint8 arr_size)
{
	uint8 i = 0;

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	8f 5f       	subi	r24, 0xFF	; 255
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	99 81       	ldd	r25, Y+1	; 0x01
    37f6:	8c 81       	ldd	r24, Y+4	; 0x04
    37f8:	98 17       	cp	r25, r24
    37fa:	68 f3       	brcs	.-38     	; 0x37d6 <UART_receiveData+0x1c>
	{
		/* receive each Byte at a time */
		arr[i] = UART_recieveByte();
	}
}
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	08 95       	ret

0000380e <__prologue_saves__>:
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ca 1b       	sub	r28, r26
    3838:	db 0b       	sbc	r29, r27
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	09 94       	ijmp

00003846 <__epilogue_restores__>:
    3846:	2a 88       	ldd	r2, Y+18	; 0x12
    3848:	39 88       	ldd	r3, Y+17	; 0x11
    384a:	48 88       	ldd	r4, Y+16	; 0x10
    384c:	5f 84       	ldd	r5, Y+15	; 0x0f
    384e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3850:	7d 84       	ldd	r7, Y+13	; 0x0d
    3852:	8c 84       	ldd	r8, Y+12	; 0x0c
    3854:	9b 84       	ldd	r9, Y+11	; 0x0b
    3856:	aa 84       	ldd	r10, Y+10	; 0x0a
    3858:	b9 84       	ldd	r11, Y+9	; 0x09
    385a:	c8 84       	ldd	r12, Y+8	; 0x08
    385c:	df 80       	ldd	r13, Y+7	; 0x07
    385e:	ee 80       	ldd	r14, Y+6	; 0x06
    3860:	fd 80       	ldd	r15, Y+5	; 0x05
    3862:	0c 81       	ldd	r16, Y+4	; 0x04
    3864:	1b 81       	ldd	r17, Y+3	; 0x03
    3866:	aa 81       	ldd	r26, Y+2	; 0x02
    3868:	b9 81       	ldd	r27, Y+1	; 0x01
    386a:	ce 0f       	add	r28, r30
    386c:	d1 1d       	adc	r29, r1
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	ed 01       	movw	r28, r26
    387a:	08 95       	ret

0000387c <itoa>:
    387c:	fb 01       	movw	r30, r22
    387e:	9f 01       	movw	r18, r30
    3880:	e8 94       	clt
    3882:	42 30       	cpi	r20, 0x02	; 2
    3884:	c4 f0       	brlt	.+48     	; 0x38b6 <itoa+0x3a>
    3886:	45 32       	cpi	r20, 0x25	; 37
    3888:	b4 f4       	brge	.+44     	; 0x38b6 <itoa+0x3a>
    388a:	4a 30       	cpi	r20, 0x0A	; 10
    388c:	29 f4       	brne	.+10     	; 0x3898 <itoa+0x1c>
    388e:	97 fb       	bst	r25, 7
    3890:	1e f4       	brtc	.+6      	; 0x3898 <itoa+0x1c>
    3892:	90 95       	com	r25
    3894:	81 95       	neg	r24
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	64 2f       	mov	r22, r20
    389a:	77 27       	eor	r23, r23
    389c:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodhi4>
    38a0:	80 5d       	subi	r24, 0xD0	; 208
    38a2:	8a 33       	cpi	r24, 0x3A	; 58
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <itoa+0x2c>
    38a6:	89 5d       	subi	r24, 0xD9	; 217
    38a8:	81 93       	st	Z+, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	a1 f7       	brne	.-24     	; 0x3898 <itoa+0x1c>
    38b0:	16 f4       	brtc	.+4      	; 0x38b6 <itoa+0x3a>
    38b2:	5d e2       	ldi	r21, 0x2D	; 45
    38b4:	51 93       	st	Z+, r21
    38b6:	10 82       	st	Z, r1
    38b8:	c9 01       	movw	r24, r18
    38ba:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <strrev>

000038be <strrev>:
    38be:	dc 01       	movw	r26, r24
    38c0:	fc 01       	movw	r30, r24
    38c2:	67 2f       	mov	r22, r23
    38c4:	71 91       	ld	r23, Z+
    38c6:	77 23       	and	r23, r23
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <strrev+0x4>
    38ca:	32 97       	sbiw	r30, 0x02	; 2
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <strrev+0x18>
    38ce:	7c 91       	ld	r23, X
    38d0:	6d 93       	st	X+, r22
    38d2:	70 83       	st	Z, r23
    38d4:	62 91       	ld	r22, -Z
    38d6:	ae 17       	cp	r26, r30
    38d8:	bf 07       	cpc	r27, r31
    38da:	c8 f3       	brcs	.-14     	; 0x38ce <strrev+0x10>
    38dc:	08 95       	ret

000038de <__udivmodhi4>:
    38de:	aa 1b       	sub	r26, r26
    38e0:	bb 1b       	sub	r27, r27
    38e2:	51 e1       	ldi	r21, 0x11	; 17
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <__udivmodhi4_ep>

000038e6 <__udivmodhi4_loop>:
    38e6:	aa 1f       	adc	r26, r26
    38e8:	bb 1f       	adc	r27, r27
    38ea:	a6 17       	cp	r26, r22
    38ec:	b7 07       	cpc	r27, r23
    38ee:	10 f0       	brcs	.+4      	; 0x38f4 <__udivmodhi4_ep>
    38f0:	a6 1b       	sub	r26, r22
    38f2:	b7 0b       	sbc	r27, r23

000038f4 <__udivmodhi4_ep>:
    38f4:	88 1f       	adc	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	5a 95       	dec	r21
    38fa:	a9 f7       	brne	.-22     	; 0x38e6 <__udivmodhi4_loop>
    38fc:	80 95       	com	r24
    38fe:	90 95       	com	r25
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	08 95       	ret

00003906 <_exit>:
    3906:	f8 94       	cli

00003908 <__stop_program>:
    3908:	ff cf       	rjmp	.-2      	; 0x3908 <__stop_program>
