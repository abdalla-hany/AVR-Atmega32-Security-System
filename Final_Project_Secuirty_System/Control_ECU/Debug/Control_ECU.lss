
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002688  0000271c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080017a  0080017a  00002836  2**0
                  ALLOC
  3 .stab         00002b2c  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000153e  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000068a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ba52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 37 13 	jmp	0x266e	; 0x266e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 */

#include "control_functions.h" /* Include the header file for control-related functions */

int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <main+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <main+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	/* Local Variable declarations */
	uint8 response, resulte, password_indicator;

	/* Initialize system functions */
	Init_Function();
     e3c:	0e 94 95 07 	call	0xf2a	; 0xf2a <Init_Function>

	/* Check if a password is already set in the system */
	password_indicator = Find_Password();
     e40:	0e 94 20 08 	call	0x1040	; 0x1040 <Find_Password>
     e44:	89 83       	std	Y+1, r24	; 0x01

	/* Inform the HMI whether a password is found or Not */
	if (password_indicator == PASSWORD_FOUND)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	81 31       	cpi	r24, 0x11	; 17
     e4a:	21 f4       	brne	.+8      	; 0xe54 <main+0x26>
	{
		send_command(PASSWORD_FOUND);
     e4c:	81 e1       	ldi	r24, 0x11	; 17
     e4e:	0e 94 ff 07 	call	0xffe	; 0xffe <send_command>
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <main+0x2c>
	}
	else
	{
		send_command(NO_PASSWORD_FOUND);
     e54:	80 e1       	ldi	r24, 0x10	; 16
     e56:	0e 94 ff 07 	call	0xffe	; 0xffe <send_command>

	/* Main loop to handle commands from HMI */
	while (1)
	{
		/* Receive command from HMI */
		response = receive_command();
     e5a:	0e 94 10 08 	call	0x1020	; 0x1020 <receive_command>
     e5e:	8b 83       	std	Y+3, r24	; 0x03

		/* Process the received command and get the result */
		switch (response)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3d 83       	std	Y+5, r19	; 0x05
     e68:	2c 83       	std	Y+4, r18	; 0x04
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	81 32       	cpi	r24, 0x21	; 33
     e70:	91 05       	cpc	r25, r1
     e72:	71 f0       	breq	.+28     	; 0xe90 <main+0x62>
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	22 32       	cpi	r18, 0x22	; 34
     e7a:	31 05       	cpc	r19, r1
     e7c:	71 f0       	breq	.+28     	; 0xe9a <main+0x6c>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	89 31       	cpi	r24, 0x19	; 25
     e84:	91 05       	cpc	r25, r1
     e86:	69 f4       	brne	.+26     	; 0xea2 <main+0x74>
		{
			/* Handle new password setup */
			case SENDING_PASSWORDS:
				resulte = Receiving_Passwords();
     e88:	0e 94 32 08 	call	0x1064	; 0x1064 <Receiving_Passwords>
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <main+0x74>
				break;

			/* Handle password check for opening the door */
			case CHECKING_PASSWORD_OPEN:
				resulte = Checking_Password(OPEN_DOOR);
     e90:	87 e1       	ldi	r24, 0x17	; 23
     e92:	0e 94 05 09 	call	0x120a	; 0x120a <Checking_Password>
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <main+0x74>
				break;

			/* Handle password change request */
			case CHECKING_PASSWORD_CHANGE:
				resulte = Checking_Password(CHANGING_PASSWORD);
     e9a:	83 e2       	ldi	r24, 0x23	; 35
     e9c:	0e 94 05 09 	call	0x120a	; 0x120a <Checking_Password>
     ea0:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}

		/* Send the result back to the HMI */
		send_command(resulte);
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	0e 94 ff 07 	call	0xffe	; 0xffe <send_command>

		/* Take action based on the result */
		if (resulte == PASSWORD_MATCH_OPEN)
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	84 31       	cpi	r24, 0x14	; 20
     eac:	11 f4       	brne	.+4      	; 0xeb2 <main+0x84>
		{
			Open_Door(); /* Open the door if the password matches */
     eae:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Open_Door>
		}

		/* Activate the alarm after 4 unsuccessful attempts */
		if ((resulte == PASSWORD_UNMATCH_OPEN && g_attempt == MAX_ATTEMPTS) || (resulte == PASSWORD_UNMATCH_CHANGE && g_attempt == MAX_ATTEMPTS))
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	84 32       	cpi	r24, 0x24	; 36
     eb6:	21 f4       	brne	.+8      	; 0xec0 <main+0x92>
     eb8:	80 91 84 01 	lds	r24, 0x0184
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	39 f0       	breq	.+14     	; 0xece <main+0xa0>
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	85 32       	cpi	r24, 0x25	; 37
     ec4:	51 f6       	brne	.-108    	; 0xe5a <main+0x2c>
     ec6:	80 91 84 01 	lds	r24, 0x0184
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	31 f6       	brne	.-116    	; 0xe5a <main+0x2c>
		{
			g_attempt = ZERO_ATTEMPTS; 	/* Reset attempt counter */
     ece:	10 92 84 01 	sts	0x0184, r1
			Alarm();
     ed2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Alarm>
     ed6:	c1 cf       	rjmp	.-126    	; 0xe5a <main+0x2c>

00000ed8 <BUZZER_init>:
/*
 * Description :
 * Function to initialize the buzzer
 */
void BUZZER_init(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	/*  Setup the direction for the buzzer pin */
    GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT); 	/* Set buzzer pin as output */
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_setupPinDirection>

    /* Turn off the buzzer at the beginning */
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW); 				/* Set initial state of buzzer pin to low */
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <BUZZER_on>:
/*
 * Description :
 * Function to turn on the buzzer.
 */
void BUZZER_on (void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	/* Turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <BUZZER_off>:
/*
 * Description :
 * Function to turn off the buzzer.
 */
void BUZZER_off(void)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <Init_Function>:
 *                      Functions  Definitions                                 *
 *******************************************************************************/

/* Function to initialize system components */
void Init_Function (void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	66 97       	sbiw	r28, 0x16	; 22
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
	/* Configuration structures for UART and TWI */
	UART_ConfigType uart_struct = {EVEN_PARITY, ONE_STOP_BIT, EIGHT_BIT, 9600};
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9e 87       	std	Y+14, r25	; 0x0e
     f44:	8d 87       	std	Y+13, r24	; 0x0d
     f46:	ed e6       	ldi	r30, 0x6D	; 109
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	f8 8b       	std	Y+16, r31	; 0x10
     f4c:	ef 87       	std	Y+15, r30	; 0x0f
     f4e:	f7 e0       	ldi	r31, 0x07	; 7
     f50:	f9 8b       	std	Y+17, r31	; 0x11
     f52:	ef 85       	ldd	r30, Y+15	; 0x0f
     f54:	f8 89       	ldd	r31, Y+16	; 0x10
     f56:	00 80       	ld	r0, Z
     f58:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5a:	98 89       	ldd	r25, Y+16	; 0x10
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	98 8b       	std	Y+16, r25	; 0x10
     f60:	8f 87       	std	Y+15, r24	; 0x0f
     f62:	ed 85       	ldd	r30, Y+13	; 0x0d
     f64:	fe 85       	ldd	r31, Y+14	; 0x0e
     f66:	00 82       	st	Z, r0
     f68:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	9e 87       	std	Y+14, r25	; 0x0e
     f70:	8d 87       	std	Y+13, r24	; 0x0d
     f72:	99 89       	ldd	r25, Y+17	; 0x11
     f74:	91 50       	subi	r25, 0x01	; 1
     f76:	99 8b       	std	Y+17, r25	; 0x11
     f78:	e9 89       	ldd	r30, Y+17	; 0x11
     f7a:	ee 23       	and	r30, r30
     f7c:	51 f7       	brne	.-44     	; 0xf52 <Init_Function+0x28>
	TWI_ConfigType twi_struct = {FAST_MODE, CONTROL_ECU_ADDRESS};
     f7e:	ce 01       	movw	r24, r28
     f80:	08 96       	adiw	r24, 0x08	; 8
     f82:	9b 8b       	std	Y+19, r25	; 0x13
     f84:	8a 8b       	std	Y+18, r24	; 0x12
     f86:	e8 e6       	ldi	r30, 0x68	; 104
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	fd 8b       	std	Y+21, r31	; 0x15
     f8c:	ec 8b       	std	Y+20, r30	; 0x14
     f8e:	f5 e0       	ldi	r31, 0x05	; 5
     f90:	fe 8b       	std	Y+22, r31	; 0x16
     f92:	ec 89       	ldd	r30, Y+20	; 0x14
     f94:	fd 89       	ldd	r31, Y+21	; 0x15
     f96:	00 80       	ld	r0, Z
     f98:	8c 89       	ldd	r24, Y+20	; 0x14
     f9a:	9d 89       	ldd	r25, Y+21	; 0x15
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	9d 8b       	std	Y+21, r25	; 0x15
     fa0:	8c 8b       	std	Y+20, r24	; 0x14
     fa2:	ea 89       	ldd	r30, Y+18	; 0x12
     fa4:	fb 89       	ldd	r31, Y+19	; 0x13
     fa6:	00 82       	st	Z, r0
     fa8:	8a 89       	ldd	r24, Y+18	; 0x12
     faa:	9b 89       	ldd	r25, Y+19	; 0x13
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	9b 8b       	std	Y+19, r25	; 0x13
     fb0:	8a 8b       	std	Y+18, r24	; 0x12
     fb2:	9e 89       	ldd	r25, Y+22	; 0x16
     fb4:	91 50       	subi	r25, 0x01	; 1
     fb6:	9e 8b       	std	Y+22, r25	; 0x16
     fb8:	ee 89       	ldd	r30, Y+22	; 0x16
     fba:	ee 23       	and	r30, r30
     fbc:	51 f7       	brne	.-44     	; 0xf92 <Init_Function+0x68>

	/* Initialize UART, TWI, DC motor, buzzer, and Timer1 with callback */
	TWI_init(&twi_struct);
     fbe:	ce 01       	movw	r24, r28
     fc0:	08 96       	adiw	r24, 0x08	; 8
     fc2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <TWI_init>
	UART_init(&uart_struct);
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	0e 94 78 11 	call	0x22f0	; 0x22f0 <UART_init>
	DcMotor_init();
     fce:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DcMotor_init>
	BUZZER_init();
     fd2:	0e 94 6c 07 	call	0xed8	; 0xed8 <BUZZER_init>
	TIMER1_setCallBack(Count_Seconds);
     fd6:	86 e8       	ldi	r24, 0x86	; 134
     fd8:	99 e0       	ldi	r25, 0x09	; 9
     fda:	0e 94 66 11 	call	0x22cc	; 0x22cc <TIMER1_setCallBack>

	/* Enable global interrupts */
	SREG |= (1<<7);
     fde:	af e5       	ldi	r26, 0x5F	; 95
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e5       	ldi	r30, 0x5F	; 95
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	8c 93       	st	X, r24
}
     fec:	66 96       	adiw	r28, 0x16	; 22
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <send_command>:

/* Function to send a command via UART */
void send_command(uint8 command)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for readiness and send command */
	while(UART_recieveByte() != READY_TO_RECEVIE);
    100a:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	e1 f7       	brne	.-8      	; 0x100a <send_command+0xc>
	UART_sendByte(command);
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
}
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <receive_command>:

/* Function to receive a command via UART */
uint8 receive_command(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	/* Send readiness signal and receive response */
	uint8 response;
	UART_sendByte(READY_TO_RECEVIE);
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
	response = UART_recieveByte();
    1030:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    1034:	89 83       	std	Y+1, r24	; 0x01
	return response;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <Find_Password>:

/* Function to check if a password is stored in EEPROM */
uint8 Find_Password(void)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	/* Read the password indicator from EEPROM */
	uint8 resulte;
	EEPROM_readByte(PASSWORD_INDICATOR, &resulte);
    104a:	89 e0       	ldi	r24, 0x09	; 9
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	9e 01       	movw	r18, r28
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	b9 01       	movw	r22, r18
    1056:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <EEPROM_readByte>
	return resulte;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <Receiving_Passwords>:

/* Function to handle receiving and validating passwords */
uint8 Receiving_Passwords (void)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	60 97       	sbiw	r28, 0x10	; 16
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
	/* Local variable for loop control */
	uint8 i;

	/* Increment attempt counter and check for max attempts */
	g_attempt++;
    1078:	80 91 84 01 	lds	r24, 0x0184
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 84 01 	sts	0x0184, r24

	if (g_attempt == MAX_ATTEMPTS)
    1082:	80 91 84 01 	lds	r24, 0x0184
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	19 f4       	brne	.+6      	; 0x1090 <Receiving_Passwords+0x2c>
	{
		return PASSWORDS_UNMATCH;
    108a:	83 e1       	ldi	r24, 0x13	; 19
    108c:	88 8b       	std	Y+16, r24	; 0x10
    108e:	b3 c0       	rjmp	.+358    	; 0x11f6 <Receiving_Passwords+0x192>
	}
	else
	{
		/* Receive and compare two passwords */
		UART_sendByte(READY_TO_RECEVIE);
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
		UART_receiveData(g_firstPass, PASSWORD_SIZE);
    1096:	8a e7       	ldi	r24, 0x7A	; 122
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	65 e0       	ldi	r22, 0x05	; 5
    109c:	0e 94 bf 12 	call	0x257e	; 0x257e <UART_receiveData>
		UART_sendByte(READY_TO_RECEVIE);
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
		UART_receiveData(g_secondPass, PASSWORD_SIZE);
    10a6:	8f e7       	ldi	r24, 0x7F	; 127
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	65 e0       	ldi	r22, 0x05	; 5
    10ac:	0e 94 bf 12 	call	0x257e	; 0x257e <UART_receiveData>

		/* Validate passwords and write to EEPROM if they match */
		for(i = 0; i < PASSWORD_SIZE; i++)
    10b0:	1f 86       	std	Y+15, r1	; 0x0f
    10b2:	1b c0       	rjmp	.+54     	; 0x10ea <Receiving_Passwords+0x86>
		{
			if (g_firstPass[i] != g_secondPass[i])
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	fc 01       	movw	r30, r24
    10bc:	e6 58       	subi	r30, 0x86	; 134
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	20 81       	ld	r18, Z
    10c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	fc 01       	movw	r30, r24
    10ca:	e1 58       	subi	r30, 0x81	; 129
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 81       	ld	r24, Z
    10d0:	28 17       	cp	r18, r24
    10d2:	41 f0       	breq	.+16     	; 0x10e4 <Receiving_Passwords+0x80>
			{
				/* Write in the PASSWORD_INDICATOR location in the eeprom that is no password is saved */
				EEPROM_writeByte(PASSWORD_INDICATOR, NO_PASSWORD_FOUND);
    10d4:	89 e0       	ldi	r24, 0x09	; 9
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	60 e1       	ldi	r22, 0x10	; 16
    10da:	0e 94 38 0a 	call	0x1470	; 0x1470 <EEPROM_writeByte>
				return PASSWORDS_UNMATCH;
    10de:	83 e1       	ldi	r24, 0x13	; 19
    10e0:	88 8b       	std	Y+16, r24	; 0x10
    10e2:	89 c0       	rjmp	.+274    	; 0x11f6 <Receiving_Passwords+0x192>
		UART_receiveData(g_firstPass, PASSWORD_SIZE);
		UART_sendByte(READY_TO_RECEVIE);
		UART_receiveData(g_secondPass, PASSWORD_SIZE);

		/* Validate passwords and write to EEPROM if they match */
		for(i = 0; i < PASSWORD_SIZE; i++)
    10e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	8f 87       	std	Y+15, r24	; 0x0f
    10ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ec:	85 30       	cpi	r24, 0x05	; 5
    10ee:	10 f3       	brcs	.-60     	; 0x10b4 <Receiving_Passwords+0x50>
				return PASSWORDS_UNMATCH;
			}
		}

		/* Store the password in the eeprom */
		EEPROM_writeData(PASSWORD_LOCATION, g_firstPass, PASSWORD_SIZE);
    10f0:	2a e7       	ldi	r18, 0x7A	; 122
    10f2:	31 e0       	ldi	r19, 0x01	; 1
    10f4:	81 e1       	ldi	r24, 0x11	; 17
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	b9 01       	movw	r22, r18
    10fa:	45 e0       	ldi	r20, 0x05	; 5
    10fc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <EEPROM_writeData>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e2       	ldi	r26, 0x20	; 32
    1106:	b1 e4       	ldi	r27, 0x41	; 65
    1108:	8b 87       	std	Y+11, r24	; 0x0b
    110a:	9c 87       	std	Y+12, r25	; 0x0c
    110c:	ad 87       	std	Y+13, r26	; 0x0d
    110e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6b 85       	ldd	r22, Y+11	; 0x0b
    1112:	7c 85       	ldd	r23, Y+12	; 0x0c
    1114:	8d 85       	ldd	r24, Y+13	; 0x0d
    1116:	9e 85       	ldd	r25, Y+14	; 0x0e
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a ef       	ldi	r20, 0xFA	; 250
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8f 83       	std	Y+7, r24	; 0x07
    112a:	98 87       	std	Y+8, r25	; 0x08
    112c:	a9 87       	std	Y+9, r26	; 0x09
    112e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <Receiving_Passwords+0xee>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <Receiving_Passwords+0x16c>
	else if (__tmp > 65535)
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <Receiving_Passwords+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6b 85       	ldd	r22, Y+11	; 0x0b
    116c:	7c 85       	ldd	r23, Y+12	; 0x0c
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	9e 85       	ldd	r25, Y+14	; 0x0e
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <Receiving_Passwords+0x14e>
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <Receiving_Passwords+0x13c>
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <Receiving_Passwords+0x130>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <Receiving_Passwords+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <Receiving_Passwords+0x178>
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01

		/* Wait 10 millesec to be able to write to the eeprom again*/
		_delay_ms(10);

		/* Write in the PASSWORD_INDICATOR location in the eeprom that there is a password saved */
		EEPROM_writeByte(PASSWORD_INDICATOR, PASSWORD_FOUND);
    11e4:	89 e0       	ldi	r24, 0x09	; 9
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	61 e1       	ldi	r22, 0x11	; 17
    11ea:	0e 94 38 0a 	call	0x1470	; 0x1470 <EEPROM_writeByte>
		g_attempt = ZERO_ATTEMPTS; /* Reset attempt counter */
    11ee:	10 92 84 01 	sts	0x0184, r1
		return PASSWORDS_MATCH;
    11f2:	82 e1       	ldi	r24, 0x12	; 18
    11f4:	88 8b       	std	Y+16, r24	; 0x10
    11f6:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    11f8:	60 96       	adiw	r28, 0x10	; 16
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Checking_Password>:

/* Function to check the entered password against the stored one */
uint8 Checking_Password(uint8 command)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <Checking_Password+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <Checking_Password+0x8>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	8a 83       	std	Y+2, r24	; 0x02
	/* Local variable for loop control */
	uint8 i;

	/* Increment attempt counter */
	g_attempt++;
    121a:	80 91 84 01 	lds	r24, 0x0184
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	80 93 84 01 	sts	0x0184, r24

	/* Receive entered password*/
	UART_sendByte(READY_TO_RECEVIE);
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
	UART_receiveData(g_firstPass, PASSWORD_SIZE);
    122a:	8a e7       	ldi	r24, 0x7A	; 122
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	65 e0       	ldi	r22, 0x05	; 5
    1230:	0e 94 bf 12 	call	0x257e	; 0x257e <UART_receiveData>

	/* Read stored password from EEPROM */
	EEPROM_readData(PASSWORD_LOCATION, g_secondPass, PASSWORD_SIZE);
    1234:	2f e7       	ldi	r18, 0x7F	; 127
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	81 e1       	ldi	r24, 0x11	; 17
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	b9 01       	movw	r22, r18
    123e:	45 e0       	ldi	r20, 0x05	; 5
    1240:	0e 94 a1 0b 	call	0x1742	; 0x1742 <EEPROM_readData>

	/* Compare entered password against stored one */
	for(i = 0; i < PASSWORD_SIZE; i++)
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <Checking_Password+0x7a>
	{
		if (g_firstPass[i] != g_secondPass[i])
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	fc 01       	movw	r30, r24
    1250:	e6 58       	subi	r30, 0x86	; 134
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	20 81       	ld	r18, Z
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	e1 58       	subi	r30, 0x81	; 129
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	80 81       	ld	r24, Z
    1264:	28 17       	cp	r18, r24
    1266:	59 f0       	breq	.+22     	; 0x127e <Checking_Password+0x74>
		{
			/* Return appropriate mismatch code based on command */
			return (command == OPEN_DOOR) ? PASSWORD_UNMATCH_OPEN : PASSWORD_UNMATCH_CHANGE;
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	87 31       	cpi	r24, 0x17	; 23
    126c:	19 f4       	brne	.+6      	; 0x1274 <Checking_Password+0x6a>
    126e:	84 e2       	ldi	r24, 0x24	; 36
    1270:	8c 83       	std	Y+4, r24	; 0x04
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <Checking_Password+0x6e>
    1274:	85 e2       	ldi	r24, 0x25	; 37
    1276:	8c 83       	std	Y+4, r24	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	10 c0       	rjmp	.+32     	; 0x129e <Checking_Password+0x94>

	/* Read stored password from EEPROM */
	EEPROM_readData(PASSWORD_LOCATION, g_secondPass, PASSWORD_SIZE);

	/* Compare entered password against stored one */
	for(i = 0; i < PASSWORD_SIZE; i++)
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	85 30       	cpi	r24, 0x05	; 5
    1288:	f8 f2       	brcs	.-66     	; 0x1248 <Checking_Password+0x3e>
			return (command == OPEN_DOOR) ? PASSWORD_UNMATCH_OPEN : PASSWORD_UNMATCH_CHANGE;
		}
	}

	/* Return appropriate match code based on command */
	return (command == OPEN_DOOR) ? PASSWORD_MATCH_OPEN : PASSWORD_MATCH_CHANGE;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	87 31       	cpi	r24, 0x17	; 23
    128e:	19 f4       	brne	.+6      	; 0x1296 <Checking_Password+0x8c>
    1290:	84 e1       	ldi	r24, 0x14	; 20
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	02 c0       	rjmp	.+4      	; 0x129a <Checking_Password+0x90>
    1296:	85 e1       	ldi	r24, 0x15	; 21
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <Open_Door>:

/* Function to simulate the door opening and closing process */
void Open_Door (void)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	/* Rotate motor to open, hold, and close the door */
	DcMotor_rotate(MOTOR_CW, FULL_SPEED);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	64 e6       	ldi	r22, 0x64	; 100
    12bc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DcMotor_rotate>
	Timer1_countSeconds(FIFTEEN_SECONDS);
    12c0:	8f e0       	ldi	r24, 0x0F	; 15
    12c2:	0e 94 92 09 	call	0x1324	; 0x1324 <Timer1_countSeconds>

	DcMotor_rotate(MOTOR_OFF, ZERO_SPEED);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DcMotor_rotate>
	Timer1_countSeconds(THREE_SECONDS);
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	0e 94 92 09 	call	0x1324	; 0x1324 <Timer1_countSeconds>

	DcMotor_rotate(MOTOR_CCW, FULL_SPEED);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	64 e6       	ldi	r22, 0x64	; 100
    12d8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DcMotor_rotate>
	Timer1_countSeconds(FIFTEEN_SECONDS);
    12dc:	8f e0       	ldi	r24, 0x0F	; 15
    12de:	0e 94 92 09 	call	0x1324	; 0x1324 <Timer1_countSeconds>

	DcMotor_rotate(MOTOR_OFF, ZERO_SPEED);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DcMotor_rotate>
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <Alarm>:

/* Function to activate the alarm for one minute */
void Alarm (void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    12f8:	0e 94 7d 07 	call	0xefa	; 0xefa <BUZZER_on>
	Timer1_countSeconds(ONE_MINUTE);
    12fc:	8c e3       	ldi	r24, 0x3C	; 60
    12fe:	0e 94 92 09 	call	0x1324	; 0x1324 <Timer1_countSeconds>
	BUZZER_off();
    1302:	0e 94 89 07 	call	0xf12	; 0xf12 <BUZZER_off>
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <Count_Seconds>:

/* Callback function to count seconds using Timer1 */
void Count_Seconds(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    1314:	80 91 85 01 	lds	r24, 0x0185
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 85 01 	sts	0x0185, r24
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <Timer1_countSeconds>:

/* Function to count a specified number of seconds using Timer1 */
void Timer1_countSeconds(uint8 seconds)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	2c 97       	sbiw	r28, 0x0c	; 12
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	8f 83       	std	Y+7, r24	; 0x07
	/* Configure and start Timer1 */
	TIMER1_ConfigType count_sec = {COMPARE_MODE, F_CPU_256, 0, ONE_SECOND};
    133a:	ce 01       	movw	r24, r28
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	99 87       	std	Y+9, r25	; 0x09
    1340:	88 87       	std	Y+8, r24	; 0x08
    1342:	e4 e7       	ldi	r30, 0x74	; 116
    1344:	f1 e0       	ldi	r31, 0x01	; 1
    1346:	fb 87       	std	Y+11, r31	; 0x0b
    1348:	ea 87       	std	Y+10, r30	; 0x0a
    134a:	f6 e0       	ldi	r31, 0x06	; 6
    134c:	fc 87       	std	Y+12, r31	; 0x0c
    134e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1350:	fb 85       	ldd	r31, Y+11	; 0x0b
    1352:	00 80       	ld	r0, Z
    1354:	8a 85       	ldd	r24, Y+10	; 0x0a
    1356:	9b 85       	ldd	r25, Y+11	; 0x0b
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	9b 87       	std	Y+11, r25	; 0x0b
    135c:	8a 87       	std	Y+10, r24	; 0x0a
    135e:	e8 85       	ldd	r30, Y+8	; 0x08
    1360:	f9 85       	ldd	r31, Y+9	; 0x09
    1362:	00 82       	st	Z, r0
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	99 85       	ldd	r25, Y+9	; 0x09
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	99 87       	std	Y+9, r25	; 0x09
    136c:	88 87       	std	Y+8, r24	; 0x08
    136e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1370:	91 50       	subi	r25, 0x01	; 1
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	ec 85       	ldd	r30, Y+12	; 0x0c
    1376:	ee 23       	and	r30, r30
    1378:	51 f7       	brne	.-44     	; 0x134e <Timer1_countSeconds+0x2a>
	TIMER1_init(&count_sec);
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	0e 94 ed 10 	call	0x21da	; 0x21da <TIMER1_init>

	/* Wait for the specified number of seconds */
	while(g_seconds != seconds);
    1382:	90 91 85 01 	lds	r25, 0x0185
    1386:	8f 81       	ldd	r24, Y+7	; 0x07
    1388:	98 17       	cp	r25, r24
    138a:	d9 f7       	brne	.-10     	; 0x1382 <Timer1_countSeconds+0x5e>

	/* Reset seconds counter and stop Timer1 */
	g_seconds = ZERO_SECONDS;
    138c:	10 92 85 01 	sts	0x0185, r1
	TIMER1_deinit();
    1390:	0e 94 43 11 	call	0x2286	; 0x2286 <TIMER1_deinit>
}
    1394:	2c 96       	adiw	r28, 0x0c	; 12
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <DcMotor_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the DC motor */
void DcMotor_init(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    /* Setup motor pins as output */
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN, PIN_OUTPUT);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN + 1, PIN_OUTPUT);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_setupPinDirection>

    /* Set initial state of motor pins to LOW motor off*/
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DcMotor_rotate>:

/* Function to rotate the DC motor based on the specified state and speed */
void DcMotor_rotate(DcMotor_State state, uint8 speed)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DcMotor_rotate+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DcMotor_rotate+0x8>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
    /* Switch based on the motor state */
    switch (state)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	b1 f0       	breq	.+44     	; 0x142c <DcMotor_rotate+0x50>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	f9 f0       	breq	.+62     	; 0x1448 <DcMotor_rotate+0x6c>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	41 f5       	brne	.+80     	; 0x1462 <DcMotor_rotate+0x86>
    {
		case MOTOR_OFF:
			/* Turn off the pwm signal */
			PWM_Timer0_Stop ();
    1412:	0e 94 77 10 	call	0x20ee	; 0x20ee <PWM_Timer0_Stop>

			/* Turn off the motor */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
    142a:	1b c0       	rjmp	.+54     	; 0x1462 <DcMotor_rotate+0x86>
			break;
		case MOTOR_CW:
		    /* Start PWM signal generation with specified speed */
		    PWM_Timer0_Start(speed);
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	0e 94 2f 10 	call	0x205e	; 0x205e <PWM_Timer0_Start>

			/* Rotate the motor clockwise */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_HIGH);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <DcMotor_rotate+0x86>
			break;
		case MOTOR_CCW:
		    /* Start PWM signal generation with specified speed */
		    PWM_Timer0_Start(speed);
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	0e 94 2f 10 	call	0x205e	; 0x205e <PWM_Timer0_Start>

			/* Rotate the motor counter-clockwise */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_HIGH);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_writePin>
    }
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <EEPROM_writeByte>:
 * byte: The data byte to be written.
 *
 * returns: SUCCESS if the operation succeeds, ERROR otherwise.
 */
uint8 EEPROM_writeByte(uint16 memory_address, uint8 byte)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <EEPROM_writeByte+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <EEPROM_writeByte+0x8>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9b 83       	std	Y+3, r25	; 0x03
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	6c 83       	std	Y+4, r22	; 0x04
	/* Variable to hold device address*/
	uint8 device_address;

	/* Send the Start Bit */
	TWI_start();
    1484:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_START)
    1488:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	11 f0       	breq	.+4      	; 0x1494 <EEPROM_writeByte+0x24>
		return ERROR;
    1490:	1d 82       	std	Y+5, r1	; 0x05
    1492:	28 c0       	rjmp	.+80     	; 0x14e4 <EEPROM_writeByte+0x74>
   	 * using bitwise OR.
   	 *								device    memory address
   	 *								address	  most 3 bit
   	 * final format (7bit address) : 1010      a10 a9 a8
	 * */
	device_address = ((uint8)((EEPROM_ADDRESS) << 3 |((memory_address & 0x0700) >> 8)));
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	80 70       	andi	r24, 0x00	; 0
    149a:	97 70       	andi	r25, 0x07	; 7
    149c:	89 2f       	mov	r24, r25
    149e:	99 27       	eor	r25, r25
    14a0:	80 65       	ori	r24, 0x50	; 80
    14a2:	89 83       	std	Y+1, r24	; 0x01

	TWI_sendSlaveAddress(device_address, WRITE);
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14ac:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    14b0:	88 31       	cpi	r24, 0x18	; 24
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <EEPROM_writeByte+0x48>
        return ERROR;
    14b4:	1d 82       	std	Y+5, r1	; 0x05
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <EEPROM_writeByte+0x74>

    /* Send the remaining A7 -> A0 memory location */
    TWI_writeByte((uint8)(memory_address & 0x00FF));
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

    /* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14be:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    14c2:	88 32       	cpi	r24, 0x28	; 40
    14c4:	11 f0       	breq	.+4      	; 0x14ca <EEPROM_writeByte+0x5a>
    	return ERROR;
    14c6:	1d 82       	std	Y+5, r1	; 0x05
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <EEPROM_writeByte+0x74>

    /* write byte to eeprom */
    TWI_writeByte(byte);
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

    /* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14d0:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    14d4:	88 32       	cpi	r24, 0x28	; 40
    14d6:	11 f0       	breq	.+4      	; 0x14dc <EEPROM_writeByte+0x6c>
    	return ERROR;
    14d8:	1d 82       	std	Y+5, r1	; 0x05
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <EEPROM_writeByte+0x74>

    /* Send the Stop Bit */
    TWI_stop();
    14dc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TWI_stop>

    /* Return success as indication of write succeed */
    return SUCCESS;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <EEPROM_readByte>:
 * byte: Pointer to store the read data byte.
 *
 * returns: SUCCESS if the operation succeeds, ERROR otherwise.
 */
uint8 EEPROM_readByte(uint16 memory_address, uint8 *byte)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <EEPROM_readByte+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <EEPROM_readByte+0x8>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <EEPROM_readByte+0xa>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	7d 83       	std	Y+5, r23	; 0x05
    150a:	6c 83       	std	Y+4, r22	; 0x04
	/* Variable to hold device address*/
	uint8 device_address;

	/* Send the Start Bit */
	TWI_start();
    150c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_START)
    1510:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	11 f0       	breq	.+4      	; 0x151c <EEPROM_readByte+0x26>
		return ERROR;
    1518:	1e 82       	std	Y+6, r1	; 0x06
    151a:	3c c0       	rjmp	.+120    	; 0x1594 <EEPROM_readByte+0x9e>
   	 * using bitwise OR.
   	 *								device    memory address
   	 *								address	  most 3 bit
   	 * final format (7bit address) : 1010      a10 a9 a8
	 * */
	device_address = ((uint8)((EEPROM_ADDRESS) << 3 |((memory_address & 0x0700) >> 8)));
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	80 70       	andi	r24, 0x00	; 0
    1522:	97 70       	andi	r25, 0x07	; 7
    1524:	89 2f       	mov	r24, r25
    1526:	99 27       	eor	r25, r25
    1528:	80 65       	ori	r24, 0x50	; 80
    152a:	89 83       	std	Y+1, r24	; 0x01

	TWI_sendSlaveAddress(device_address, WRITE);
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1534:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    1538:	88 31       	cpi	r24, 0x18	; 24
    153a:	11 f0       	breq	.+4      	; 0x1540 <EEPROM_readByte+0x4a>
        return ERROR;
    153c:	1e 82       	std	Y+6, r1	; 0x06
    153e:	2a c0       	rjmp	.+84     	; 0x1594 <EEPROM_readByte+0x9e>

    /* Send the remaining A7 -> A0 memory location */
    TWI_writeByte((uint8)(memory_address & 0x00FF));
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

    /* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1546:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    154a:	88 32       	cpi	r24, 0x28	; 40
    154c:	11 f0       	breq	.+4      	; 0x1552 <EEPROM_readByte+0x5c>
    	return ERROR;
    154e:	1e 82       	std	Y+6, r1	; 0x06
    1550:	21 c0       	rjmp	.+66     	; 0x1594 <EEPROM_readByte+0x9e>

	/* Send repeated Start Bit */
	TWI_start();
    1552:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_REP_START)
    1556:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    155a:	80 31       	cpi	r24, 0x10	; 16
    155c:	11 f0       	breq	.+4      	; 0x1562 <EEPROM_readByte+0x6c>
		return ERROR;
    155e:	1e 82       	std	Y+6, r1	; 0x06
    1560:	19 c0       	rjmp	.+50     	; 0x1594 <EEPROM_readByte+0x9e>

	/* Access the memory location but for read this time */
	TWI_sendSlaveAddress(device_address, READ);
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    156a:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    156e:	80 34       	cpi	r24, 0x40	; 64
    1570:	11 f0       	breq	.+4      	; 0x1576 <EEPROM_readByte+0x80>
        return ERROR;
    1572:	1e 82       	std	Y+6, r1	; 0x06
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <EEPROM_readByte+0x9e>

    *byte = TWI_readByteWithNACK();
    1576:	0e 94 11 10 	call	0x2022	; 0x2022 <TWI_readByteWithNACK>
    157a:	ec 81       	ldd	r30, Y+4	; 0x04
    157c:	fd 81       	ldd	r31, Y+5	; 0x05
    157e:	80 83       	st	Z, r24

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1580:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    1584:	88 35       	cpi	r24, 0x58	; 88
    1586:	11 f0       	breq	.+4      	; 0x158c <EEPROM_readByte+0x96>
        return ERROR;
    1588:	1e 82       	std	Y+6, r1	; 0x06
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <EEPROM_readByte+0x9e>

    /* Send the Stop Bit */
    TWI_stop();
    158c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TWI_stop>

    /* Return success as indication of write succeed */
    return SUCCESS;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	8e 83       	std	Y+6, r24	; 0x06
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1596:	26 96       	adiw	r28, 0x06	; 6
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <EEPROM_writeData>:
 * data_size: The size of the data array.
 *
 * returns: SUCCESS if the operation succeeds, ERROR otherwise.
 */
uint8 EEPROM_writeData(uint16 memory_address, uint8* arr_data, uint8 data_size)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	66 97       	sbiw	r28, 0x16	; 22
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	9a 8b       	std	Y+18, r25	; 0x12
    15be:	89 8b       	std	Y+17, r24	; 0x11
    15c0:	7c 8b       	std	Y+20, r23	; 0x14
    15c2:	6b 8b       	std	Y+19, r22	; 0x13
    15c4:	4d 8b       	std	Y+21, r20	; 0x15
	/* Variable to hold device address*/
	uint8 device_address, i;

	/* Send the Start Bit */
	TWI_start();
    15c6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_START)
    15ca:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    15ce:	88 30       	cpi	r24, 0x08	; 8
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_writeData+0x2e>
		return ERROR;
    15d2:	1e 8a       	std	Y+22, r1	; 0x16
    15d4:	ac c0       	rjmp	.+344    	; 0x172e <EEPROM_writeData+0x186>
   	 * using bitwise OR.
   	 *								device    memory address
   	 *								address	  most 3 bit
   	 * final format (7bit address) : 1010      a10 a9 a8
	 * */
	device_address = ((uint8)((EEPROM_ADDRESS) << 3 |((memory_address & 0x0700) >> 8)));
    15d6:	89 89       	ldd	r24, Y+17	; 0x11
    15d8:	9a 89       	ldd	r25, Y+18	; 0x12
    15da:	80 70       	andi	r24, 0x00	; 0
    15dc:	97 70       	andi	r25, 0x07	; 7
    15de:	89 2f       	mov	r24, r25
    15e0:	99 27       	eor	r25, r25
    15e2:	80 65       	ori	r24, 0x50	; 80
    15e4:	88 8b       	std	Y+16, r24	; 0x10

	TWI_sendSlaveAddress(device_address, WRITE);
    15e6:	88 89       	ldd	r24, Y+16	; 0x10
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15ee:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    15f2:	88 31       	cpi	r24, 0x18	; 24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_writeData+0x52>
        return ERROR;
    15f6:	1e 8a       	std	Y+22, r1	; 0x16
    15f8:	9a c0       	rjmp	.+308    	; 0x172e <EEPROM_writeData+0x186>

    /* Send the remaining A7 -> A0 memory location */
    TWI_writeByte((uint8)(memory_address & 0x00FF));
    15fa:	89 89       	ldd	r24, Y+17	; 0x11
    15fc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

    /* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1600:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    1604:	88 32       	cpi	r24, 0x28	; 40
    1606:	11 f0       	breq	.+4      	; 0x160c <EEPROM_writeData+0x64>
    	return ERROR;
    1608:	1e 8a       	std	Y+22, r1	; 0x16
    160a:	91 c0       	rjmp	.+290    	; 0x172e <EEPROM_writeData+0x186>

    /*
     * Loop through the hole array of data and write each one in the eeprom.
     * the pointer in the eeprom increase automatically after each write operation.
     *  */
    for (i = 0; i < data_size; i++)
    160c:	1f 86       	std	Y+15, r1	; 0x0f
    160e:	86 c0       	rjmp	.+268    	; 0x171c <EEPROM_writeData+0x174>
    {
		/* write byte to eeprom */
		TWI_writeByte(arr_data[i]);
    1610:	8f 85       	ldd	r24, Y+15	; 0x0f
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8b 89       	ldd	r24, Y+19	; 0x13
    1618:	9c 89       	ldd	r25, Y+20	; 0x14
    161a:	fc 01       	movw	r30, r24
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	80 81       	ld	r24, Z
    1622:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

		/* If the Status of the TWI not as Required return error */
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1626:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    162a:	88 32       	cpi	r24, 0x28	; 40
    162c:	11 f0       	breq	.+4      	; 0x1632 <EEPROM_writeData+0x8a>
			return ERROR;
    162e:	1e 8a       	std	Y+22, r1	; 0x16
    1630:	7e c0       	rjmp	.+252    	; 0x172e <EEPROM_writeData+0x186>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e2       	ldi	r26, 0x20	; 32
    1638:	b1 e4       	ldi	r27, 0x41	; 65
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	ad 87       	std	Y+13, r26	; 0x0d
    1640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8f 83       	std	Y+7, r24	; 0x07
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	a9 87       	std	Y+9, r26	; 0x09
    1660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <EEPROM_writeData+0xdc>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <EEPROM_writeData+0x15a>
	else if (__tmp > 65535)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <EEPROM_writeData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <EEPROM_writeData+0x13c>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 83       	std	Y+4, r25	; 0x04
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <EEPROM_writeData+0x12a>
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <EEPROM_writeData+0x11e>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <EEPROM_writeData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <EEPROM_writeData+0x166>
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01

    /*
     * Loop through the hole array of data and write each one in the eeprom.
     * the pointer in the eeprom increase automatically after each write operation.
     *  */
    for (i = 0; i < data_size; i++)
    1716:	8f 85       	ldd	r24, Y+15	; 0x0f
    1718:	8f 5f       	subi	r24, 0xFF	; 255
    171a:	8f 87       	std	Y+15, r24	; 0x0f
    171c:	9f 85       	ldd	r25, Y+15	; 0x0f
    171e:	8d 89       	ldd	r24, Y+21	; 0x15
    1720:	98 17       	cp	r25, r24
    1722:	08 f4       	brcc	.+2      	; 0x1726 <EEPROM_writeData+0x17e>
    1724:	75 cf       	rjmp	.-278    	; 0x1610 <EEPROM_writeData+0x68>
        /* Delay 10 ms for the write time */
		_delay_ms(10);
    }

    /* Send the Stop Bit */
    TWI_stop();
    1726:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TWI_stop>

    /* Return success as indication of write succeed */
    return SUCCESS;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	8e 8b       	std	Y+22, r24	; 0x16
    172e:	8e 89       	ldd	r24, Y+22	; 0x16
}
    1730:	66 96       	adiw	r28, 0x16	; 22
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <EEPROM_readData>:
 * data_size: The size of the data array to be read.
 *
 * returns: SUCCESS if the operation succeeds, ERROR otherwise.
 */
uint8 EEPROM_readData(uint16 memory_address, uint8* arr_data, uint8 data_size)
{
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	28 97       	sbiw	r28, 0x08	; 8
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	9c 83       	std	Y+4, r25	; 0x04
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	7e 83       	std	Y+6, r23	; 0x06
    1760:	6d 83       	std	Y+5, r22	; 0x05
    1762:	4f 83       	std	Y+7, r20	; 0x07
	/* Variable to hold device address*/
	uint8 device_address, i;

	/* Send the Start Bit */
	TWI_start();
    1764:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_START)
    1768:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	11 f0       	breq	.+4      	; 0x1774 <EEPROM_readData+0x32>
		return ERROR;
    1770:	18 86       	std	Y+8, r1	; 0x08
    1772:	64 c0       	rjmp	.+200    	; 0x183c <EEPROM_readData+0xfa>
   	 * using bitwise OR.
   	 *								device    memory address
   	 *								address	  most 3 bit
   	 * final format (7bit address) : 1010      a10 a9 a8
	 * */
	device_address = ((uint8)((EEPROM_ADDRESS) << 3 |((memory_address & 0x0700) >> 8)));
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	80 70       	andi	r24, 0x00	; 0
    177a:	97 70       	andi	r25, 0x07	; 7
    177c:	89 2f       	mov	r24, r25
    177e:	99 27       	eor	r25, r25
    1780:	80 65       	ori	r24, 0x50	; 80
    1782:	8a 83       	std	Y+2, r24	; 0x02

	TWI_sendSlaveAddress(device_address, WRITE);
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    178c:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    1790:	88 31       	cpi	r24, 0x18	; 24
    1792:	11 f0       	breq	.+4      	; 0x1798 <EEPROM_readData+0x56>
        return ERROR;
    1794:	18 86       	std	Y+8, r1	; 0x08
    1796:	52 c0       	rjmp	.+164    	; 0x183c <EEPROM_readData+0xfa>

    /* Send the remaining A7 -> A0 memory location */
    TWI_writeByte((uint8)(memory_address & 0x00FF));
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_writeByte>

    /* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    179e:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    17a2:	88 32       	cpi	r24, 0x28	; 40
    17a4:	11 f0       	breq	.+4      	; 0x17aa <EEPROM_readData+0x68>
    	return ERROR;
    17a6:	18 86       	std	Y+8, r1	; 0x08
    17a8:	49 c0       	rjmp	.+146    	; 0x183c <EEPROM_readData+0xfa>

	/* Send repeated Start Bit */
	TWI_start();
    17aa:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_start>

	/* If the Status of the TWI not as Required return error */
	if(TWI_getStatus() != TWI_REP_START)
    17ae:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    17b2:	80 31       	cpi	r24, 0x10	; 16
    17b4:	11 f0       	breq	.+4      	; 0x17ba <EEPROM_readData+0x78>
		return ERROR;
    17b6:	18 86       	std	Y+8, r1	; 0x08
    17b8:	41 c0       	rjmp	.+130    	; 0x183c <EEPROM_readData+0xfa>

	/* Access the memory location but for read this time */
	TWI_sendSlaveAddress(device_address, READ);
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <TWI_sendSlaveAddress>

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17c2:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    17c6:	80 34       	cpi	r24, 0x40	; 64
    17c8:	11 f0       	breq	.+4      	; 0x17ce <EEPROM_readData+0x8c>
        return ERROR;
    17ca:	18 86       	std	Y+8, r1	; 0x08
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <EEPROM_readData+0xfa>

    /* Loop through the hole data array */
    for (i = 0; i < data_size - 1; i++)
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	15 c0       	rjmp	.+42     	; 0x17fc <EEPROM_readData+0xba>
    {
    	/* Read each byte in the eeprom
    	 * the pointer inside the eeprom increase automatically.
    	 * */
        arr_data[i] = TWI_readByteWithACK();
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	8c 01       	movw	r16, r24
    17de:	02 0f       	add	r16, r18
    17e0:	13 1f       	adc	r17, r19
    17e2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TWI_readByteWithACK>
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 83       	st	Z, r24

    	/* If the Status of the TWI not as Required return error */
        if (TWI_getStatus() != TWI_MR_DATA_ACK)
    17ea:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    17ee:	80 35       	cpi	r24, 0x50	; 80
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <EEPROM_readData+0xb4>
            return ERROR;
    17f2:	18 86       	std	Y+8, r1	; 0x08
    17f4:	23 c0       	rjmp	.+70     	; 0x183c <EEPROM_readData+0xfa>
	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    /* Loop through the hole data array */
    for (i = 0; i < data_size - 1; i++)
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8f 81       	ldd	r24, Y+7	; 0x07
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	0c f3       	brlt	.-62     	; 0x17d2 <EEPROM_readData+0x90>
        if (TWI_getStatus() != TWI_MR_DATA_ACK)
            return ERROR;
    }

    /* Read the last byte in the eeprom with NACK to indicate the last byte */
    arr_data[i] = TWI_readByteWithNACK();
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	8c 01       	movw	r16, r24
    181c:	02 0f       	add	r16, r18
    181e:	13 1f       	adc	r17, r19
    1820:	0e 94 11 10 	call	0x2022	; 0x2022 <TWI_readByteWithNACK>
    1824:	f8 01       	movw	r30, r16
    1826:	80 83       	st	Z, r24

	/* If the Status of the TWI not as Required return error */
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1828:	0e 94 24 10 	call	0x2048	; 0x2048 <TWI_getStatus>
    182c:	88 35       	cpi	r24, 0x58	; 88
    182e:	11 f0       	breq	.+4      	; 0x1834 <EEPROM_readData+0xf2>
        return ERROR;
    1830:	18 86       	std	Y+8, r1	; 0x08
    1832:	04 c0       	rjmp	.+8      	; 0x183c <EEPROM_readData+0xfa>

    /* Send the Stop Bit */
    TWI_stop();
    1834:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TWI_stop>

    /* Return success as indication of write succeed */
    return SUCCESS;
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	f8 87       	std	Y+8, r31	; 0x08
    183c:	88 85       	ldd	r24, Y+8	; 0x08
}
    183e:	28 96       	adiw	r28, 0x08	; 8
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	08 95       	ret

00001854 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <GPIO_setupPinDirection+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_setupPinDirection+0x8>
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
    1866:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <GPIO_setupPinDirection+0x1c>
    186e:	d5 c0       	rjmp	.+426    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <GPIO_setupPinDirection+0x24>
    1876:	d1 c0       	rjmp	.+418    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3d 83       	std	Y+5, r19	; 0x05
    1880:	2c 83       	std	Y+4, r18	; 0x04
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_setupPinDirection+0x3a>
    188c:	43 c0       	rjmp	.+134    	; 0x1914 <GPIO_setupPinDirection+0xc0>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	2c f4       	brge	.+10     	; 0x18a2 <GPIO_setupPinDirection+0x4e>
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	71 f0       	breq	.+28     	; 0x18bc <GPIO_setupPinDirection+0x68>
    18a0:	bc c0       	rjmp	.+376    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
    18a2:	2c 81       	ldd	r18, Y+4	; 0x04
    18a4:	3d 81       	ldd	r19, Y+5	; 0x05
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <GPIO_setupPinDirection+0x5a>
    18ac:	5f c0       	rjmp	.+190    	; 0x196c <GPIO_setupPinDirection+0x118>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <GPIO_setupPinDirection+0x66>
    18b8:	85 c0       	rjmp	.+266    	; 0x19c4 <GPIO_setupPinDirection+0x170>
    18ba:	af c0       	rjmp	.+350    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18c2:	aa e3       	ldi	r26, 0x3A	; 58
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ea e3       	ldi	r30, 0x3A	; 58
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_setupPinDirection+0x8c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_setupPinDirection+0x88>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	98 c0       	rjmp	.+304    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18ea:	aa e3       	ldi	r26, 0x3A	; 58
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ea e3       	ldi	r30, 0x3A	; 58
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_setupPinDirection+0xb4>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_setupPinDirection+0xb0>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	83 c0       	rjmp	.+262    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	a1 f4       	brne	.+40     	; 0x1942 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    191a:	a7 e3       	ldi	r26, 0x37	; 55
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e7 e3       	ldi	r30, 0x37	; 55
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_setupPinDirection+0xe4>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_setupPinDirection+0xe0>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	6c c0       	rjmp	.+216    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1942:	a7 e3       	ldi	r26, 0x37	; 55
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e7 e3       	ldi	r30, 0x37	; 55
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_setupPinDirection+0x10c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_setupPinDirection+0x108>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	57 c0       	rjmp	.+174    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	a1 f4       	brne	.+40     	; 0x199a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1972:	a4 e3       	ldi	r26, 0x34	; 52
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e4 e3       	ldi	r30, 0x34	; 52
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_setupPinDirection+0x13c>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_setupPinDirection+0x138>
    1994:	84 2b       	or	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	40 c0       	rjmp	.+128    	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    199a:	a4 e3       	ldi	r26, 0x34	; 52
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e4 e3       	ldi	r30, 0x34	; 52
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_setupPinDirection+0x164>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_setupPinDirection+0x160>
    19bc:	80 95       	com	r24
    19be:	84 23       	and	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	2b c0       	rjmp	.+86     	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	a1 f4       	brne	.+40     	; 0x19f2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19ca:	a1 e3       	ldi	r26, 0x31	; 49
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e1 e3       	ldi	r30, 0x31	; 49
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_setupPinDirection+0x194>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_setupPinDirection+0x190>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19f2:	a1 e3       	ldi	r26, 0x31	; 49
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e1 e3       	ldi	r30, 0x31	; 49
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_setupPinDirection+0x1bc>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_setupPinDirection+0x1b8>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <GPIO_writePin+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <GPIO_writePin+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6a 83       	std	Y+2, r22	; 0x02
    1a3c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <GPIO_writePin+0x1c>
    1a44:	d5 c0       	rjmp	.+426    	; 0x1bf0 <GPIO_writePin+0x1c6>
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <GPIO_writePin+0x24>
    1a4c:	d1 c0       	rjmp	.+418    	; 0x1bf0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <GPIO_writePin+0x3a>
    1a62:	43 c0       	rjmp	.+134    	; 0x1aea <GPIO_writePin+0xc0>
    1a64:	2c 81       	ldd	r18, Y+4	; 0x04
    1a66:	3d 81       	ldd	r19, Y+5	; 0x05
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <GPIO_writePin+0x4e>
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	9d 81       	ldd	r25, Y+5	; 0x05
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <GPIO_writePin+0x68>
    1a76:	bc c0       	rjmp	.+376    	; 0x1bf0 <GPIO_writePin+0x1c6>
    1a78:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <GPIO_writePin+0x5a>
    1a82:	5f c0       	rjmp	.+190    	; 0x1b42 <GPIO_writePin+0x118>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <GPIO_writePin+0x66>
    1a8e:	85 c0       	rjmp	.+266    	; 0x1b9a <GPIO_writePin+0x170>
    1a90:	af c0       	rjmp	.+350    	; 0x1bf0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	a1 f4       	brne	.+40     	; 0x1ac0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a98:	ab e3       	ldi	r26, 0x3B	; 59
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	eb e3       	ldi	r30, 0x3B	; 59
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_writePin+0x8c>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_writePin+0x88>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	98 c0       	rjmp	.+304    	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPIO_writePin+0xb4>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <GPIO_writePin+0xb0>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	83 c0       	rjmp	.+262    	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	a1 f4       	brne	.+40     	; 0x1b18 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1af0:	a8 e3       	ldi	r26, 0x38	; 56
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_writePin+0xe4>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_writePin+0xe0>
    1b12:	84 2b       	or	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	6c c0       	rjmp	.+216    	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <GPIO_writePin+0x10c>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <GPIO_writePin+0x108>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	57 c0       	rjmp	.+174    	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	a1 f4       	brne	.+40     	; 0x1b70 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b48:	a5 e3       	ldi	r26, 0x35	; 53
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e5 e3       	ldi	r30, 0x35	; 53
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <GPIO_writePin+0x13c>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <GPIO_writePin+0x138>
    1b6a:	84 2b       	or	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	40 c0       	rjmp	.+128    	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b70:	a5 e3       	ldi	r26, 0x35	; 53
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e3       	ldi	r30, 0x35	; 53
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <GPIO_writePin+0x164>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <GPIO_writePin+0x160>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	2b c0       	rjmp	.+86     	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	a1 f4       	brne	.+40     	; 0x1bc8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ba0:	a2 e3       	ldi	r26, 0x32	; 50
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e2 e3       	ldi	r30, 0x32	; 50
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <GPIO_writePin+0x194>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <GPIO_writePin+0x190>
    1bc2:	84 2b       	or	r24, r20
    1bc4:	8c 93       	st	X, r24
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1bc8:	a2 e3       	ldi	r26, 0x32	; 50
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e2 e3       	ldi	r30, 0x32	; 50
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <GPIO_writePin+0x1bc>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <GPIO_writePin+0x1b8>
    1bea:	80 95       	com	r24
    1bec:	84 23       	and	r24, r20
    1bee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <GPIO_readPin+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <GPIO_readPin+0x8>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c12:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 30       	cpi	r24, 0x08	; 8
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <GPIO_readPin+0x1c>
    1c1a:	84 c0       	rjmp	.+264    	; 0x1d24 <GPIO_readPin+0x124>
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <GPIO_readPin+0x24>
    1c22:	80 c0       	rjmp	.+256    	; 0x1d24 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3d 83       	std	Y+5, r19	; 0x05
    1c2c:	2c 83       	std	Y+4, r18	; 0x04
    1c2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c30:	5d 81       	ldd	r21, Y+5	; 0x05
    1c32:	41 30       	cpi	r20, 0x01	; 1
    1c34:	51 05       	cpc	r21, r1
    1c36:	79 f1       	breq	.+94     	; 0x1c96 <GPIO_readPin+0x96>
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	91 05       	cpc	r25, r1
    1c40:	34 f4       	brge	.+12     	; 0x1c4e <GPIO_readPin+0x4e>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	21 15       	cp	r18, r1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	69 f0       	breq	.+26     	; 0x1c66 <GPIO_readPin+0x66>
    1c4c:	6b c0       	rjmp	.+214    	; 0x1d24 <GPIO_readPin+0x124>
    1c4e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c50:	5d 81       	ldd	r21, Y+5	; 0x05
    1c52:	42 30       	cpi	r20, 0x02	; 2
    1c54:	51 05       	cpc	r21, r1
    1c56:	b9 f1       	breq	.+110    	; 0x1cc6 <GPIO_readPin+0xc6>
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	91 05       	cpc	r25, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <GPIO_readPin+0x64>
    1c62:	49 c0       	rjmp	.+146    	; 0x1cf6 <GPIO_readPin+0xf6>
    1c64:	5f c0       	rjmp	.+190    	; 0x1d24 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c66:	e9 e3       	ldi	r30, 0x39	; 57
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a9 01       	movw	r20, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_readPin+0x7e>
    1c7a:	55 95       	asr	r21
    1c7c:	47 95       	ror	r20
    1c7e:	8a 95       	dec	r24
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_readPin+0x7a>
    1c82:	ca 01       	movw	r24, r20
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	88 23       	and	r24, r24
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	49 c0       	rjmp	.+146    	; 0x1d24 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c92:	19 82       	std	Y+1, r1	; 0x01
    1c94:	47 c0       	rjmp	.+142    	; 0x1d24 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c96:	e6 e3       	ldi	r30, 0x36	; 54
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a9 01       	movw	r20, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <GPIO_readPin+0xae>
    1caa:	55 95       	asr	r21
    1cac:	47 95       	ror	r20
    1cae:	8a 95       	dec	r24
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <GPIO_readPin+0xaa>
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	81 70       	andi	r24, 0x01	; 1
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	88 23       	and	r24, r24
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	31 c0       	rjmp	.+98     	; 0x1d24 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	2f c0       	rjmp	.+94     	; 0x1d24 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1cc6:	e3 e3       	ldi	r30, 0x33	; 51
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <GPIO_readPin+0xde>
    1cda:	55 95       	asr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <GPIO_readPin+0xda>
    1ce2:	ca 01       	movw	r24, r20
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	90 70       	andi	r25, 0x00	; 0
    1ce8:	88 23       	and	r24, r24
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	19 c0       	rjmp	.+50     	; 0x1d24 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
    1cf4:	17 c0       	rjmp	.+46     	; 0x1d24 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1cf6:	e0 e3       	ldi	r30, 0x30	; 48
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <GPIO_readPin+0x10e>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <GPIO_readPin+0x10a>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	90 70       	andi	r25, 0x00	; 0
    1d18:	88 23       	and	r24, r24
    1d1a:	19 f0       	breq	.+6      	; 0x1d22 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d22:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <GPIO_setupPortDirection+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <GPIO_setupPortDirection+0x8>
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	90 f5       	brcc	.+100    	; 0x1db0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3c 83       	std	Y+4, r19	; 0x04
    1d54:	2b 83       	std	Y+3, r18	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	d1 f0       	breq	.+52     	; 0x1d94 <GPIO_setupPortDirection+0x5e>
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <GPIO_setupPortDirection+0x3e>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <GPIO_setupPortDirection+0x54>
    1d72:	1e c0       	rjmp	.+60     	; 0x1db0 <GPIO_setupPortDirection+0x7a>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <GPIO_setupPortDirection+0x68>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	81 f0       	breq	.+32     	; 0x1da8 <GPIO_setupPortDirection+0x72>
    1d88:	13 c0       	rjmp	.+38     	; 0x1db0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d8a:	ea e3       	ldi	r30, 0x3A	; 58
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	80 83       	st	Z, r24
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d94:	e7 e3       	ldi	r30, 0x37	; 55
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	80 83       	st	Z, r24
    1d9c:	09 c0       	rjmp	.+18     	; 0x1db0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d9e:	e4 e3       	ldi	r30, 0x34	; 52
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 83       	st	Z, r24
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1da8:	e1 e3       	ldi	r30, 0x31	; 49
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
			break;
		}
	}
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <GPIO_writePort+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <GPIO_writePort+0x8>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	90 f5       	brcc	.+100    	; 0x1e38 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3c 83       	std	Y+4, r19	; 0x04
    1ddc:	2b 83       	std	Y+3, r18	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	d1 f0       	breq	.+52     	; 0x1e1c <GPIO_writePort+0x5e>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <GPIO_writePort+0x3e>
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	61 f0       	breq	.+24     	; 0x1e12 <GPIO_writePort+0x54>
    1dfa:	1e c0       	rjmp	.+60     	; 0x1e38 <GPIO_writePort+0x7a>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	81 f0       	breq	.+32     	; 0x1e26 <GPIO_writePort+0x68>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	81 f0       	breq	.+32     	; 0x1e30 <GPIO_writePort+0x72>
    1e10:	13 c0       	rjmp	.+38     	; 0x1e38 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e12:	eb e3       	ldi	r30, 0x3B	; 59
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	80 83       	st	Z, r24
    1e1a:	0e c0       	rjmp	.+28     	; 0x1e38 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e1c:	e8 e3       	ldi	r30, 0x38	; 56
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	80 83       	st	Z, r24
    1e24:	09 c0       	rjmp	.+18     	; 0x1e38 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e26:	e5 e3       	ldi	r30, 0x35	; 53
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	80 83       	st	Z, r24
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <GPIO_readPort+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <GPIO_readPort+0x8>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e54:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	90 f5       	brcc	.+100    	; 0x1ec0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	3c 83       	std	Y+4, r19	; 0x04
    1e64:	2b 83       	std	Y+3, r18	; 0x03
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	d1 f0       	breq	.+52     	; 0x1ea4 <GPIO_readPort+0x5e>
    1e70:	2b 81       	ldd	r18, Y+3	; 0x03
    1e72:	3c 81       	ldd	r19, Y+4	; 0x04
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <GPIO_readPort+0x3e>
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	61 f0       	breq	.+24     	; 0x1e9a <GPIO_readPort+0x54>
    1e82:	1e c0       	rjmp	.+60     	; 0x1ec0 <GPIO_readPort+0x7a>
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	81 f0       	breq	.+32     	; 0x1eae <GPIO_readPort+0x68>
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	91 05       	cpc	r25, r1
    1e96:	81 f0       	breq	.+32     	; 0x1eb8 <GPIO_readPort+0x72>
    1e98:	13 c0       	rjmp	.+38     	; 0x1ec0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e9a:	e9 e3       	ldi	r30, 0x39	; 57
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	0e c0       	rjmp	.+28     	; 0x1ec0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ea4:	e6 e3       	ldi	r30, 0x36	; 54
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1eae:	e3 e3       	ldi	r30, 0x33	; 51
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1eb8:	e0 e3       	ldi	r30, 0x30	; 48
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <TWI_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Initialize TWI (I2C) communication */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <TWI_init+0xa>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the Bit rate of this device in the bus by the user*/
	TWBR = ((F_CPU/Config_Ptr->bit_rate * 2) - 8); /* This Equation for zero prescaler only */
    1ee2:	00 e2       	ldi	r16, 0x20	; 32
    1ee4:	10 e0       	ldi	r17, 0x00	; 0
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	20 81       	ld	r18, Z
    1eec:	31 81       	ldd	r19, Z+1	; 0x01
    1eee:	42 81       	ldd	r20, Z+2	; 0x02
    1ef0:	53 81       	ldd	r21, Z+3	; 0x03
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	92 e1       	ldi	r25, 0x12	; 18
    1ef6:	aa e7       	ldi	r26, 0x7A	; 122
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__udivmodsi4>
    1f02:	da 01       	movw	r26, r20
    1f04:	c9 01       	movw	r24, r18
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	88 50       	subi	r24, 0x08	; 8
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24

	/* enable TWI */
	TWCR |= (1<<TWEN);
    1f14:	a6 e5       	ldi	r26, 0x56	; 86
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e6 e5       	ldi	r30, 0x56	; 86
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	84 60       	ori	r24, 0x04	; 4
    1f20:	8c 93       	st	X, r24

	/* Zero pre-scaler TWPS=00 */
	TWSR = 0x00;
    1f22:	e1 e2       	ldi	r30, 0x21	; 33
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	10 82       	st	Z, r1

	/* Configure the address of this device in the bus by the user*/
	TWAR = (TWAR & 0x01)|((Config_Ptr->address & 0x7F) << 1);
    1f28:	a2 e2       	ldi	r26, 0x22	; 34
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e2 e2       	ldi	r30, 0x22	; 34
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	28 2f       	mov	r18, r24
    1f34:	21 70       	andi	r18, 0x01	; 1
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	84 81       	ldd	r24, Z+4	; 0x04
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	82 2b       	or	r24, r18
    1f46:	8c 93       	st	X, r24
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <TWI_start>:

/* Transmit start condition */
void TWI_start(void)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1f5e:	e6 e5       	ldi	r30, 0x56	; 86
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	84 ea       	ldi	r24, 0xA4	; 164
    1f64:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1f66:	e6 e5       	ldi	r30, 0x56	; 86
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <TWI_start+0x10>
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <TWI_stop>:

/* Transmit stop condition */
void TWI_stop(void)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1f7e:	e6 e5       	ldi	r30, 0x56	; 86
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	84 e9       	ldi	r24, 0x94	; 148
    1f84:	80 83       	st	Z, r24
}
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <TWI_sendSlaveAddress>:

/* Send slave address and specify read/write direction */
void TWI_sendSlaveAddress(uint8 slave_address,TWI_SlaveReadWrite read_write)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <TWI_sendSlaveAddress+0x6>
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	6a 83       	std	Y+2, r22	; 0x02

	TWDR = ((slave_address & 0x7F) << 1)|(read_write & 0x01);
    1f9a:	e3 e2       	ldi	r30, 0x23	; 35
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	98 2f       	mov	r25, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	81 70       	andi	r24, 0x01	; 1
    1fae:	89 2b       	or	r24, r25
    1fb0:	80 83       	st	Z, r24

    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 e8       	ldi	r24, 0x84	; 132
    1fb8:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	dc f7       	brge	.-10     	; 0x1fba <TWI_sendSlaveAddress+0x2e>
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <TWI_writeByte>:

/* Write a byte to TWI bus */
void TWI_writeByte(uint8 byte)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	0f 92       	push	r0
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
	TWDR = byte;
    1fda:	e3 e2       	ldi	r30, 0x23	; 35
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	80 83       	st	Z, r24

    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fe2:	e6 e5       	ldi	r30, 0x56	; 86
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	84 e8       	ldi	r24, 0x84	; 132
    1fe8:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1fea:	e6 e5       	ldi	r30, 0x56	; 86
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 23       	and	r24, r24
    1ff2:	dc f7       	brge	.-10     	; 0x1fea <TWI_writeByte+0x1c>
}
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <TWI_readByteWithACK>:

/* Read a byte from TWI bus with ACK */
uint8 TWI_readByteWithACK(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2004:	e6 e5       	ldi	r30, 0x56	; 86
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	84 ec       	ldi	r24, 0xC4	; 196
    200a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    200c:	e6 e5       	ldi	r30, 0x56	; 86
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	88 23       	and	r24, r24
    2014:	dc f7       	brge	.-10     	; 0x200c <TWI_readByteWithACK+0x10>

    /* Read Data */
	return TWDR;
    2016:	e3 e2       	ldi	r30, 0x23	; 35
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
}
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <TWI_readByteWithNACK>:

/* Read a byte from TWI bus with NACK */
uint8 TWI_readByteWithNACK(void)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending NACK after reading or receiving data TWEA=0
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	84 e8       	ldi	r24, 0x84	; 132
    2030:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    2032:	e6 e5       	ldi	r30, 0x56	; 86
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 23       	and	r24, r24
    203a:	dc f7       	brge	.-10     	; 0x2032 <TWI_readByteWithNACK+0x10>

	/* Read Data */
	return TWDR;
    203c:	e3 e2       	ldi	r30, 0x23	; 35
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <TWI_getStatus>:

/* Get current status of TWI bus */
uint8 TWI_getStatus(void)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	return (TWSR & 0xF8);
    2050:	e1 e2       	ldi	r30, 0x21	; 33
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 7f       	andi	r24, 0xF8	; 248
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <PWM_Timer0_Start>:
/*
 * Description :
 * Function responsible To start the pwm signal using timer0 compare mode
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID,PIN_OUTPUT);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	63 e0       	ldi	r22, 0x03	; 3
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_setupPinDirection>

	TCNT0 = 0; /* Set Timer Initial value */
    2078:	e2 e5       	ldi	r30, 0x52	; 82
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	10 82       	st	Z, r1

	if (duty_cycle > 100)
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	85 36       	cpi	r24, 0x65	; 101
    2082:	10 f0       	brcs	.+4      	; 0x2088 <PWM_Timer0_Start+0x2a>
	{
		duty_cycle = 100;
    2084:	84 e6       	ldi	r24, 0x64	; 100
    2086:	89 83       	std	Y+1, r24	; 0x01
	}
	else if (duty_cycle < 0)
	{
		duty_cycle = 0;
	}
	OCR0  = (uint8)(((float)(duty_cycle)/(100)) * 255); /* Set Compare Value */
    2088:	0c e5       	ldi	r16, 0x5C	; 92
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e0       	ldi	r26, 0x00	; 0
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	48 ec       	ldi	r20, 0xC8	; 200
    20ac:	52 e4       	ldi	r21, 0x42	; 66
    20ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    20da:	e3 e5       	ldi	r30, 0x53	; 83
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	8a e6       	ldi	r24, 0x6A	; 106
    20e0:	80 83       	st	Z, r24
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <PWM_Timer0_Stop>:
/*
 * Description :
 * Function responsible To End the pwm signal.
 */
void PWM_Timer0_Stop (void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the timer clock & Clear timer registers  */
	TCCR0 = 0;
    20f6:	e3 e5       	ldi	r30, 0x53	; 83
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	10 82       	st	Z, r1
	OCR0  = 0;
    20fc:	ec e5       	ldi	r30, 0x5C	; 92
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	10 82       	st	Z, r1
	TCNT0 = 0;
    2102:	e2 e5       	ldi	r30, 0x52	; 82
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	10 82       	st	Z, r1
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <__vector_7>:
 *******************************************************************************/


/* Interrupt Service Routine for timer1 compare mode handle call back function */
ISR(TIMER1_COMPA_vect)
{
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	2f 93       	push	r18
    211a:	3f 93       	push	r19
    211c:	4f 93       	push	r20
    211e:	5f 93       	push	r21
    2120:	6f 93       	push	r22
    2122:	7f 93       	push	r23
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
	/* check if the pointer is not equal null */
	if (g_CallBackFunction != NULL_PTR)
    2138:	80 91 86 01 	lds	r24, 0x0186
    213c:	90 91 87 01 	lds	r25, 0x0187
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	29 f0       	breq	.+10     	; 0x214e <__vector_7+0x40>
	{
		/* call back the function passed to you */
		(*g_CallBackFunction)();
    2144:	e0 91 86 01 	lds	r30, 0x0186
    2148:	f0 91 87 01 	lds	r31, 0x0187
    214c:	09 95       	icall
	}
}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_9>:

/* Interrupt Service Routine for timer1 overflow mode to handle call back function */
ISR(TIMER1_OVF_vect)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	/* check if the pointer is not equal null */
	if (g_CallBackFunction != NULL_PTR)
    219e:	80 91 86 01 	lds	r24, 0x0186
    21a2:	90 91 87 01 	lds	r25, 0x0187
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	29 f0       	breq	.+10     	; 0x21b4 <__vector_9+0x40>
	{
		/* call back the function passed to you */
		(*g_CallBackFunction)();
    21aa:	e0 91 86 01 	lds	r30, 0x0186
    21ae:	f0 91 87 01 	lds	r31, 0x0187
    21b2:	09 95       	icall
	}
}
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	0f 90       	pop	r0
    21d6:	1f 90       	pop	r1
    21d8:	18 95       	reti

000021da <TIMER1_init>:
 * 	3. Set the required clock.
 * 	4. Set the required compare value.
 * 	5. Initialize Timer1 Registers.
 */
void TIMER1_init(const TIMER1_ConfigType * config_ptr)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <TIMER1_init+0x6>
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial count as configured */
	TCNT1 = config_ptr->initial_value;
    21e8:	ac e4       	ldi	r26, 0x4C	; 76
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	9c 93       	st	X, r25
    21f8:	8e 93       	st	-X, r24
	/*
	 * Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0 NON PWM mode
	 */
	TCCR1A = (1<<FOC1A);
    21fa:	ef e4       	ldi	r30, 0x4F	; 79
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	88 e0       	ldi	r24, 0x08	; 8
    2200:	80 83       	st	Z, r24

	/* If the configured mode is overflow mode */
	if (config_ptr->mode == OVERFLOW_MODE)
    2202:	e9 81       	ldd	r30, Y+1	; 0x01
    2204:	fa 81       	ldd	r31, Y+2	; 0x02
    2206:	80 81       	ld	r24, Z
    2208:	88 23       	and	r24, r24
    220a:	79 f4       	brne	.+30     	; 0x222a <TIMER1_init+0x50>
	{
		/* Set the mode of the timer to Normal mode */
		CLEAR_BIT(TCCR1B, WGM12);
    220c:	ae e4       	ldi	r26, 0x4E	; 78
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ee e4       	ldi	r30, 0x4E	; 78
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	8c 93       	st	X, r24

		/* Enable Timer1 overflow Interrupt */
		SET_BIT(TIMSK, TOIE1);
    221a:	a9 e5       	ldi	r26, 0x59	; 89
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e9 e5       	ldi	r30, 0x59	; 89
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	84 60       	ori	r24, 0x04	; 4
    2226:	8c 93       	st	X, r24
    2228:	1c c0       	rjmp	.+56     	; 0x2262 <TIMER1_init+0x88>
	}

	/* If the configured mode is compare mode */
	else if (config_ptr->mode == COMPARE_MODE)
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	80 81       	ld	r24, Z
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	b9 f4       	brne	.+46     	; 0x2262 <TIMER1_init+0x88>
	{
		/* Set the Compare value as configured */
		OCR1A = config_ptr->compare_value;
    2234:	aa e4       	ldi	r26, 0x4A	; 74
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	84 81       	ldd	r24, Z+4	; 0x04
    223e:	95 81       	ldd	r25, Z+5	; 0x05
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	9c 93       	st	X, r25
    2244:	8e 93       	st	-X, r24

		/* Set the mode of the timer to (CTC mode number 4) */
		SET_BIT(TCCR1B, WGM12);
    2246:	ae e4       	ldi	r26, 0x4E	; 78
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	8c 93       	st	X, r24

		/* Enable Timer1 Compare A Interrupt */
		SET_BIT(TIMSK, OCIE1A);
    2254:	a9 e5       	ldi	r26, 0x59	; 89
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 61       	ori	r24, 0x10	; 16
    2260:	8c 93       	st	X, r24
	/*
	 * Configure timer control register TCCR1B
	 * Set the prescaler as configured.
	 * Prescaler bits CS10, CS11, CS12.
	 */
	TCCR1B = (TCCR1B & 0xF8)|(config_ptr->prescaler & 0x07);
    2262:	ae e4       	ldi	r26, 0x4E	; 78
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	ee e4       	ldi	r30, 0x4E	; 78
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	98 2f       	mov	r25, r24
    226e:	98 7f       	andi	r25, 0xF8	; 248
    2270:	e9 81       	ldd	r30, Y+1	; 0x01
    2272:	fa 81       	ldd	r31, Y+2	; 0x02
    2274:	81 81       	ldd	r24, Z+1	; 0x01
    2276:	87 70       	andi	r24, 0x07	; 7
    2278:	89 2b       	or	r24, r25
    227a:	8c 93       	st	X, r24
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <TIMER1_deinit>:

/*
 * Description: Function to disable & stop Timer1.
 */
void TIMER1_deinit(void)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers Turn off the timer clock */
	TCNT1  = 0;
    228e:	ec e4       	ldi	r30, 0x4C	; 76
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	10 82       	st	Z, r1
	OCR1A  = 0;
    2296:	ea e4       	ldi	r30, 0x4A	; 74
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	11 82       	std	Z+1, r1	; 0x01
    229c:	10 82       	st	Z, r1
	TCCR1A = 0;
    229e:	ef e4       	ldi	r30, 0x4F	; 79
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
	TCCR1B = 0;
    22a4:	ee e4       	ldi	r30, 0x4E	; 78
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	10 82       	st	Z, r1

	/* Disable COMPARE A interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
    22aa:	a9 e5       	ldi	r26, 0x59	; 89
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e9 e5       	ldi	r30, 0x59	; 89
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	8f 7e       	andi	r24, 0xEF	; 239
    22b6:	8c 93       	st	X, r24

	/* Disable OVERFLOW interrupt */
	CLEAR_BIT(TIMSK, TOIE1);
    22b8:	a9 e5       	ldi	r26, 0x59	; 89
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e9 e5       	ldi	r30, 0x59	; 89
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8b 7f       	andi	r24, 0xFB	; 251
    22c4:	8c 93       	st	X, r24
}
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <TIMER1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER1_setCallBack(void (*ptr_func)(void))
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <TIMER1_setCallBack+0x6>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_CallBackFunction = (void*) ptr_func;
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	90 93 87 01 	sts	0x0187, r25
    22e2:	80 93 86 01 	sts	0x0186, r24
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <UART_init+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <UART_init+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubbr;

	UCSRA = (1<<U2X); /* U2X = 1 for double transmission speed */
    2300:	eb e2       	ldi	r30, 0x2B	; 43
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN)|(1<<TXEN);
    2308:	ea e2       	ldi	r30, 0x2A	; 42
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	88 e1       	ldi	r24, 0x18	; 24
    230e:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2310:	e0 e4       	ldi	r30, 0x40	; 64
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 e8       	ldi	r24, 0x80	; 128
    2316:	80 83       	st	Z, r24

	/* Set the parity bits (UPM1:0) based on the configuration */
	UCSRC = (UCSRC & 0xCF) | ((config_ptr->parity & 0x03) << 4);
    2318:	a0 e4       	ldi	r26, 0x40	; 64
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e0 e4       	ldi	r30, 0x40	; 64
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	28 2f       	mov	r18, r24
    2324:	2f 7c       	andi	r18, 0xCF	; 207
    2326:	eb 81       	ldd	r30, Y+3	; 0x03
    2328:	fc 81       	ldd	r31, Y+4	; 0x04
    232a:	80 81       	ld	r24, Z
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	83 70       	andi	r24, 0x03	; 3
    2332:	90 70       	andi	r25, 0x00	; 0
    2334:	82 95       	swap	r24
    2336:	92 95       	swap	r25
    2338:	90 7f       	andi	r25, 0xF0	; 240
    233a:	98 27       	eor	r25, r24
    233c:	80 7f       	andi	r24, 0xF0	; 240
    233e:	98 27       	eor	r25, r24
    2340:	82 2b       	or	r24, r18
    2342:	8c 93       	st	X, r24

	/* Set the stop bit (USBS) based on the configuration */
	if (config_ptr->stop_bit)
    2344:	eb 81       	ldd	r30, Y+3	; 0x03
    2346:	fc 81       	ldd	r31, Y+4	; 0x04
    2348:	81 81       	ldd	r24, Z+1	; 0x01
    234a:	88 23       	and	r24, r24
    234c:	41 f0       	breq	.+16     	; 0x235e <UART_init+0x6e>
	{
		UCSRC |= (1<<USBS); /* Two stop bits */
    234e:	a0 e4       	ldi	r26, 0x40	; 64
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e0 e4       	ldi	r30, 0x40	; 64
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	88 60       	ori	r24, 0x08	; 8
    235a:	8c 93       	st	X, r24
    235c:	07 c0       	rjmp	.+14     	; 0x236c <UART_init+0x7c>
	}
	else
	{
		UCSRC &= ~(1<<USBS); /* One stop bit */
    235e:	a0 e4       	ldi	r26, 0x40	; 64
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e0 e4       	ldi	r30, 0x40	; 64
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	87 7f       	andi	r24, 0xF7	; 247
    236a:	8c 93       	st	X, r24
	}

	/* Set the data size bits (UCSZ1:0) based on the configuration */
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->data_size & 0x03) << 1);
    236c:	a0 e4       	ldi	r26, 0x40	; 64
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e0 e4       	ldi	r30, 0x40	; 64
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	28 2f       	mov	r18, r24
    2378:	29 7f       	andi	r18, 0xF9	; 249
    237a:	eb 81       	ldd	r30, Y+3	; 0x03
    237c:	fc 81       	ldd	r31, Y+4	; 0x04
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	83 70       	andi	r24, 0x03	; 3
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	82 2b       	or	r24, r18
    238e:	8c 93       	st	X, r24

	/* calculating the 12 bit number baud rate */
	ubbr = (uint16) (((float)(F_CPU)/(8 * config_ptr->baud_rate)) - 1);
    2390:	eb 81       	ldd	r30, Y+3	; 0x03
    2392:	fc 81       	ldd	r31, Y+4	; 0x04
    2394:	83 81       	ldd	r24, Z+3	; 0x03
    2396:	94 81       	ldd	r25, Z+4	; 0x04
    2398:	a5 81       	ldd	r26, Z+5	; 0x05
    239a:	b6 81       	ldd	r27, Z+6	; 0x06
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	aa 1f       	adc	r26, r26
    23a2:	bb 1f       	adc	r27, r27
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	aa 1f       	adc	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	aa 1f       	adc	r26, r26
    23b2:	bb 1f       	adc	r27, r27
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23bc:	9b 01       	movw	r18, r22
    23be:	ac 01       	movw	r20, r24
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	74 e2       	ldi	r23, 0x24	; 36
    23c4:	84 ef       	ldi	r24, 0xF4	; 244
    23c6:	9a e4       	ldi	r25, 0x4A	; 74
    23c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	/* URSEL = 0  The URSEL must be one when writing the UCSRC */
	UBRRH = ubbr>>8;
    23f4:	e0 e4       	ldi	r30, 0x40	; 64
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	89 2f       	mov	r24, r25
    23fe:	99 27       	eor	r25, r25
    2400:	80 83       	st	Z, r24
	UBRRL = ubbr;
    2402:	e9 e2       	ldi	r30, 0x29	; 41
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	80 83       	st	Z, r24
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    2424:	eb e2       	ldi	r30, 0x2B	; 43
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	80 72       	andi	r24, 0x20	; 32
    2430:	90 70       	andi	r25, 0x00	; 0
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	b9 f3       	breq	.-18     	; 0x2424 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2436:	ec e2       	ldi	r30, 0x2C	; 44
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	80 83       	st	Z, r24
}
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 23       	and	r24, r24
    2456:	dc f7       	brge	.-10     	; 0x244e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2458:	ec e2       	ldi	r30, 0x2C	; 44
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <UART_sendString+0x6>
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	0e c0       	rjmp	.+28     	; 0x2494 <UART_sendString+0x30>

	/* Loop until the end of the string */
	while(Str[i] != '\0')
	{
		/* Send each character at a time */
		UART_sendByte(Str[i]);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	9b 81       	ldd	r25, Y+3	; 0x03
    2482:	fc 01       	movw	r30, r24
    2484:	e2 0f       	add	r30, r18
    2486:	f3 1f       	adc	r31, r19
    2488:	80 81       	ld	r24, Z
    248a:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
		i++;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Loop until the end of the string */
	while(Str[i] != '\0')
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	fc 01       	movw	r30, r24
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	39 f7       	brne	.-50     	; 0x2478 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}

	/* Send the last STRING_END SYMBOL*/
	UART_sendByte(STRING_END);
    24aa:	80 e4       	ldi	r24, 0x40	; 64
    24ac:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the symbol in the header file  through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <UART_receiveString+0xa>
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9b 83       	std	Y+3, r25	; 0x03
    24ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24d0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the STRING_END symbol */
	do
	{
		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	8c 01       	movw	r16, r24
    24de:	02 0f       	add	r16, r18
    24e0:	13 1f       	adc	r17, r19
    24e2:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    24e6:	f8 01       	movw	r30, r16
    24e8:	80 83       	st	Z, r24
		i++;
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	8f 5f       	subi	r24, 0xFF	; 255
    24ee:	89 83       	std	Y+1, r24	; 0x01

		/* Check if the last received byte is the STRING_END symbol*/
	}while(Str[i - 1] != STRING_END);
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 01       	movw	r18, r24
    24f8:	21 50       	subi	r18, 0x01	; 1
    24fa:	30 40       	sbci	r19, 0x00	; 0
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2500:	fc 01       	movw	r30, r24
    2502:	e2 0f       	add	r30, r18
    2504:	f3 1f       	adc	r31, r19
    2506:	80 81       	ld	r24, Z
    2508:	80 34       	cpi	r24, 0x40	; 64
    250a:	19 f7       	brne	.-58     	; 0x24d2 <UART_receiveString+0x16>

	/* After receiving the whole string plus the STRING_END symbol, replace this symbol with '\0' */
	Str[i - 1] = '\0';
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 01       	movw	r18, r24
    2514:	21 50       	subi	r18, 0x01	; 1
    2516:	30 40       	sbci	r19, 0x00	; 0
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	fc 01       	movw	r30, r24
    251e:	e2 0f       	add	r30, r18
    2520:	f3 1f       	adc	r31, r19
    2522:	10 82       	st	Z, r1
}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <UART_sendData>:
/*
 * Description :
 * Send the required Array of data through UART to the other UART device.
 */
void UART_sendData(const uint8 *arr, uint8 arr_size)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <UART_sendData+0x6>
    253a:	00 d0       	rcall	.+0      	; 0x253c <UART_sendData+0x8>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9b 83       	std	Y+3, r25	; 0x03
    2542:	8a 83       	std	Y+2, r24	; 0x02
    2544:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2546:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    2548:	19 82       	std	Y+1, r1	; 0x01
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <UART_sendData+0x34>
	{
		/* Send each Byte at a time */
		UART_sendByte(arr[i]);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	fc 01       	movw	r30, r24
    2558:	e2 0f       	add	r30, r18
    255a:	f3 1f       	adc	r31, r19
    255c:	80 81       	ld	r24, Z
    255e:	0e 94 0c 12 	call	0x2418	; 0x2418 <UART_sendByte>
void UART_sendData(const uint8 *arr, uint8 arr_size)
{
	uint8 i = 0;

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	99 81       	ldd	r25, Y+1	; 0x01
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	98 17       	cp	r25, r24
    256e:	70 f3       	brcs	.-36     	; 0x254c <UART_sendData+0x18>
	{
		/* Send each Byte at a time */
		UART_sendByte(arr[i]);
	}
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <UART_receiveData>:
/*
 * Description :
 * Receive the required Array of data through UART to the other UART device.
 */
void UART_receiveData(uint8 *arr, uint8 arr_size)
{
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <UART_receiveData+0xa>
    2588:	00 d0       	rcall	.+0      	; 0x258a <UART_receiveData+0xc>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9b 83       	std	Y+3, r25	; 0x03
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    2596:	19 82       	std	Y+1, r1	; 0x01
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <UART_receiveData+0x3a>
	{
		/* receive each Byte at a time */
		arr[i] = UART_recieveByte();
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	8c 01       	movw	r16, r24
    25a6:	02 0f       	add	r16, r18
    25a8:	13 1f       	adc	r17, r19
    25aa:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    25ae:	f8 01       	movw	r30, r16
    25b0:	80 83       	st	Z, r24
void UART_receiveData(uint8 *arr, uint8 arr_size)
{
	uint8 i = 0;

	/* Loop until the end of the array */
	for (i = 0; i < arr_size; i++)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	99 81       	ldd	r25, Y+1	; 0x01
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	98 17       	cp	r25, r24
    25be:	68 f3       	brcs	.-38     	; 0x259a <UART_receiveData+0x1c>
	{
		/* receive each Byte at a time */
		arr[i] = UART_recieveByte();
	}
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <__udivmodsi4>:
    25d2:	a1 e2       	ldi	r26, 0x21	; 33
    25d4:	1a 2e       	mov	r1, r26
    25d6:	aa 1b       	sub	r26, r26
    25d8:	bb 1b       	sub	r27, r27
    25da:	fd 01       	movw	r30, r26
    25dc:	0d c0       	rjmp	.+26     	; 0x25f8 <__udivmodsi4_ep>

000025de <__udivmodsi4_loop>:
    25de:	aa 1f       	adc	r26, r26
    25e0:	bb 1f       	adc	r27, r27
    25e2:	ee 1f       	adc	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	a2 17       	cp	r26, r18
    25e8:	b3 07       	cpc	r27, r19
    25ea:	e4 07       	cpc	r30, r20
    25ec:	f5 07       	cpc	r31, r21
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <__udivmodsi4_ep>
    25f0:	a2 1b       	sub	r26, r18
    25f2:	b3 0b       	sbc	r27, r19
    25f4:	e4 0b       	sbc	r30, r20
    25f6:	f5 0b       	sbc	r31, r21

000025f8 <__udivmodsi4_ep>:
    25f8:	66 1f       	adc	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	1a 94       	dec	r1
    2602:	69 f7       	brne	.-38     	; 0x25de <__udivmodsi4_loop>
    2604:	60 95       	com	r22
    2606:	70 95       	com	r23
    2608:	80 95       	com	r24
    260a:	90 95       	com	r25
    260c:	9b 01       	movw	r18, r22
    260e:	ac 01       	movw	r20, r24
    2610:	bd 01       	movw	r22, r26
    2612:	cf 01       	movw	r24, r30
    2614:	08 95       	ret

00002616 <__prologue_saves__>:
    2616:	2f 92       	push	r2
    2618:	3f 92       	push	r3
    261a:	4f 92       	push	r4
    261c:	5f 92       	push	r5
    261e:	6f 92       	push	r6
    2620:	7f 92       	push	r7
    2622:	8f 92       	push	r8
    2624:	9f 92       	push	r9
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	ca 1b       	sub	r28, r26
    2640:	db 0b       	sbc	r29, r27
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	09 94       	ijmp

0000264e <__epilogue_restores__>:
    264e:	2a 88       	ldd	r2, Y+18	; 0x12
    2650:	39 88       	ldd	r3, Y+17	; 0x11
    2652:	48 88       	ldd	r4, Y+16	; 0x10
    2654:	5f 84       	ldd	r5, Y+15	; 0x0f
    2656:	6e 84       	ldd	r6, Y+14	; 0x0e
    2658:	7d 84       	ldd	r7, Y+13	; 0x0d
    265a:	8c 84       	ldd	r8, Y+12	; 0x0c
    265c:	9b 84       	ldd	r9, Y+11	; 0x0b
    265e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2660:	b9 84       	ldd	r11, Y+9	; 0x09
    2662:	c8 84       	ldd	r12, Y+8	; 0x08
    2664:	df 80       	ldd	r13, Y+7	; 0x07
    2666:	ee 80       	ldd	r14, Y+6	; 0x06
    2668:	fd 80       	ldd	r15, Y+5	; 0x05
    266a:	0c 81       	ldd	r16, Y+4	; 0x04
    266c:	1b 81       	ldd	r17, Y+3	; 0x03
    266e:	aa 81       	ldd	r26, Y+2	; 0x02
    2670:	b9 81       	ldd	r27, Y+1	; 0x01
    2672:	ce 0f       	add	r28, r30
    2674:	d1 1d       	adc	r29, r1
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	ed 01       	movw	r28, r26
    2682:	08 95       	ret

00002684 <_exit>:
    2684:	f8 94       	cli

00002686 <__stop_program>:
    2686:	ff cf       	rjmp	.-2      	; 0x2686 <__stop_program>
